
SensorDemo_BLE_l476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  0800cd08  0800cd08  0001cd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d858  0800d858  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d858  0800d858  0001d858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d860  0800d860  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d860  0800d860  0001d860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d864  0800d864  0001d864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  200001f4  0800da5c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000a8c  0800da5c  00020a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_line   000248cb  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000238e2  00000000  00000000  00044aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040c4  00000000  00000000  000683d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b90  00000000  00000000  0006c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fbbe0  00000000  00000000  0006e028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019e0  00000000  00000000  00169c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c68c  00000000  00000000  0016b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00197c74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008648  00000000  00000000  00197cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ccf0 	.word	0x0800ccf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800ccf0 	.word	0x0800ccf0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb0:	f002 ff20 	bl	8003cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb6:	490d      	ldr	r1, [pc, #52]	; (8000eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <LoopForever+0xe>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ecc:	4c0a      	ldr	r4, [pc, #40]	; (8000ef8 <LoopForever+0x16>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eda:	f009 f8cb 	bl	800a074 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ede:	f002 f9b5 	bl	800324c <main>

08000ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee2:	e7fe      	b.n	8000ee2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8000ef0:	0800d868 	.word	0x0800d868
  ldr r2, =_sbss
 8000ef4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8000ef8:	20000a8c 	.word	0x20000a8c

08000efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_2_IRQHandler>
	...

08000f00 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 8000f06:	f000 f837 	bl	8000f78 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f002 fddc 	bl	8003ac8 <BSP_PB_GetState>
 8000f10:	4603      	mov	r3, r0
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_BlueNRG_2_Init+0x54>)
 8000f16:	701a      	strb	r2, [r3, #0]

  hci_init(APP_UserEvtRx, NULL);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	480f      	ldr	r0, [pc, #60]	; (8000f58 <MX_BlueNRG_2_Init+0x58>)
 8000f1c:	f008 fd98 	bl	8009a50 <hci_init>

  PRINT_DBG("BlueNRG-2 SensorDemo_BLESensor-App Application\r\n");
 8000f20:	480e      	ldr	r0, [pc, #56]	; (8000f5c <MX_BlueNRG_2_Init+0x5c>)
 8000f22:	f009 fdd1 	bl	800aac8 <puts>

  /* Init Sensor Device */
  ret = Sensor_DeviceInit();
 8000f26:	f000 f835 	bl	8000f94 <Sensor_DeviceInit>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d008      	beq.n	8000f46 <MX_BlueNRG_2_Init+0x46>
  {
    BSP_LED_On(LED2);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f002 fd29 	bl	800398c <BSP_LED_On>
    PRINT_DBG("SensorDeviceInit()--> Failed 0x%02x\r\n", ret);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4808      	ldr	r0, [pc, #32]	; (8000f60 <MX_BlueNRG_2_Init+0x60>)
 8000f40:	f009 fd3c 	bl	800a9bc <iprintf>
    while(1);
 8000f44:	e7fe      	b.n	8000f44 <MX_BlueNRG_2_Init+0x44>
  }

  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <MX_BlueNRG_2_Init+0x64>)
 8000f48:	f009 fdbe 	bl	800aac8 <puts>

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	08003431 	.word	0x08003431
 8000f5c:	0800cd08 	.word	0x0800cd08
 8000f60:	0800cd38 	.word	0x0800cd38
 8000f64:	0800cd60 	.word	0x0800cd60

08000f68 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  hci_user_evt_proc();
 8000f6c:	f008 feec 	bl	8009d48 <hci_user_evt_proc>
  User_Process();
 8000f70:	f000 f914 	bl	800119c <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f002 fd4e 	bl	8003a20 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f002 fcef 	bl	8003968 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f002 fdc6 	bl	8003b1c <BSP_COM_Init>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <Sensor_DeviceInit>:
 *
 * @param  None
 * @retval None
 */
uint8_t Sensor_DeviceInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af06      	add	r7, sp, #24
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t device_name[] = {SENSOR_DEMO_NAME};
 8000f9a:	4a6c      	ldr	r2, [pc, #432]	; (800114c <Sensor_DeviceInit+0x1b8>)
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa4:	6018      	str	r0, [r3, #0]
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	8019      	strh	r1, [r3, #0]
 8000faa:	3302      	adds	r3, #2
 8000fac:	0c0a      	lsrs	r2, r1, #16
 8000fae:	701a      	strb	r2, [r3, #0]
  uint8_t  hwVersion;
  uint16_t fwVersion;
  uint8_t  bdaddr_len_out;
  uint8_t  config_data_stored_static_random_address = 0x80; /* Offset of the static random address stored in NVM */
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	75fb      	strb	r3, [r7, #23]

  /* Sw reset of the device */
  hci_reset();
 8000fb4:	f008 fbca 	bl	800974c <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 8000fb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fbc:	f002 ff28 	bl	8003e10 <HAL_Delay>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000fc0:	1d3a      	adds	r2, r7, #4
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 fad6 	bl	8002578 <getBlueNRGVersion>

  PRINT_DBG("HWver %d\nFWver %d\r\n", hwVersion, fwVersion);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	485e      	ldr	r0, [pc, #376]	; (8001150 <Sensor_DeviceInit+0x1bc>)
 8000fd6:	f009 fcf1 	bl	800a9bc <iprintf>

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 8000fda:	1cf9      	adds	r1, r7, #3
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	4a5d      	ldr	r2, [pc, #372]	; (8001154 <Sensor_DeviceInit+0x1c0>)
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f006 ff9e 	bl	8007f22 <aci_hal_read_config_data>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75bb      	strb	r3, [r7, #22]
                                 &bdaddr_len_out, bdaddr);

  if (ret) {
 8000fea:	7dbb      	ldrb	r3, [r7, #22]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <Sensor_DeviceInit+0x62>
    PRINT_DBG("Read Static Random address failed.\r\n");
 8000ff0:	4859      	ldr	r0, [pc, #356]	; (8001158 <Sensor_DeviceInit+0x1c4>)
 8000ff2:	f009 fd69 	bl	800aac8 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000ff6:	4b57      	ldr	r3, [pc, #348]	; (8001154 <Sensor_DeviceInit+0x1c0>)
 8000ff8:	795b      	ldrb	r3, [r3, #5]
 8000ffa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8001000:	d003      	beq.n	800100a <Sensor_DeviceInit+0x76>
    PRINT_DBG("Static Random address not well formed.\r\n");
 8001002:	4856      	ldr	r0, [pc, #344]	; (800115c <Sensor_DeviceInit+0x1c8>)
 8001004:	f009 fd60 	bl	800aac8 <puts>
    while(1);
 8001008:	e7fe      	b.n	8001008 <Sensor_DeviceInit+0x74>
  }

  /* Set the TX power -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 800100a:	2104      	movs	r1, #4
 800100c:	2001      	movs	r0, #1
 800100e:	f007 f80c 	bl	800802a <aci_hal_set_tx_power_level>
  if (ret != BLE_STATUS_SUCCESS)
 8001012:	7dbb      	ldrb	r3, [r7, #22]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <Sensor_DeviceInit+0x92>
  {
    PRINT_DBG("Error in aci_hal_set_tx_power_level() 0x%04x\r\n", ret);
 8001018:	7dbb      	ldrb	r3, [r7, #22]
 800101a:	4619      	mov	r1, r3
 800101c:	4850      	ldr	r0, [pc, #320]	; (8001160 <Sensor_DeviceInit+0x1cc>)
 800101e:	f009 fccd 	bl	800a9bc <iprintf>
    return ret;
 8001022:	7dbb      	ldrb	r3, [r7, #22]
 8001024:	e08d      	b.n	8001142 <Sensor_DeviceInit+0x1ae>
  }
  else
  {
    PRINT_DBG("aci_hal_set_tx_power_level() --> SUCCESS\r\n");
 8001026:	484f      	ldr	r0, [pc, #316]	; (8001164 <Sensor_DeviceInit+0x1d0>)
 8001028:	f009 fd4e 	bl	800aac8 <puts>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 800102c:	f006 fc61 	bl	80078f2 <aci_gatt_init>
 8001030:	4603      	mov	r3, r0
 8001032:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS)
 8001034:	7dbb      	ldrb	r3, [r7, #22]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <Sensor_DeviceInit+0xb4>
  {
    PRINT_DBG("aci_gatt_init() failed: 0x%02x\r\n", ret);
 800103a:	7dbb      	ldrb	r3, [r7, #22]
 800103c:	4619      	mov	r1, r3
 800103e:	484a      	ldr	r0, [pc, #296]	; (8001168 <Sensor_DeviceInit+0x1d4>)
 8001040:	f009 fcbc 	bl	800a9bc <iprintf>
    return ret;
 8001044:	7dbb      	ldrb	r3, [r7, #22]
 8001046:	e07c      	b.n	8001142 <Sensor_DeviceInit+0x1ae>
  }
  else
  {
    PRINT_DBG("aci_gatt_init() --> SUCCESS\r\n");
 8001048:	4848      	ldr	r0, [pc, #288]	; (800116c <Sensor_DeviceInit+0x1d8>)
 800104a:	f009 fd3d 	bl	800aac8 <puts>
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07, &service_handle, &dev_name_char_handle,
 800104e:	f107 0214 	add.w	r2, r7, #20
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	f107 0312 	add.w	r3, r7, #18
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4613      	mov	r3, r2
 8001060:	2207      	movs	r2, #7
 8001062:	2100      	movs	r1, #0
 8001064:	2001      	movs	r0, #1
 8001066:	f006 fb1c 	bl	80076a2 <aci_gap_init>
 800106a:	4603      	mov	r3, r0
 800106c:	75bb      	strb	r3, [r7, #22]
                     &appearance_char_handle);
  if (ret != BLE_STATUS_SUCCESS)
 800106e:	7dbb      	ldrb	r3, [r7, #22]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <Sensor_DeviceInit+0xee>
  {
    PRINT_DBG("aci_gap_init() failed: 0x%02x\r\n", ret);
 8001074:	7dbb      	ldrb	r3, [r7, #22]
 8001076:	4619      	mov	r1, r3
 8001078:	483d      	ldr	r0, [pc, #244]	; (8001170 <Sensor_DeviceInit+0x1dc>)
 800107a:	f009 fc9f 	bl	800a9bc <iprintf>
    return ret;
 800107e:	7dbb      	ldrb	r3, [r7, #22]
 8001080:	e05f      	b.n	8001142 <Sensor_DeviceInit+0x1ae>
  }
  else
  {
    PRINT_DBG("aci_gap_init() --> SUCCESS\r\n");
 8001082:	483c      	ldr	r0, [pc, #240]	; (8001174 <Sensor_DeviceInit+0x1e0>)
 8001084:	f009 fd20 	bl	800aac8 <puts>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, sizeof(device_name),
 8001088:	8ab8      	ldrh	r0, [r7, #20]
 800108a:	8a79      	ldrh	r1, [r7, #18]
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2307      	movs	r3, #7
 8001094:	2200      	movs	r2, #0
 8001096:	f006 fe34 	bl	8007d02 <aci_gatt_update_char_value>
 800109a:	4603      	mov	r3, r0
 800109c:	75bb      	strb	r3, [r7, #22]
                                   device_name);
  if(ret != BLE_STATUS_SUCCESS)
 800109e:	7dbb      	ldrb	r3, [r7, #22]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <Sensor_DeviceInit+0x11e>
  {
    PRINT_DBG("aci_gatt_update_char_value() failed: 0x%02x\r\n", ret);
 80010a4:	7dbb      	ldrb	r3, [r7, #22]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4833      	ldr	r0, [pc, #204]	; (8001178 <Sensor_DeviceInit+0x1e4>)
 80010aa:	f009 fc87 	bl	800a9bc <iprintf>
    return ret;
 80010ae:	7dbb      	ldrb	r3, [r7, #22]
 80010b0:	e047      	b.n	8001142 <Sensor_DeviceInit+0x1ae>
  }
  else
  {
    PRINT_DBG("aci_gatt_update_char_value() --> SUCCESS\r\n");
 80010b2:	4832      	ldr	r0, [pc, #200]	; (800117c <Sensor_DeviceInit+0x1e8>)
 80010b4:	f009 fd08 	bl	800aac8 <puts>
  }

  /* BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype) */
  ret = aci_gap_set_authentication_requirement(BONDING,
 80010b8:	2300      	movs	r3, #0
 80010ba:	9304      	str	r3, [sp, #16]
 80010bc:	4b30      	ldr	r3, [pc, #192]	; (8001180 <Sensor_DeviceInit+0x1ec>)
 80010be:	9303      	str	r3, [sp, #12]
 80010c0:	2300      	movs	r3, #0
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2310      	movs	r3, #16
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	2307      	movs	r3, #7
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	2201      	movs	r2, #1
 80010d0:	2101      	movs	r1, #1
 80010d2:	2001      	movs	r0, #1
 80010d4:	f006 fa18 	bl	8007508 <aci_gap_set_authentication_requirement>
 80010d8:	4603      	mov	r3, r0
 80010da:	75bb      	strb	r3, [r7, #22]
                                               7,
                                               16,
                                               USE_FIXED_PIN_FOR_PAIRING,
                                               123456,
                                               0x00);
  if(ret != BLE_STATUS_SUCCESS)
 80010dc:	7dbb      	ldrb	r3, [r7, #22]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <Sensor_DeviceInit+0x15c>
  {
    PRINT_DBG("aci_gap_set_authentication_requirement()failed: 0x%02x\r\n", ret);
 80010e2:	7dbb      	ldrb	r3, [r7, #22]
 80010e4:	4619      	mov	r1, r3
 80010e6:	4827      	ldr	r0, [pc, #156]	; (8001184 <Sensor_DeviceInit+0x1f0>)
 80010e8:	f009 fc68 	bl	800a9bc <iprintf>
    return ret;
 80010ec:	7dbb      	ldrb	r3, [r7, #22]
 80010ee:	e028      	b.n	8001142 <Sensor_DeviceInit+0x1ae>
  }
  else
  {
    PRINT_DBG("aci_gap_set_authentication_requirement() --> SUCCESS\r\n");
 80010f0:	4825      	ldr	r0, [pc, #148]	; (8001188 <Sensor_DeviceInit+0x1f4>)
 80010f2:	f009 fce9 	bl	800aac8 <puts>
  }

  PRINT_DBG("BLE Stack Initialized with SUCCESS\r\n");
 80010f6:	4825      	ldr	r0, [pc, #148]	; (800118c <Sensor_DeviceInit+0x1f8>)
 80010f8:	f009 fce6 	bl	800aac8 <puts>

  ret = Add_HWServW2ST_Service();
 80010fc:	f001 fae6 	bl	80026cc <Add_HWServW2ST_Service>
 8001100:	4603      	mov	r3, r0
 8001102:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS)
 8001104:	7dbb      	ldrb	r3, [r7, #22]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10a      	bne.n	8001120 <Sensor_DeviceInit+0x18c>
  {
    PRINT_DBG("BlueNRG2 HW service added successfully.\r\n");
 800110a:	4821      	ldr	r0, [pc, #132]	; (8001190 <Sensor_DeviceInit+0x1fc>)
 800110c:	f009 fcdc 	bl	800aac8 <puts>
  {
    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
    while(1);
  }

  ret = Add_SWServW2ST_Service();
 8001110:	f001 fbb6 	bl	8002880 <Add_SWServW2ST_Service>
 8001114:	4603      	mov	r3, r0
 8001116:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS)
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10b      	bne.n	8001136 <Sensor_DeviceInit+0x1a2>
 800111e:	e005      	b.n	800112c <Sensor_DeviceInit+0x198>
    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
 8001120:	7dbb      	ldrb	r3, [r7, #22]
 8001122:	4619      	mov	r1, r3
 8001124:	481b      	ldr	r0, [pc, #108]	; (8001194 <Sensor_DeviceInit+0x200>)
 8001126:	f009 fc49 	bl	800a9bc <iprintf>
    while(1);
 800112a:	e7fe      	b.n	800112a <Sensor_DeviceInit+0x196>
  {
     PRINT_DBG("BlueNRG2 SW service added successfully.\r\n");
 800112c:	481a      	ldr	r0, [pc, #104]	; (8001198 <Sensor_DeviceInit+0x204>)
 800112e:	f009 fccb 	bl	800aac8 <puts>
  {
     PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
     while(1);
  }

  return BLE_STATUS_SUCCESS;
 8001132:	2300      	movs	r3, #0
 8001134:	e005      	b.n	8001142 <Sensor_DeviceInit+0x1ae>
     PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	4619      	mov	r1, r3
 800113a:	4816      	ldr	r0, [pc, #88]	; (8001194 <Sensor_DeviceInit+0x200>)
 800113c:	f009 fc3e 	bl	800a9bc <iprintf>
     while(1);
 8001140:	e7fe      	b.n	8001140 <Sensor_DeviceInit+0x1ac>
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	0800d048 	.word	0x0800d048
 8001150:	0800cd8c 	.word	0x0800cd8c
 8001154:	20000210 	.word	0x20000210
 8001158:	0800cda0 	.word	0x0800cda0
 800115c:	0800cdc4 	.word	0x0800cdc4
 8001160:	0800cdec 	.word	0x0800cdec
 8001164:	0800ce1c 	.word	0x0800ce1c
 8001168:	0800ce48 	.word	0x0800ce48
 800116c:	0800ce6c 	.word	0x0800ce6c
 8001170:	0800ce8c 	.word	0x0800ce8c
 8001174:	0800ceac 	.word	0x0800ceac
 8001178:	0800cec8 	.word	0x0800cec8
 800117c:	0800cef8 	.word	0x0800cef8
 8001180:	0001e240 	.word	0x0001e240
 8001184:	0800cf24 	.word	0x0800cf24
 8001188:	0800cf60 	.word	0x0800cf60
 800118c:	0800cf98 	.word	0x0800cf98
 8001190:	0800cfbc 	.word	0x0800cfbc
 8001194:	0800cfe8 	.word	0x0800cfe8
 8001198:	0800d01c 	.word	0x0800d01c

0800119c <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af02      	add	r7, sp, #8
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  /* Make the device discoverable */
  if(set_connectable)
 80011a2:	4b35      	ldr	r3, [pc, #212]	; (8001278 <User_Process+0xdc>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d004      	beq.n	80011b6 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 80011ac:	f002 f8b4 	bl	8003318 <Set_DeviceConnectable>
    set_connectable = FALSE;
 80011b0:	4b31      	ldr	r3, [pc, #196]	; (8001278 <User_Process+0xdc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f002 fc14 	bl	80039e4 <BSP_LED_Toggle>

    if (connected)
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <User_Process+0xe0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d055      	beq.n	8001270 <User_Process+0xd4>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 80011c4:	f002 fe18 	bl	8003df8 <HAL_GetTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f009 fc84 	bl	800aad8 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 80011d0:	463a      	mov	r2, r7
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f860 	bl	800129c <Set_Random_Environmental_Values>
      PRINT_DBG("Temperature: %6.2f Pressure: %6.2f\r\n", data_t, data_p);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9b2 	bl	8000548 <__aeabi_f2d>
 80011e4:	4604      	mov	r4, r0
 80011e6:	460d      	mov	r5, r1
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9ac 	bl	8000548 <__aeabi_f2d>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	e9cd 2300 	strd	r2, r3, [sp]
 80011f8:	4622      	mov	r2, r4
 80011fa:	462b      	mov	r3, r5
 80011fc:	4820      	ldr	r0, [pc, #128]	; (8001280 <User_Process+0xe4>)
 80011fe:	f009 fbdd 	bl	800a9bc <iprintf>
      Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001202:	edd7 7a00 	vldr	s15, [r7]
 8001206:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001284 <User_Process+0xe8>
 800120a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001212:	edd7 7a01 	vldr	s15, [r7, #4]
 8001216:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800121a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001222:	ee17 3a90 	vmov	r3, s15
 8001226:	b21b      	sxth	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	ee16 0a90 	vmov	r0, s13
 800122e:	f001 fcf7 	bl	8002c20 <Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <User_Process+0xec>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f846 	bl	80012c8 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 800123c:	4a13      	ldr	r2, [pc, #76]	; (800128c <User_Process+0xf0>)
 800123e:	4914      	ldr	r1, [pc, #80]	; (8001290 <User_Process+0xf4>)
 8001240:	4814      	ldr	r0, [pc, #80]	; (8001294 <User_Process+0xf8>)
 8001242:	f001 fbad 	bl	80029a0 <Acc_Update>
      Quat_Update(&q_axes);
 8001246:	4814      	ldr	r0, [pc, #80]	; (8001298 <User_Process+0xfc>)
 8001248:	f001 fc3c 	bl	8002ac4 <Quat_Update>

      counter ++;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <User_Process+0xec>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <User_Process+0xec>)
 8001254:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <User_Process+0xec>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b28      	cmp	r3, #40	; 0x28
 800125c:	d104      	bne.n	8001268 <User_Process+0xcc>
        counter = 0;
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <User_Process+0xec>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8001264:	f001 f89e 	bl	80023a4 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8001268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126c:	f002 fdd0 	bl	8003e10 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	20000001 	.word	0x20000001
 800127c:	200003a8 	.word	0x200003a8
 8001280:	0800d050 	.word	0x0800d050
 8001284:	42c80000 	.word	0x42c80000
 8001288:	20000218 	.word	0x20000218
 800128c:	200003c4 	.word	0x200003c4
 8001290:	200003b8 	.word	0x200003b8
 8001294:	200003ac 	.word	0x200003ac
 8001298:	200003d0 	.word	0x200003d0

0800129c <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  *data_t = 20.0;// + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <Set_Random_Environmental_Values+0x24>)
 80012aa:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0; //+ ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <Set_Random_Environmental_Values+0x28>)
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	41a00000 	.word	0x41a00000
 80012c4:	447a0000 	.word	0x447a0000

080012c8 <Set_Random_Motion_Values>:
 *
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 80012c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012cc:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 80012d6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80012da:	2b13      	cmp	r3, #19
 80012dc:	f200 8426 	bhi.w	8001b2c <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80012e0:	f009 fc28 	bl	800ab34 <rand>
 80012e4:	4603      	mov	r3, r0
 80012e6:	17da      	asrs	r2, r3, #31
 80012e8:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80012ec:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
 80012f0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80012f4:	2200      	movs	r2, #0
 80012f6:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 80012fa:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 80012fe:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 8001302:	462b      	mov	r3, r5
 8001304:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	; 0x320
 8001308:	4652      	mov	r2, sl
 800130a:	fb02 f203 	mul.w	r2, r2, r3
 800130e:	465b      	mov	r3, fp
 8001310:	4621      	mov	r1, r4
 8001312:	fb01 f303 	mul.w	r3, r1, r3
 8001316:	4413      	add	r3, r2
 8001318:	4622      	mov	r2, r4
 800131a:	4651      	mov	r1, sl
 800131c:	fba2 8901 	umull	r8, r9, r2, r1
 8001320:	444b      	add	r3, r9
 8001322:	4699      	mov	r9, r3
 8001324:	4642      	mov	r2, r8
 8001326:	464b      	mov	r3, r9
 8001328:	1891      	adds	r1, r2, r2
 800132a:	66b9      	str	r1, [r7, #104]	; 0x68
 800132c:	415b      	adcs	r3, r3
 800132e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001330:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001334:	eb12 0108 	adds.w	r1, r2, r8
 8001338:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 800133c:	eb43 0309 	adc.w	r3, r3, r9
 8001340:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8001344:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 8001350:	f7ff fc2a 	bl	8000ba8 <__aeabi_uldivmod>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	f112 010a 	adds.w	r1, r2, #10
 800135c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001360:	f143 0300 	adc.w	r3, r3, #0
 8001364:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001368:	4bec      	ldr	r3, [pc, #944]	; (800171c <Set_Random_Motion_Values+0x454>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001372:	4413      	add	r3, r2
 8001374:	461a      	mov	r2, r3
 8001376:	4be9      	ldr	r3, [pc, #932]	; (800171c <Set_Random_Motion_Values+0x454>)
 8001378:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800137a:	f009 fbdb 	bl	800ab34 <rand>
 800137e:	4603      	mov	r3, r0
 8001380:	17da      	asrs	r2, r3, #31
 8001382:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8001386:	f8c7 2314 	str.w	r2, [r7, #788]	; 0x314
 800138a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800138e:	2200      	movs	r2, #0
 8001390:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8001394:	f8c7 230c 	str.w	r2, [r7, #780]	; 0x30c
 8001398:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 800139c:	462b      	mov	r3, r5
 800139e:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	; 0x308
 80013a2:	4642      	mov	r2, r8
 80013a4:	fb02 f203 	mul.w	r2, r2, r3
 80013a8:	464b      	mov	r3, r9
 80013aa:	4621      	mov	r1, r4
 80013ac:	fb01 f303 	mul.w	r3, r1, r3
 80013b0:	4413      	add	r3, r2
 80013b2:	4622      	mov	r2, r4
 80013b4:	4641      	mov	r1, r8
 80013b6:	fba2 1201 	umull	r1, r2, r2, r1
 80013ba:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 80013be:	460a      	mov	r2, r1
 80013c0:	f8c7 23d8 	str.w	r2, [r7, #984]	; 0x3d8
 80013c4:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 80013c8:	4413      	add	r3, r2
 80013ca:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 80013ce:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 80013d2:	4622      	mov	r2, r4
 80013d4:	462b      	mov	r3, r5
 80013d6:	f04f 0000 	mov.w	r0, #0
 80013da:	f04f 0100 	mov.w	r1, #0
 80013de:	0099      	lsls	r1, r3, #2
 80013e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80013e4:	0090      	lsls	r0, r2, #2
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4621      	mov	r1, r4
 80013ec:	1851      	adds	r1, r2, r1
 80013ee:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 80013f2:	4629      	mov	r1, r5
 80013f4:	eb43 0101 	adc.w	r1, r3, r1
 80013f8:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
 80013fc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8001408:	f7ff fbce 	bl	8000ba8 <__aeabi_uldivmod>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	f06f 0009 	mvn.w	r0, #9
 8001414:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001418:	1a80      	subs	r0, r0, r2
 800141a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800141e:	eb61 0303 	sbc.w	r3, r1, r3
 8001422:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001426:	4bbd      	ldr	r3, [pc, #756]	; (800171c <Set_Random_Motion_Values+0x454>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	461a      	mov	r2, r3
 800142c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001430:	4413      	add	r3, r2
 8001432:	461a      	mov	r2, r3
 8001434:	4bb9      	ldr	r3, [pc, #740]	; (800171c <Set_Random_Motion_Values+0x454>)
 8001436:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001438:	f009 fb7c 	bl	800ab34 <rand>
 800143c:	4603      	mov	r3, r0
 800143e:	17da      	asrs	r2, r3, #31
 8001440:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8001444:	f8c7 22fc 	str.w	r2, [r7, #764]	; 0x2fc
 8001448:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800144c:	2200      	movs	r2, #0
 800144e:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8001452:	f8c7 22f4 	str.w	r2, [r7, #756]	; 0x2f4
 8001456:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 800145a:	462b      	mov	r3, r5
 800145c:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	; 0x2f0
 8001460:	4642      	mov	r2, r8
 8001462:	fb02 f203 	mul.w	r2, r2, r3
 8001466:	464b      	mov	r3, r9
 8001468:	4621      	mov	r1, r4
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	4413      	add	r3, r2
 8001470:	4622      	mov	r2, r4
 8001472:	4641      	mov	r1, r8
 8001474:	fba2 1201 	umull	r1, r2, r2, r1
 8001478:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 800147c:	460a      	mov	r2, r1
 800147e:	f8c7 23d0 	str.w	r2, [r7, #976]	; 0x3d0
 8001482:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 8001486:	4413      	add	r3, r2
 8001488:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800148c:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 8001490:	4622      	mov	r2, r4
 8001492:	462b      	mov	r3, r5
 8001494:	f04f 0000 	mov.w	r0, #0
 8001498:	f04f 0100 	mov.w	r1, #0
 800149c:	00d9      	lsls	r1, r3, #3
 800149e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014a2:	00d0      	lsls	r0, r2, #3
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4621      	mov	r1, r4
 80014aa:	1a51      	subs	r1, r2, r1
 80014ac:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 80014b0:	4629      	mov	r1, r5
 80014b2:	eb63 0301 	sbc.w	r3, r3, r1
 80014b6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80014ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 80014c6:	f7ff fb6f 	bl	8000ba8 <__aeabi_uldivmod>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	f112 010a 	adds.w	r1, r2, #10
 80014d2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80014d6:	f143 0300 	adc.w	r3, r3, #0
 80014da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80014de:	4b8f      	ldr	r3, [pc, #572]	; (800171c <Set_Random_Motion_Values+0x454>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	461a      	mov	r2, r3
 80014e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014e8:	4413      	add	r3, r2
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b8b      	ldr	r3, [pc, #556]	; (800171c <Set_Random_Motion_Values+0x454>)
 80014ee:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 80014f0:	f009 fb20 	bl	800ab34 <rand>
 80014f4:	4603      	mov	r3, r0
 80014f6:	17da      	asrs	r2, r3, #31
 80014f8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80014fc:	f8c7 22e4 	str.w	r2, [r7, #740]	; 0x2e4
 8001500:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001504:	2200      	movs	r2, #0
 8001506:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 800150a:	f8c7 22dc 	str.w	r2, [r7, #732]	; 0x2dc
 800150e:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8001512:	462b      	mov	r3, r5
 8001514:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	; 0x2d8
 8001518:	4642      	mov	r2, r8
 800151a:	fb02 f203 	mul.w	r2, r2, r3
 800151e:	464b      	mov	r3, r9
 8001520:	4621      	mov	r1, r4
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	4622      	mov	r2, r4
 800152a:	4641      	mov	r1, r8
 800152c:	fba2 1201 	umull	r1, r2, r2, r1
 8001530:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8001534:	460a      	mov	r2, r1
 8001536:	f8c7 23c8 	str.w	r2, [r7, #968]	; 0x3c8
 800153a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 800153e:	4413      	add	r3, r2
 8001540:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8001544:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	; 0x3c8
 8001548:	460b      	mov	r3, r1
 800154a:	18db      	adds	r3, r3, r3
 800154c:	663b      	str	r3, [r7, #96]	; 0x60
 800154e:	4613      	mov	r3, r2
 8001550:	eb42 0303 	adc.w	r3, r2, r3
 8001554:	667b      	str	r3, [r7, #100]	; 0x64
 8001556:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800155a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	f7ff fb21 	bl	8000ba8 <__aeabi_uldivmod>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800156e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001572:	f143 0300 	adc.w	r3, r3, #0
 8001576:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800157a:	4b69      	ldr	r3, [pc, #420]	; (8001720 <Set_Random_Motion_Values+0x458>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001584:	4413      	add	r3, r2
 8001586:	461a      	mov	r2, r3
 8001588:	4b65      	ldr	r3, [pc, #404]	; (8001720 <Set_Random_Motion_Values+0x458>)
 800158a:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800158c:	f009 fad2 	bl	800ab34 <rand>
 8001590:	4603      	mov	r3, r0
 8001592:	17da      	asrs	r2, r3, #31
 8001594:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8001598:	f8c7 22d4 	str.w	r2, [r7, #724]	; 0x2d4
 800159c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80015a0:	2200      	movs	r2, #0
 80015a2:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 80015a6:	f8c7 22cc 	str.w	r2, [r7, #716]	; 0x2cc
 80015aa:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 80015ae:	462b      	mov	r3, r5
 80015b0:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	; 0x2c8
 80015b4:	4642      	mov	r2, r8
 80015b6:	fb02 f203 	mul.w	r2, r2, r3
 80015ba:	464b      	mov	r3, r9
 80015bc:	4621      	mov	r1, r4
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	4622      	mov	r2, r4
 80015c6:	4641      	mov	r1, r8
 80015c8:	fba2 1201 	umull	r1, r2, r2, r1
 80015cc:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 80015d0:	460a      	mov	r2, r1
 80015d2:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 80015d6:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80015da:	4413      	add	r3, r2
 80015dc:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 80015e0:	f04f 0000 	mov.w	r0, #0
 80015e4:	f04f 0100 	mov.w	r1, #0
 80015e8:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 80015ec:	462b      	mov	r3, r5
 80015ee:	0099      	lsls	r1, r3, #2
 80015f0:	4623      	mov	r3, r4
 80015f2:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80015f6:	4623      	mov	r3, r4
 80015f8:	0098      	lsls	r0, r3, #2
 80015fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	f7ff fad1 	bl	8000ba8 <__aeabi_uldivmod>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800160e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001612:	1a80      	subs	r0, r0, r2
 8001614:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8001618:	eb61 0303 	sbc.w	r3, r1, r3
 800161c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001620:	4b3f      	ldr	r3, [pc, #252]	; (8001720 <Set_Random_Motion_Values+0x458>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	461a      	mov	r2, r3
 8001626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800162a:	4413      	add	r3, r2
 800162c:	461a      	mov	r2, r3
 800162e:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <Set_Random_Motion_Values+0x458>)
 8001630:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001632:	f009 fa7f 	bl	800ab34 <rand>
 8001636:	4603      	mov	r3, r0
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 800163e:	f8c7 22c4 	str.w	r2, [r7, #708]	; 0x2c4
 8001642:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001646:	2200      	movs	r2, #0
 8001648:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800164c:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 8001650:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 8001654:	462b      	mov	r3, r5
 8001656:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	; 0x2b8
 800165a:	4642      	mov	r2, r8
 800165c:	fb02 f203 	mul.w	r2, r2, r3
 8001660:	464b      	mov	r3, r9
 8001662:	4621      	mov	r1, r4
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	4622      	mov	r2, r4
 800166c:	4641      	mov	r1, r8
 800166e:	fba2 1201 	umull	r1, r2, r2, r1
 8001672:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 8001676:	460a      	mov	r2, r1
 8001678:	f8c7 23b8 	str.w	r2, [r7, #952]	; 0x3b8
 800167c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 8001680:	4413      	add	r3, r2
 8001682:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8001686:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 800168a:	4622      	mov	r2, r4
 800168c:	462b      	mov	r3, r5
 800168e:	1891      	adds	r1, r2, r2
 8001690:	65b9      	str	r1, [r7, #88]	; 0x58
 8001692:	415b      	adcs	r3, r3
 8001694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800169a:	4621      	mov	r1, r4
 800169c:	1851      	adds	r1, r2, r1
 800169e:	6539      	str	r1, [r7, #80]	; 0x50
 80016a0:	4629      	mov	r1, r5
 80016a2:	eb43 0101 	adc.w	r1, r3, r1
 80016a6:	6579      	str	r1, [r7, #84]	; 0x54
 80016a8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80016ac:	460b      	mov	r3, r1
 80016ae:	18db      	adds	r3, r3, r3
 80016b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80016b2:	4613      	mov	r3, r2
 80016b4:	eb42 0303 	adc.w	r3, r2, r3
 80016b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016ba:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80016be:	4618      	mov	r0, r3
 80016c0:	4621      	mov	r1, r4
 80016c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	f7ff fa6d 	bl	8000ba8 <__aeabi_uldivmod>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80016d6:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80016da:	f143 0300 	adc.w	r3, r3, #0
 80016de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <Set_Random_Motion_Values+0x458>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	461a      	mov	r2, r3
 80016e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016ec:	4413      	add	r3, r2
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <Set_Random_Motion_Values+0x458>)
 80016f2:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80016f4:	f009 fa1e 	bl	800ab34 <rand>
 80016f8:	4603      	mov	r3, r0
 80016fa:	17da      	asrs	r2, r3, #31
 80016fc:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8001700:	f8c7 22b4 	str.w	r2, [r7, #692]	; 0x2b4
 8001704:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001708:	2200      	movs	r2, #0
 800170a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 800170e:	f8c7 22ac 	str.w	r2, [r7, #684]	; 0x2ac
 8001712:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 8001716:	462b      	mov	r3, r5
 8001718:	e004      	b.n	8001724 <Set_Random_Motion_Values+0x45c>
 800171a:	bf00      	nop
 800171c:	200003ac 	.word	0x200003ac
 8001720:	200003b8 	.word	0x200003b8
 8001724:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	; 0x2a8
 8001728:	4642      	mov	r2, r8
 800172a:	fb02 f203 	mul.w	r2, r2, r3
 800172e:	464b      	mov	r3, r9
 8001730:	4621      	mov	r1, r4
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	4413      	add	r3, r2
 8001738:	4622      	mov	r2, r4
 800173a:	4641      	mov	r1, r8
 800173c:	fba2 1201 	umull	r1, r2, r2, r1
 8001740:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 8001744:	460a      	mov	r2, r1
 8001746:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 800174a:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800174e:	4413      	add	r3, r2
 8001750:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8001754:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	; 0x3b0
 8001758:	4622      	mov	r2, r4
 800175a:	462b      	mov	r3, r5
 800175c:	1891      	adds	r1, r2, r2
 800175e:	6439      	str	r1, [r7, #64]	; 0x40
 8001760:	415b      	adcs	r3, r3
 8001762:	647b      	str	r3, [r7, #68]	; 0x44
 8001764:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001768:	4621      	mov	r1, r4
 800176a:	1851      	adds	r1, r2, r1
 800176c:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8001770:	4629      	mov	r1, r5
 8001772:	eb43 0101 	adc.w	r1, r3, r1
 8001776:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 800177a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8001786:	f7ff fa0f 	bl	8000ba8 <__aeabi_uldivmod>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	1cd1      	adds	r1, r2, #3
 8001790:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001794:	f143 0300 	adc.w	r3, r3, #0
 8001798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800179c:	4be1      	ldr	r3, [pc, #900]	; (8001b24 <Set_Random_Motion_Values+0x85c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017a6:	4413      	add	r3, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4bde      	ldr	r3, [pc, #888]	; (8001b24 <Set_Random_Motion_Values+0x85c>)
 80017ac:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80017ae:	f009 f9c1 	bl	800ab34 <rand>
 80017b2:	4603      	mov	r3, r0
 80017b4:	17da      	asrs	r2, r3, #31
 80017b6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80017ba:	f8c7 229c 	str.w	r2, [r7, #668]	; 0x29c
 80017be:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80017c8:	f8c7 2294 	str.w	r2, [r7, #660]	; 0x294
 80017cc:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 80017d0:	462b      	mov	r3, r5
 80017d2:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 80017d6:	4642      	mov	r2, r8
 80017d8:	fb02 f203 	mul.w	r2, r2, r3
 80017dc:	464b      	mov	r3, r9
 80017de:	4621      	mov	r1, r4
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	4622      	mov	r2, r4
 80017e8:	4641      	mov	r1, r8
 80017ea:	fba2 1201 	umull	r1, r2, r2, r1
 80017ee:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 80017f2:	460a      	mov	r2, r1
 80017f4:	f8c7 23a8 	str.w	r2, [r7, #936]	; 0x3a8
 80017f8:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 80017fc:	4413      	add	r3, r2
 80017fe:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8001802:	f04f 0000 	mov.w	r0, #0
 8001806:	f04f 0100 	mov.w	r1, #0
 800180a:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 800180e:	462b      	mov	r3, r5
 8001810:	0099      	lsls	r1, r3, #2
 8001812:	4623      	mov	r3, r4
 8001814:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001818:	4623      	mov	r3, r4
 800181a:	0098      	lsls	r0, r3, #2
 800181c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	f7ff f9c0 	bl	8000ba8 <__aeabi_uldivmod>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	f06f 0002 	mvn.w	r0, #2
 8001830:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001834:	1a80      	subs	r0, r0, r2
 8001836:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800183a:	eb61 0303 	sbc.w	r3, r1, r3
 800183e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001842:	4bb8      	ldr	r3, [pc, #736]	; (8001b24 <Set_Random_Motion_Values+0x85c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	461a      	mov	r2, r3
 8001848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800184c:	4413      	add	r3, r2
 800184e:	461a      	mov	r2, r3
 8001850:	4bb4      	ldr	r3, [pc, #720]	; (8001b24 <Set_Random_Motion_Values+0x85c>)
 8001852:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001854:	f009 f96e 	bl	800ab34 <rand>
 8001858:	4603      	mov	r3, r0
 800185a:	17da      	asrs	r2, r3, #31
 800185c:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8001860:	f8c7 228c 	str.w	r2, [r7, #652]	; 0x28c
 8001864:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001868:	2200      	movs	r2, #0
 800186a:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 800186e:	f8c7 2284 	str.w	r2, [r7, #644]	; 0x284
 8001872:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 8001876:	462b      	mov	r3, r5
 8001878:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 800187c:	4642      	mov	r2, r8
 800187e:	fb02 f203 	mul.w	r2, r2, r3
 8001882:	464b      	mov	r3, r9
 8001884:	4621      	mov	r1, r4
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	4622      	mov	r2, r4
 800188e:	4641      	mov	r1, r8
 8001890:	fba2 1201 	umull	r1, r2, r2, r1
 8001894:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8001898:	460a      	mov	r2, r1
 800189a:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 800189e:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 80018a2:	4413      	add	r3, r2
 80018a4:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80018a8:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 80018ac:	4622      	mov	r2, r4
 80018ae:	462b      	mov	r3, r5
 80018b0:	f04f 0000 	mov.w	r0, #0
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	0099      	lsls	r1, r3, #2
 80018ba:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80018be:	0090      	lsls	r0, r2, #2
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4621      	mov	r1, r4
 80018c6:	1851      	adds	r1, r2, r1
 80018c8:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80018cc:	4629      	mov	r1, r5
 80018ce:	eb43 0101 	adc.w	r1, r3, r1
 80018d2:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 80018d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80018e2:	f7ff f961 	bl	8000ba8 <__aeabi_uldivmod>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	1cd1      	adds	r1, r2, #3
 80018ec:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80018f0:	f143 0300 	adc.w	r3, r3, #0
 80018f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80018f8:	4b8a      	ldr	r3, [pc, #552]	; (8001b24 <Set_Random_Motion_Values+0x85c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	461a      	mov	r2, r3
 80018fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001902:	4413      	add	r3, r2
 8001904:	461a      	mov	r2, r3
 8001906:	4b87      	ldr	r3, [pc, #540]	; (8001b24 <Set_Random_Motion_Values+0x85c>)
 8001908:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800190a:	f009 f913 	bl	800ab34 <rand>
 800190e:	4603      	mov	r3, r0
 8001910:	17da      	asrs	r2, r3, #31
 8001912:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8001916:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 800191a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800191e:	2200      	movs	r2, #0
 8001920:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8001924:	f8c7 226c 	str.w	r2, [r7, #620]	; 0x26c
 8001928:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 800192c:	462b      	mov	r3, r5
 800192e:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	; 0x268
 8001932:	4642      	mov	r2, r8
 8001934:	fb02 f203 	mul.w	r2, r2, r3
 8001938:	464b      	mov	r3, r9
 800193a:	4621      	mov	r1, r4
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	4622      	mov	r2, r4
 8001944:	4641      	mov	r1, r8
 8001946:	fba2 1201 	umull	r1, r2, r2, r1
 800194a:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 800194e:	460a      	mov	r2, r1
 8001950:	f8c7 2398 	str.w	r2, [r7, #920]	; 0x398
 8001954:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8001958:	4413      	add	r3, r2
 800195a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800195e:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 8001962:	4622      	mov	r2, r4
 8001964:	462b      	mov	r3, r5
 8001966:	1891      	adds	r1, r2, r2
 8001968:	63b9      	str	r1, [r7, #56]	; 0x38
 800196a:	415b      	adcs	r3, r3
 800196c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800196e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001972:	4621      	mov	r1, r4
 8001974:	1851      	adds	r1, r2, r1
 8001976:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 800197a:	4629      	mov	r1, r5
 800197c:	eb43 0101 	adc.w	r1, r3, r1
 8001980:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 8001984:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	; 0x260
 8001990:	f7ff f90a 	bl	8000ba8 <__aeabi_uldivmod>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800199c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80019a0:	f143 0300 	adc.w	r3, r3, #0
 80019a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019a8:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <Set_Random_Motion_Values+0x860>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b5c      	ldr	r3, [pc, #368]	; (8001b28 <Set_Random_Motion_Values+0x860>)
 80019b8:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80019ba:	f009 f8bb 	bl	800ab34 <rand>
 80019be:	4603      	mov	r3, r0
 80019c0:	17da      	asrs	r2, r3, #31
 80019c2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 80019c6:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 80019ca:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80019ce:	2200      	movs	r2, #0
 80019d0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80019d4:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 80019d8:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 80019dc:	462b      	mov	r3, r5
 80019de:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	; 0x250
 80019e2:	4642      	mov	r2, r8
 80019e4:	fb02 f203 	mul.w	r2, r2, r3
 80019e8:	464b      	mov	r3, r9
 80019ea:	4621      	mov	r1, r4
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	4622      	mov	r2, r4
 80019f4:	4641      	mov	r1, r8
 80019f6:	fba2 1201 	umull	r1, r2, r2, r1
 80019fa:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 80019fe:	460a      	mov	r2, r1
 8001a00:	f8c7 2390 	str.w	r2, [r7, #912]	; 0x390
 8001a04:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8001a08:	4413      	add	r3, r2
 8001a0a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8001a0e:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 8001a12:	4622      	mov	r2, r4
 8001a14:	462b      	mov	r3, r5
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	0099      	lsls	r1, r3, #2
 8001a20:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001a24:	0090      	lsls	r0, r2, #2
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	1851      	adds	r1, r2, r1
 8001a2e:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8001a32:	4629      	mov	r1, r5
 8001a34:	eb43 0101 	adc.w	r1, r3, r1
 8001a38:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8001a3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8001a48:	f7ff f8ae 	bl	8000ba8 <__aeabi_uldivmod>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001a54:	67b9      	str	r1, [r7, #120]	; 0x78
 8001a56:	f143 0300 	adc.w	r3, r3, #0
 8001a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a5c:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <Set_Random_Motion_Values+0x860>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	461a      	mov	r2, r3
 8001a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a64:	4413      	add	r3, r2
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <Set_Random_Motion_Values+0x860>)
 8001a6a:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001a6c:	f009 f862 	bl	800ab34 <rand>
 8001a70:	4603      	mov	r3, r0
 8001a72:	17da      	asrs	r2, r3, #31
 8001a74:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8001a78:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8001a7c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001a80:	2200      	movs	r2, #0
 8001a82:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8001a86:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 8001a8a:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8001a8e:	462b      	mov	r3, r5
 8001a90:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	; 0x238
 8001a94:	4642      	mov	r2, r8
 8001a96:	fb02 f203 	mul.w	r2, r2, r3
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	4641      	mov	r1, r8
 8001aa8:	fba2 1201 	umull	r1, r2, r2, r1
 8001aac:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8001ab0:	460a      	mov	r2, r1
 8001ab2:	f8c7 2388 	str.w	r2, [r7, #904]	; 0x388
 8001ab6:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 8001aba:	4413      	add	r3, r2
 8001abc:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8001ac0:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	462b      	mov	r3, r5
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	00d9      	lsls	r1, r3, #3
 8001ad2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ad6:	00d0      	lsls	r0, r2, #3
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4621      	mov	r1, r4
 8001ade:	1a51      	subs	r1, r2, r1
 8001ae0:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aea:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001aee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8001afa:	f7ff f855 	bl	8000ba8 <__aeabi_uldivmod>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001b06:	6739      	str	r1, [r7, #112]	; 0x70
 8001b08:	f143 0300 	adc.w	r3, r3, #0
 8001b0c:	677b      	str	r3, [r7, #116]	; 0x74
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <Set_Random_Motion_Values+0x860>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	461a      	mov	r2, r3
 8001b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <Set_Random_Motion_Values+0x860>)
 8001b1c:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
}
 8001b1e:	f000 bc37 	b.w	8002390 <Set_Random_Motion_Values+0x10c8>
 8001b22:	bf00      	nop
 8001b24:	200003c4 	.word	0x200003c4
 8001b28:	200003d0 	.word	0x200003d0
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001b2c:	f009 f802 	bl	800ab34 <rand>
 8001b30:	4603      	mov	r3, r0
 8001b32:	17da      	asrs	r2, r3, #31
 8001b34:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001b38:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8001b3c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001b40:	2200      	movs	r2, #0
 8001b42:	469a      	mov	sl, r3
 8001b44:	4693      	mov	fp, r2
 8001b46:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	fb0a f203 	mul.w	r2, sl, r3
 8001b50:	4603      	mov	r3, r0
 8001b52:	fb03 f30b 	mul.w	r3, r3, fp
 8001b56:	4413      	add	r3, r2
 8001b58:	4602      	mov	r2, r0
 8001b5a:	fba2 450a 	umull	r4, r5, r2, sl
 8001b5e:	442b      	add	r3, r5
 8001b60:	461d      	mov	r5, r3
 8001b62:	4622      	mov	r2, r4
 8001b64:	462b      	mov	r3, r5
 8001b66:	1891      	adds	r1, r2, r2
 8001b68:	6339      	str	r1, [r7, #48]	; 0x30
 8001b6a:	415b      	adcs	r3, r3
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b72:	1911      	adds	r1, r2, r4
 8001b74:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8001b78:	416b      	adcs	r3, r5
 8001b7a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001b7e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8001b8a:	f7ff f80d 	bl	8000ba8 <__aeabi_uldivmod>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	f06f 0009 	mvn.w	r0, #9
 8001b96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b9a:	1a80      	subs	r0, r0, r2
 8001b9c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8001ba0:	eb61 0303 	sbc.w	r3, r1, r3
 8001ba4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ba8:	4beb      	ldr	r3, [pc, #940]	; (8001f58 <Set_Random_Motion_Values+0xc90>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bb2:	4413      	add	r3, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4be8      	ldr	r3, [pc, #928]	; (8001f58 <Set_Random_Motion_Values+0xc90>)
 8001bb8:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001bba:	f008 ffbb 	bl	800ab34 <rand>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	17da      	asrs	r2, r3, #31
 8001bc2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001bc6:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8001bca:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001bd4:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8001bd8:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8001bdc:	462b      	mov	r3, r5
 8001bde:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	; 0x210
 8001be2:	4642      	mov	r2, r8
 8001be4:	fb02 f203 	mul.w	r2, r2, r3
 8001be8:	464b      	mov	r3, r9
 8001bea:	4621      	mov	r1, r4
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	4641      	mov	r1, r8
 8001bf6:	fba2 1201 	umull	r1, r2, r2, r1
 8001bfa:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8001bfe:	460a      	mov	r2, r1
 8001c00:	f8c7 2380 	str.w	r2, [r7, #896]	; 0x380
 8001c04:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8001c08:	4413      	add	r3, r2
 8001c0a:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8001c0e:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 8001c12:	4622      	mov	r2, r4
 8001c14:	462b      	mov	r3, r5
 8001c16:	f04f 0000 	mov.w	r0, #0
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	0099      	lsls	r1, r3, #2
 8001c20:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001c24:	0090      	lsls	r0, r2, #2
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	1851      	adds	r1, r2, r1
 8001c2e:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8001c32:	4629      	mov	r1, r5
 8001c34:	eb43 0101 	adc.w	r1, r3, r1
 8001c38:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8001c3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8001c48:	f7fe ffae 	bl	8000ba8 <__aeabi_uldivmod>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	f112 010a 	adds.w	r1, r2, #10
 8001c54:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8001c58:	f143 0300 	adc.w	r3, r3, #0
 8001c5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c60:	4bbd      	ldr	r3, [pc, #756]	; (8001f58 <Set_Random_Motion_Values+0xc90>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	461a      	mov	r2, r3
 8001c66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c6a:	4413      	add	r3, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4bba      	ldr	r3, [pc, #744]	; (8001f58 <Set_Random_Motion_Values+0xc90>)
 8001c70:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001c72:	f008 ff5f 	bl	800ab34 <rand>
 8001c76:	4603      	mov	r3, r0
 8001c78:	17da      	asrs	r2, r3, #31
 8001c7a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001c7e:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8001c82:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001c86:	2200      	movs	r2, #0
 8001c88:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001c8c:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8001c90:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 8001c94:	462b      	mov	r3, r5
 8001c96:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8001c9a:	4642      	mov	r2, r8
 8001c9c:	fb02 f203 	mul.w	r2, r2, r3
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	4622      	mov	r2, r4
 8001cac:	4641      	mov	r1, r8
 8001cae:	fba2 1201 	umull	r1, r2, r2, r1
 8001cb2:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8001cb6:	460a      	mov	r2, r1
 8001cb8:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 8001cbc:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8001cc6:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 8001cca:	4622      	mov	r2, r4
 8001ccc:	462b      	mov	r3, r5
 8001cce:	f04f 0000 	mov.w	r0, #0
 8001cd2:	f04f 0100 	mov.w	r1, #0
 8001cd6:	00d9      	lsls	r1, r3, #3
 8001cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cdc:	00d0      	lsls	r0, r2, #3
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	1a51      	subs	r1, r2, r1
 8001ce6:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8001cea:	4629      	mov	r1, r5
 8001cec:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001cf4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8001d00:	f7fe ff52 	bl	8000ba8 <__aeabi_uldivmod>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	f06f 0009 	mvn.w	r0, #9
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d10:	1a80      	subs	r0, r0, r2
 8001d12:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8001d16:	eb61 0303 	sbc.w	r3, r1, r3
 8001d1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d1e:	4b8e      	ldr	r3, [pc, #568]	; (8001f58 <Set_Random_Motion_Values+0xc90>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d28:	4413      	add	r3, r2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b8a      	ldr	r3, [pc, #552]	; (8001f58 <Set_Random_Motion_Values+0xc90>)
 8001d2e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001d30:	f008 ff00 	bl	800ab34 <rand>
 8001d34:	4603      	mov	r3, r0
 8001d36:	17da      	asrs	r2, r3, #31
 8001d38:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001d3c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8001d40:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001d44:	2200      	movs	r2, #0
 8001d46:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d4a:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8001d4e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8001d52:	462b      	mov	r3, r5
 8001d54:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 8001d58:	4642      	mov	r2, r8
 8001d5a:	fb02 f203 	mul.w	r2, r2, r3
 8001d5e:	464b      	mov	r3, r9
 8001d60:	4621      	mov	r1, r4
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	4622      	mov	r2, r4
 8001d6a:	4641      	mov	r1, r8
 8001d6c:	fba2 1201 	umull	r1, r2, r2, r1
 8001d70:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8001d74:	460a      	mov	r2, r1
 8001d76:	f8c7 2370 	str.w	r2, [r7, #880]	; 0x370
 8001d7a:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8001d7e:	4413      	add	r3, r2
 8001d80:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8001d84:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	; 0x370
 8001d88:	460b      	mov	r3, r1
 8001d8a:	18db      	adds	r3, r3, r3
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8e:	4613      	mov	r3, r2
 8001d90:	eb42 0303 	adc.w	r3, r2, r3
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d9a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	f7fe ff01 	bl	8000ba8 <__aeabi_uldivmod>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8001dae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001db2:	1a80      	subs	r0, r0, r2
 8001db4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8001db8:	eb61 0303 	sbc.w	r3, r1, r3
 8001dbc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001dc0:	4b66      	ldr	r3, [pc, #408]	; (8001f5c <Set_Random_Motion_Values+0xc94>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001dca:	4413      	add	r3, r2
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <Set_Random_Motion_Values+0xc94>)
 8001dd0:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001dd2:	f008 feaf 	bl	800ab34 <rand>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	17da      	asrs	r2, r3, #31
 8001dda:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001dde:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001de2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001de6:	2200      	movs	r2, #0
 8001de8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001dec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8001df0:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8001df4:	462b      	mov	r3, r5
 8001df6:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	; 0x1d0
 8001dfa:	4642      	mov	r2, r8
 8001dfc:	fb02 f203 	mul.w	r2, r2, r3
 8001e00:	464b      	mov	r3, r9
 8001e02:	4621      	mov	r1, r4
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	4622      	mov	r2, r4
 8001e0c:	4641      	mov	r1, r8
 8001e0e:	fba2 1201 	umull	r1, r2, r2, r1
 8001e12:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8001e16:	460a      	mov	r2, r1
 8001e18:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 8001e1c:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001e20:	4413      	add	r3, r2
 8001e22:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001e26:	f04f 0000 	mov.w	r0, #0
 8001e2a:	f04f 0100 	mov.w	r1, #0
 8001e2e:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 8001e32:	462b      	mov	r3, r5
 8001e34:	0099      	lsls	r1, r3, #2
 8001e36:	4623      	mov	r3, r4
 8001e38:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001e3c:	4623      	mov	r3, r4
 8001e3e:	0098      	lsls	r0, r3, #2
 8001e40:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	f7fe feae 	bl	8000ba8 <__aeabi_uldivmod>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001e54:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8001e58:	f143 0300 	adc.w	r3, r3, #0
 8001e5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001e60:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <Set_Random_Motion_Values+0xc94>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	461a      	mov	r2, r3
 8001e66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e6a:	4413      	add	r3, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <Set_Random_Motion_Values+0xc94>)
 8001e70:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001e72:	f008 fe5f 	bl	800ab34 <rand>
 8001e76:	4603      	mov	r3, r0
 8001e78:	17da      	asrs	r2, r3, #31
 8001e7a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001e7e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8001e82:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e8c:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8001e90:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 8001e94:	462b      	mov	r3, r5
 8001e96:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	fb02 f203 	mul.w	r2, r2, r3
 8001ea0:	464b      	mov	r3, r9
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4622      	mov	r2, r4
 8001eac:	4641      	mov	r1, r8
 8001eae:	fba2 1201 	umull	r1, r2, r2, r1
 8001eb2:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8001eb6:	460a      	mov	r2, r1
 8001eb8:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 8001ebc:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8001ec6:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 8001eca:	4622      	mov	r2, r4
 8001ecc:	462b      	mov	r3, r5
 8001ece:	1891      	adds	r1, r2, r2
 8001ed0:	6239      	str	r1, [r7, #32]
 8001ed2:	415b      	adcs	r3, r3
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001eda:	4621      	mov	r1, r4
 8001edc:	1851      	adds	r1, r2, r1
 8001ede:	61b9      	str	r1, [r7, #24]
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	eb43 0101 	adc.w	r1, r3, r1
 8001ee6:	61f9      	str	r1, [r7, #28]
 8001ee8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001eec:	460b      	mov	r3, r1
 8001eee:	18db      	adds	r3, r3, r3
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	eb42 0303 	adc.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001efe:	4618      	mov	r0, r3
 8001f00:	4621      	mov	r1, r4
 8001f02:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	f7fe fe4d 	bl	8000ba8 <__aeabi_uldivmod>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8001f16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f1a:	1a80      	subs	r0, r0, r2
 8001f1c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8001f20:	eb61 0303 	sbc.w	r3, r1, r3
 8001f24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <Set_Random_Motion_Values+0xc94>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001f32:	4413      	add	r3, r2
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <Set_Random_Motion_Values+0xc94>)
 8001f38:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001f3a:	f008 fdfb 	bl	800ab34 <rand>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	17da      	asrs	r2, r3, #31
 8001f42:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001f46:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001f4a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001f54:	e004      	b.n	8001f60 <Set_Random_Motion_Values+0xc98>
 8001f56:	bf00      	nop
 8001f58:	200003ac 	.word	0x200003ac
 8001f5c:	200003b8 	.word	0x200003b8
 8001f60:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8001f64:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8001f68:	462b      	mov	r3, r5
 8001f6a:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	; 0x1b0
 8001f6e:	4642      	mov	r2, r8
 8001f70:	fb02 f203 	mul.w	r2, r2, r3
 8001f74:	464b      	mov	r3, r9
 8001f76:	4621      	mov	r1, r4
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4622      	mov	r2, r4
 8001f80:	4641      	mov	r1, r8
 8001f82:	fba2 1201 	umull	r1, r2, r2, r1
 8001f86:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8001f8a:	460a      	mov	r2, r1
 8001f8c:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 8001f90:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8001f94:	4413      	add	r3, r2
 8001f96:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8001f9a:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	; 0x358
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	462b      	mov	r3, r5
 8001fa2:	f04f 0000 	mov.w	r0, #0
 8001fa6:	f04f 0100 	mov.w	r1, #0
 8001faa:	00d9      	lsls	r1, r3, #3
 8001fac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fb0:	00d0      	lsls	r0, r2, #3
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	1a51      	subs	r1, r2, r1
 8001fba:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001fc4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001fc8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8001fd4:	f7fe fde8 	bl	8000ba8 <__aeabi_uldivmod>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	f06f 0002 	mvn.w	r0, #2
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fe4:	1a80      	subs	r0, r0, r2
 8001fe6:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8001fea:	eb61 0303 	sbc.w	r3, r1, r3
 8001fee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001ff2:	4bea      	ldr	r3, [pc, #936]	; (800239c <Set_Random_Motion_Values+0x10d4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ffc:	4413      	add	r3, r2
 8001ffe:	461a      	mov	r2, r3
 8002000:	4be6      	ldr	r3, [pc, #920]	; (800239c <Set_Random_Motion_Values+0x10d4>)
 8002002:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8002004:	f008 fd96 	bl	800ab34 <rand>
 8002008:	4603      	mov	r3, r0
 800200a:	17da      	asrs	r2, r3, #31
 800200c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002010:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8002014:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002018:	2200      	movs	r2, #0
 800201a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800201e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002022:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8002026:	462b      	mov	r3, r5
 8002028:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	; 0x198
 800202c:	4642      	mov	r2, r8
 800202e:	fb02 f203 	mul.w	r2, r2, r3
 8002032:	464b      	mov	r3, r9
 8002034:	4621      	mov	r1, r4
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	4622      	mov	r2, r4
 800203e:	4641      	mov	r1, r8
 8002040:	fba2 1201 	umull	r1, r2, r2, r1
 8002044:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 8002048:	460a      	mov	r2, r1
 800204a:	f8c7 2350 	str.w	r2, [r7, #848]	; 0x350
 800204e:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8002052:	4413      	add	r3, r2
 8002054:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002058:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 800205c:	4622      	mov	r2, r4
 800205e:	462b      	mov	r3, r5
 8002060:	f04f 0000 	mov.w	r0, #0
 8002064:	f04f 0100 	mov.w	r1, #0
 8002068:	00d9      	lsls	r1, r3, #3
 800206a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800206e:	00d0      	lsls	r0, r2, #3
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4621      	mov	r1, r4
 8002076:	1851      	adds	r1, r2, r1
 8002078:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 800207c:	4629      	mov	r1, r5
 800207e:	eb43 0101 	adc.w	r1, r3, r1
 8002082:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8002086:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002092:	f7fe fd89 	bl	8000ba8 <__aeabi_uldivmod>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	1cd1      	adds	r1, r2, #3
 800209c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80020a0:	f143 0300 	adc.w	r3, r3, #0
 80020a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80020a8:	4bbc      	ldr	r3, [pc, #752]	; (800239c <Set_Random_Motion_Values+0x10d4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80020b2:	4413      	add	r3, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4bb9      	ldr	r3, [pc, #740]	; (800239c <Set_Random_Motion_Values+0x10d4>)
 80020b8:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80020ba:	f008 fd3b 	bl	800ab34 <rand>
 80020be:	4603      	mov	r3, r0
 80020c0:	17da      	asrs	r2, r3, #31
 80020c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80020c6:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 80020ca:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80020ce:	2200      	movs	r2, #0
 80020d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020d4:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80020d8:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 80020dc:	462b      	mov	r3, r5
 80020de:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 80020e2:	4642      	mov	r2, r8
 80020e4:	fb02 f203 	mul.w	r2, r2, r3
 80020e8:	464b      	mov	r3, r9
 80020ea:	4621      	mov	r1, r4
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	4622      	mov	r2, r4
 80020f4:	4641      	mov	r1, r8
 80020f6:	fba2 1201 	umull	r1, r2, r2, r1
 80020fa:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 80020fe:	460a      	mov	r2, r1
 8002100:	f8c7 2348 	str.w	r2, [r7, #840]	; 0x348
 8002104:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8002108:	4413      	add	r3, r2
 800210a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800210e:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 8002112:	4622      	mov	r2, r4
 8002114:	462b      	mov	r3, r5
 8002116:	1891      	adds	r1, r2, r2
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	415b      	adcs	r3, r3
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002122:	4621      	mov	r1, r4
 8002124:	1851      	adds	r1, r2, r1
 8002126:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 800212a:	4629      	mov	r1, r5
 800212c:	eb43 0101 	adc.w	r1, r3, r1
 8002130:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8002134:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8002140:	f7fe fd32 	bl	8000ba8 <__aeabi_uldivmod>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	f06f 0002 	mvn.w	r0, #2
 800214c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002150:	1a80      	subs	r0, r0, r2
 8002152:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8002156:	eb61 0303 	sbc.w	r3, r1, r3
 800215a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800215e:	4b8f      	ldr	r3, [pc, #572]	; (800239c <Set_Random_Motion_Values+0x10d4>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	461a      	mov	r2, r3
 8002164:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002168:	4413      	add	r3, r2
 800216a:	461a      	mov	r2, r3
 800216c:	4b8b      	ldr	r3, [pc, #556]	; (800239c <Set_Random_Motion_Values+0x10d4>)
 800216e:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8002170:	f008 fce0 	bl	800ab34 <rand>
 8002174:	4603      	mov	r3, r0
 8002176:	17da      	asrs	r2, r3, #31
 8002178:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800217c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002180:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002184:	2200      	movs	r2, #0
 8002186:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800218a:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800218e:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8002192:	462b      	mov	r3, r5
 8002194:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 8002198:	4642      	mov	r2, r8
 800219a:	fb02 f203 	mul.w	r2, r2, r3
 800219e:	464b      	mov	r3, r9
 80021a0:	4621      	mov	r1, r4
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	4622      	mov	r2, r4
 80021aa:	4641      	mov	r1, r8
 80021ac:	fba2 1201 	umull	r1, r2, r2, r1
 80021b0:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 80021b4:	460a      	mov	r2, r1
 80021b6:	f8c7 2340 	str.w	r2, [r7, #832]	; 0x340
 80021ba:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 80021be:	4413      	add	r3, r2
 80021c0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 80021c4:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 80021c8:	4622      	mov	r2, r4
 80021ca:	462b      	mov	r3, r5
 80021cc:	f04f 0000 	mov.w	r0, #0
 80021d0:	f04f 0100 	mov.w	r1, #0
 80021d4:	00d9      	lsls	r1, r3, #3
 80021d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021da:	00d0      	lsls	r0, r2, #3
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4621      	mov	r1, r4
 80021e2:	1a51      	subs	r1, r2, r1
 80021e4:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 80021e8:	4629      	mov	r1, r5
 80021ea:	eb63 0301 	sbc.w	r3, r3, r1
 80021ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80021f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80021fe:	f7fe fcd3 	bl	8000ba8 <__aeabi_uldivmod>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	f112 01c8 	adds.w	r1, r2, #200	; 0xc8
 800220a:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800220e:	f143 0300 	adc.w	r3, r3, #0
 8002212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002216:	4b62      	ldr	r3, [pc, #392]	; (80023a0 <Set_Random_Motion_Values+0x10d8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002220:	4413      	add	r3, r2
 8002222:	461a      	mov	r2, r3
 8002224:	4b5e      	ldr	r3, [pc, #376]	; (80023a0 <Set_Random_Motion_Values+0x10d8>)
 8002226:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8002228:	f008 fc84 	bl	800ab34 <rand>
 800222c:	4603      	mov	r3, r0
 800222e:	17da      	asrs	r2, r3, #31
 8002230:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002234:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8002238:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800223c:	2200      	movs	r2, #0
 800223e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002242:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8002246:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800224a:	462b      	mov	r3, r5
 800224c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8002250:	4642      	mov	r2, r8
 8002252:	fb02 f203 	mul.w	r2, r2, r3
 8002256:	464b      	mov	r3, r9
 8002258:	4621      	mov	r1, r4
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	4622      	mov	r2, r4
 8002262:	4641      	mov	r1, r8
 8002264:	fba2 1201 	umull	r1, r2, r2, r1
 8002268:	f8c7 233c 	str.w	r2, [r7, #828]	; 0x33c
 800226c:	460a      	mov	r2, r1
 800226e:	f8c7 2338 	str.w	r2, [r7, #824]	; 0x338
 8002272:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8002276:	4413      	add	r3, r2
 8002278:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800227c:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 8002280:	4622      	mov	r2, r4
 8002282:	462b      	mov	r3, r5
 8002284:	1891      	adds	r1, r2, r2
 8002286:	6039      	str	r1, [r7, #0]
 8002288:	415b      	adcs	r3, r3
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002290:	4621      	mov	r1, r4
 8002292:	1851      	adds	r1, r2, r1
 8002294:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8002298:	4629      	mov	r1, r5
 800229a:	eb43 0101 	adc.w	r1, r3, r1
 800229e:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 80022a2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80022ae:	f7fe fc7b 	bl	8000ba8 <__aeabi_uldivmod>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	f112 0196 	adds.w	r1, r2, #150	; 0x96
 80022ba:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80022be:	f143 0300 	adc.w	r3, r3, #0
 80022c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <Set_Random_Motion_Values+0x10d8>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <Set_Random_Motion_Values+0x10d8>)
 80022d6:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80022d8:	f008 fc2c 	bl	800ab34 <rand>
 80022dc:	4603      	mov	r3, r0
 80022de:	17da      	asrs	r2, r3, #31
 80022e0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80022e4:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80022e8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80022ec:	2200      	movs	r2, #0
 80022ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80022f2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80022f6:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 80022fa:	462b      	mov	r3, r5
 80022fc:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8002300:	4642      	mov	r2, r8
 8002302:	fb02 f203 	mul.w	r2, r2, r3
 8002306:	464b      	mov	r3, r9
 8002308:	4621      	mov	r1, r4
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	4622      	mov	r2, r4
 8002312:	4641      	mov	r1, r8
 8002314:	fba2 1201 	umull	r1, r2, r2, r1
 8002318:	f8c7 2334 	str.w	r2, [r7, #820]	; 0x334
 800231c:	460a      	mov	r2, r1
 800231e:	f8c7 2330 	str.w	r2, [r7, #816]	; 0x330
 8002322:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8002326:	4413      	add	r3, r2
 8002328:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800232c:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 8002330:	4622      	mov	r2, r4
 8002332:	462b      	mov	r3, r5
 8002334:	f04f 0000 	mov.w	r0, #0
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	0099      	lsls	r1, r3, #2
 800233e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002342:	0090      	lsls	r0, r2, #2
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4621      	mov	r1, r4
 800234a:	1851      	adds	r1, r2, r1
 800234c:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8002350:	4629      	mov	r1, r5
 8002352:	eb43 0101 	adc.w	r1, r3, r1
 8002356:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800235a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8002366:	f7fe fc1f 	bl	8000ba8 <__aeabi_uldivmod>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	f112 010a 	adds.w	r1, r2, #10
 8002372:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002376:	f143 0300 	adc.w	r3, r3, #0
 800237a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <Set_Random_Motion_Values+0x10d8>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	461a      	mov	r2, r3
 8002384:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002388:	4413      	add	r3, r2
 800238a:	461a      	mov	r2, r3
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <Set_Random_Motion_Values+0x10d8>)
 800238e:	609a      	str	r2, [r3, #8]
}
 8002390:	bf00      	nop
 8002392:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8002396:	46bd      	mov	sp, r7
 8002398:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800239c:	200003c4 	.word	0x200003c4
 80023a0:	200003d0 	.word	0x200003d0

080023a4 <Reset_Motion_Values>:
 *
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 80023a8:	4b6e      	ldr	r3, [pc, #440]	; (8002564 <Reset_Motion_Values+0x1c0>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b6e      	ldr	r3, [pc, #440]	; (8002568 <Reset_Motion_Values+0x1c4>)
 80023ae:	fb83 1302 	smull	r1, r3, r3, r2
 80023b2:	11d9      	asrs	r1, r3, #7
 80023b4:	17d3      	asrs	r3, r2, #31
 80023b6:	1acb      	subs	r3, r1, r3
 80023b8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <Reset_Motion_Values+0x2a>
 80023c6:	4b67      	ldr	r3, [pc, #412]	; (8002564 <Reset_Motion_Values+0x1c0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	425b      	negs	r3, r3
 80023cc:	e000      	b.n	80023d0 <Reset_Motion_Values+0x2c>
 80023ce:	230a      	movs	r3, #10
 80023d0:	4a64      	ldr	r2, [pc, #400]	; (8002564 <Reset_Motion_Values+0x1c0>)
 80023d2:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 80023d4:	4b63      	ldr	r3, [pc, #396]	; (8002564 <Reset_Motion_Values+0x1c0>)
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	4b63      	ldr	r3, [pc, #396]	; (8002568 <Reset_Motion_Values+0x1c4>)
 80023da:	fb83 1302 	smull	r1, r3, r3, r2
 80023de:	11d9      	asrs	r1, r3, #7
 80023e0:	17d3      	asrs	r3, r2, #31
 80023e2:	1acb      	subs	r3, r1, r3
 80023e4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <Reset_Motion_Values+0x56>
 80023f2:	4b5c      	ldr	r3, [pc, #368]	; (8002564 <Reset_Motion_Values+0x1c0>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	425b      	negs	r3, r3
 80023f8:	e001      	b.n	80023fe <Reset_Motion_Values+0x5a>
 80023fa:	f06f 0309 	mvn.w	r3, #9
 80023fe:	4a59      	ldr	r2, [pc, #356]	; (8002564 <Reset_Motion_Values+0x1c0>)
 8002400:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8002402:	4b58      	ldr	r3, [pc, #352]	; (8002564 <Reset_Motion_Values+0x1c0>)
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	4b58      	ldr	r3, [pc, #352]	; (8002568 <Reset_Motion_Values+0x1c4>)
 8002408:	fb83 1302 	smull	r1, r3, r3, r2
 800240c:	11d9      	asrs	r1, r3, #7
 800240e:	17d3      	asrs	r3, r2, #31
 8002410:	1acb      	subs	r3, r1, r3
 8002412:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d103      	bne.n	8002428 <Reset_Motion_Values+0x84>
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <Reset_Motion_Values+0x1c0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	425b      	negs	r3, r3
 8002426:	e000      	b.n	800242a <Reset_Motion_Values+0x86>
 8002428:	230a      	movs	r3, #10
 800242a:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <Reset_Motion_Values+0x1c0>)
 800242c:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 800242e:	4b4f      	ldr	r3, [pc, #316]	; (800256c <Reset_Motion_Values+0x1c8>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <Reset_Motion_Values+0x1c4>)
 8002434:	fb83 1302 	smull	r1, r3, r3, r2
 8002438:	11d9      	asrs	r1, r3, #7
 800243a:	17d3      	asrs	r3, r2, #31
 800243c:	1acb      	subs	r3, r1, r3
 800243e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d103      	bne.n	8002454 <Reset_Motion_Values+0xb0>
 800244c:	4b47      	ldr	r3, [pc, #284]	; (800256c <Reset_Motion_Values+0x1c8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	425b      	negs	r3, r3
 8002452:	e000      	b.n	8002456 <Reset_Motion_Values+0xb2>
 8002454:	2364      	movs	r3, #100	; 0x64
 8002456:	4a45      	ldr	r2, [pc, #276]	; (800256c <Reset_Motion_Values+0x1c8>)
 8002458:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 800245a:	4b44      	ldr	r3, [pc, #272]	; (800256c <Reset_Motion_Values+0x1c8>)
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4b42      	ldr	r3, [pc, #264]	; (8002568 <Reset_Motion_Values+0x1c4>)
 8002460:	fb83 1302 	smull	r1, r3, r3, r2
 8002464:	11d9      	asrs	r1, r3, #7
 8002466:	17d3      	asrs	r3, r2, #31
 8002468:	1acb      	subs	r3, r1, r3
 800246a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d103      	bne.n	8002480 <Reset_Motion_Values+0xdc>
 8002478:	4b3c      	ldr	r3, [pc, #240]	; (800256c <Reset_Motion_Values+0x1c8>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	425b      	negs	r3, r3
 800247e:	e001      	b.n	8002484 <Reset_Motion_Values+0xe0>
 8002480:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002484:	4a39      	ldr	r2, [pc, #228]	; (800256c <Reset_Motion_Values+0x1c8>)
 8002486:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8002488:	4b38      	ldr	r3, [pc, #224]	; (800256c <Reset_Motion_Values+0x1c8>)
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	4b36      	ldr	r3, [pc, #216]	; (8002568 <Reset_Motion_Values+0x1c4>)
 800248e:	fb83 1302 	smull	r1, r3, r3, r2
 8002492:	11d9      	asrs	r1, r3, #7
 8002494:	17d3      	asrs	r3, r2, #31
 8002496:	1acb      	subs	r3, r1, r3
 8002498:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <Reset_Motion_Values+0x10a>
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <Reset_Motion_Values+0x1c8>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	425b      	negs	r3, r3
 80024ac:	e000      	b.n	80024b0 <Reset_Motion_Values+0x10c>
 80024ae:	2364      	movs	r3, #100	; 0x64
 80024b0:	4a2e      	ldr	r2, [pc, #184]	; (800256c <Reset_Motion_Values+0x1c8>)
 80024b2:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 80024b4:	4b2d      	ldr	r3, [pc, #180]	; (800256c <Reset_Motion_Values+0x1c8>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b2b      	ldr	r3, [pc, #172]	; (8002568 <Reset_Motion_Values+0x1c4>)
 80024ba:	fb83 1302 	smull	r1, r3, r3, r2
 80024be:	11d9      	asrs	r1, r3, #7
 80024c0:	17d3      	asrs	r3, r2, #31
 80024c2:	1acb      	subs	r3, r1, r3
 80024c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <Reset_Motion_Values+0x136>
 80024d2:	4b27      	ldr	r3, [pc, #156]	; (8002570 <Reset_Motion_Values+0x1cc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	425b      	negs	r3, r3
 80024d8:	e000      	b.n	80024dc <Reset_Motion_Values+0x138>
 80024da:	2303      	movs	r3, #3
 80024dc:	4a24      	ldr	r2, [pc, #144]	; (8002570 <Reset_Motion_Values+0x1cc>)
 80024de:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <Reset_Motion_Values+0x1c8>)
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4b20      	ldr	r3, [pc, #128]	; (8002568 <Reset_Motion_Values+0x1c4>)
 80024e6:	fb83 1302 	smull	r1, r3, r3, r2
 80024ea:	11d9      	asrs	r1, r3, #7
 80024ec:	17d3      	asrs	r3, r2, #31
 80024ee:	1acb      	subs	r3, r1, r3
 80024f0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <Reset_Motion_Values+0x162>
 80024fe:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <Reset_Motion_Values+0x1cc>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	425b      	negs	r3, r3
 8002504:	e001      	b.n	800250a <Reset_Motion_Values+0x166>
 8002506:	f06f 0302 	mvn.w	r3, #2
 800250a:	4a19      	ldr	r2, [pc, #100]	; (8002570 <Reset_Motion_Values+0x1cc>)
 800250c:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <Reset_Motion_Values+0x1c8>)
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <Reset_Motion_Values+0x1c4>)
 8002514:	fb83 1302 	smull	r1, r3, r3, r2
 8002518:	11d9      	asrs	r1, r3, #7
 800251a:	17d3      	asrs	r3, r2, #31
 800251c:	1acb      	subs	r3, r1, r3
 800251e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <Reset_Motion_Values+0x190>
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <Reset_Motion_Values+0x1cc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	425b      	negs	r3, r3
 8002532:	e000      	b.n	8002536 <Reset_Motion_Values+0x192>
 8002534:	2303      	movs	r3, #3
 8002536:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <Reset_Motion_Values+0x1cc>)
 8002538:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <Reset_Motion_Values+0x1d0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	425b      	negs	r3, r3
 8002540:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <Reset_Motion_Values+0x1d0>)
 8002542:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <Reset_Motion_Values+0x1d0>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	425b      	negs	r3, r3
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <Reset_Motion_Values+0x1d0>)
 800254c:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <Reset_Motion_Values+0x1d0>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	425b      	negs	r3, r3
 8002554:	4a07      	ldr	r2, [pc, #28]	; (8002574 <Reset_Motion_Values+0x1d0>)
 8002556:	6093      	str	r3, [r2, #8]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	200003ac 	.word	0x200003ac
 8002568:	10624dd3 	.word	0x10624dd3
 800256c:	200003b8 	.word	0x200003b8
 8002570:	200003c4 	.word	0x200003c4
 8002574:	200003d0 	.word	0x200003d0

08002578 <getBlueNRGVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af02      	add	r7, sp, #8
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 8002582:	f107 0410 	add.w	r4, r7, #16
 8002586:	f107 0215 	add.w	r2, r7, #21
 800258a:	f107 0112 	add.w	r1, r7, #18
 800258e:	f107 0016 	add.w	r0, r7, #22
 8002592:	f107 030e 	add.w	r3, r7, #14
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4623      	mov	r3, r4
 800259a:	f007 f900 	bl	800979e <hci_read_local_version_information>
 800259e:	4603      	mov	r3, r0
 80025a0:	75fb      	strb	r3, [r7, #23]
				                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d126      	bne.n	80025f6 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80025a8:	8a7b      	ldrh	r3, [r7, #18]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80025b4:	8a7b      	ldrh	r3, [r7, #18]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b21a      	sxth	r2, r3
 80025c4:	89fb      	ldrh	r3, [r7, #14]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	b21b      	sxth	r3, r3
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	89fb      	ldrh	r3, [r7, #14]
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	b21b      	sxth	r3, r3
 80025ec:	4313      	orrs	r3, r2
 80025ee:	b21b      	sxth	r3, r3
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	801a      	strh	r2, [r3, #0]
  }
  return status;
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd90      	pop	{r4, r7, pc}

08002600 <BSP_PB_Callback>:
 *
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <BSP_PB_Callback+0x1c>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	20000216 	.word	0x20000216

08002620 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4604      	mov	r4, r0
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4623      	mov	r3, r4
 8002630:	71fb      	strb	r3, [r7, #7]
 8002632:	4603      	mov	r3, r0
 8002634:	80bb      	strh	r3, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	71bb      	strb	r3, [r7, #6]
 800263a:	4613      	mov	r3, r2
 800263c:	70fb      	strb	r3, [r7, #3]
  connected = TRUE;
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <hci_le_connection_complete_event+0x38>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  connection_handle = Connection_Handle;
 8002644:	4a05      	ldr	r2, [pc, #20]	; (800265c <hci_le_connection_complete_event+0x3c>)
 8002646:	88bb      	ldrh	r3, [r7, #4]
 8002648:	8013      	strh	r3, [r2, #0]

  BSP_LED_Off(LED2); //activity led
 800264a:	2000      	movs	r0, #0
 800264c:	f001 f9b4 	bl	80039b8 <BSP_LED_Off>
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bd90      	pop	{r4, r7, pc}
 8002658:	200003a8 	.word	0x200003a8
 800265c:	200003a4 	.word	0x200003a4

08002660 <hci_disconnection_complete_event>:
 * @retval See file bluenrg1_events.h
 */
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
 800266a:	460b      	mov	r3, r1
 800266c:	80bb      	strh	r3, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	71bb      	strb	r3, [r7, #6]
  connected = FALSE;
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <hci_disconnection_complete_event+0x38>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
  /* Make the device connectable again */
  set_connectable = TRUE;
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <hci_disconnection_complete_event+0x3c>)
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
  connection_handle =0;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <hci_disconnection_complete_event+0x40>)
 8002680:	2200      	movs	r2, #0
 8002682:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("Disconnected\r\n");
 8002684:	4807      	ldr	r0, [pc, #28]	; (80026a4 <hci_disconnection_complete_event+0x44>)
 8002686:	f008 fa1f 	bl	800aac8 <puts>

  BSP_LED_On(LED2); //activity led
 800268a:	2000      	movs	r0, #0
 800268c:	f001 f97e 	bl	800398c <BSP_LED_On>
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	200003a8 	.word	0x200003a8
 800269c:	20000001 	.word	0x20000001
 80026a0:	200003a4 	.word	0x200003a4
 80026a4:	0800d078 	.word	0x0800d078

080026a8 <aci_gatt_read_permit_req_event>:
 * @retval See file bluenrg1_events.h
 */
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
 80026b2:	460b      	mov	r3, r1
 80026b4:	80bb      	strh	r3, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	807b      	strh	r3, [r7, #2]
  Read_Request_CB(Attribute_Handle);
 80026ba:	88bb      	ldrh	r3, [r7, #4]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fa4f 	bl	8002b60 <Read_Request_CB>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b08d      	sub	sp, #52	; 0x34
 80026d0:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 5;
 80026d2:	2305      	movs	r3, #5
 80026d4:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	461a      	mov	r2, r3
 80026da:	0052      	lsls	r2, r2, #1
 80026dc:	4413      	add	r3, r2
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	75bb      	strb	r3, [r7, #22]

  /* add HW_SENS_W2ST service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 80026e4:	231b      	movs	r3, #27
 80026e6:	713b      	strb	r3, [r7, #4]
 80026e8:	23c5      	movs	r3, #197	; 0xc5
 80026ea:	717b      	strb	r3, [r7, #5]
 80026ec:	23d5      	movs	r3, #213	; 0xd5
 80026ee:	71bb      	strb	r3, [r7, #6]
 80026f0:	23a5      	movs	r3, #165	; 0xa5
 80026f2:	71fb      	strb	r3, [r7, #7]
 80026f4:	2302      	movs	r3, #2
 80026f6:	723b      	strb	r3, [r7, #8]
 80026f8:	2300      	movs	r3, #0
 80026fa:	727b      	strb	r3, [r7, #9]
 80026fc:	23b4      	movs	r3, #180	; 0xb4
 80026fe:	72bb      	strb	r3, [r7, #10]
 8002700:	239a      	movs	r3, #154	; 0x9a
 8002702:	72fb      	strb	r3, [r7, #11]
 8002704:	23e1      	movs	r3, #225	; 0xe1
 8002706:	733b      	strb	r3, [r7, #12]
 8002708:	2311      	movs	r3, #17
 800270a:	737b      	strb	r3, [r7, #13]
 800270c:	2301      	movs	r3, #1
 800270e:	73bb      	strb	r3, [r7, #14]
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	2300      	movs	r3, #0
 8002716:	743b      	strb	r3, [r7, #16]
 8002718:	2300      	movs	r3, #0
 800271a:	747b      	strb	r3, [r7, #17]
 800271c:	2300      	movs	r3, #0
 800271e:	74bb      	strb	r3, [r7, #18]
 8002720:	2300      	movs	r3, #0
 8002722:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002724:	4b51      	ldr	r3, [pc, #324]	; (800286c <Add_HWServW2ST_Service+0x1a0>)
 8002726:	461c      	mov	r4, r3
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800272c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8002730:	7dbb      	ldrb	r3, [r7, #22]
 8002732:	4a4f      	ldr	r2, [pc, #316]	; (8002870 <Add_HWServW2ST_Service+0x1a4>)
 8002734:	9200      	str	r2, [sp, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	494c      	ldr	r1, [pc, #304]	; (800286c <Add_HWServW2ST_Service+0x1a0>)
 800273a:	2002      	movs	r0, #2
 800273c:	f005 f903 	bl	8007946 <aci_gatt_add_service>
 8002740:	4603      	mov	r3, r0
 8002742:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002744:	7d7b      	ldrb	r3, [r7, #21]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <Add_HWServW2ST_Service+0x82>
    return BLE_STATUS_ERROR;
 800274a:	2347      	movs	r3, #71	; 0x47
 800274c:	e08a      	b.n	8002864 <Add_HWServW2ST_Service+0x198>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 800274e:	231b      	movs	r3, #27
 8002750:	713b      	strb	r3, [r7, #4]
 8002752:	23c5      	movs	r3, #197	; 0xc5
 8002754:	717b      	strb	r3, [r7, #5]
 8002756:	23d5      	movs	r3, #213	; 0xd5
 8002758:	71bb      	strb	r3, [r7, #6]
 800275a:	23a5      	movs	r3, #165	; 0xa5
 800275c:	71fb      	strb	r3, [r7, #7]
 800275e:	2302      	movs	r3, #2
 8002760:	723b      	strb	r3, [r7, #8]
 8002762:	2300      	movs	r3, #0
 8002764:	727b      	strb	r3, [r7, #9]
 8002766:	2336      	movs	r3, #54	; 0x36
 8002768:	72bb      	strb	r3, [r7, #10]
 800276a:	23ac      	movs	r3, #172	; 0xac
 800276c:	72fb      	strb	r3, [r7, #11]
 800276e:	23e1      	movs	r3, #225	; 0xe1
 8002770:	733b      	strb	r3, [r7, #12]
 8002772:	2311      	movs	r3, #17
 8002774:	737b      	strb	r3, [r7, #13]
 8002776:	2301      	movs	r3, #1
 8002778:	73bb      	strb	r3, [r7, #14]
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	2300      	movs	r3, #0
 8002780:	743b      	strb	r3, [r7, #16]
 8002782:	2300      	movs	r3, #0
 8002784:	747b      	strb	r3, [r7, #17]
 8002786:	2300      	movs	r3, #0
 8002788:	74bb      	strb	r3, [r7, #18]
 800278a:	2300      	movs	r3, #0
 800278c:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 800278e:	7cbb      	ldrb	r3, [r7, #18]
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	b2db      	uxtb	r3, r3
 8002796:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8002798:	7cbb      	ldrb	r3, [r7, #18]
 800279a:	f043 0310 	orr.w	r3, r3, #16
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80027a2:	4b34      	ldr	r3, [pc, #208]	; (8002874 <Add_HWServW2ST_Service+0x1a8>)
 80027a4:	461c      	mov	r4, r3
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 80027ae:	4b30      	ldr	r3, [pc, #192]	; (8002870 <Add_HWServW2ST_Service+0x1a4>)
 80027b0:	8818      	ldrh	r0, [r3, #0]
 80027b2:	4b31      	ldr	r3, [pc, #196]	; (8002878 <Add_HWServW2ST_Service+0x1ac>)
 80027b4:	9305      	str	r3, [sp, #20]
 80027b6:	2300      	movs	r3, #0
 80027b8:	9304      	str	r3, [sp, #16]
 80027ba:	2310      	movs	r3, #16
 80027bc:	9303      	str	r3, [sp, #12]
 80027be:	2304      	movs	r3, #4
 80027c0:	9302      	str	r3, [sp, #8]
 80027c2:	2300      	movs	r3, #0
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	2312      	movs	r3, #18
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2308      	movs	r3, #8
 80027cc:	4a29      	ldr	r2, [pc, #164]	; (8002874 <Add_HWServW2ST_Service+0x1a8>)
 80027ce:	2102      	movs	r1, #2
 80027d0:	f005 f98f 	bl	8007af2 <aci_gatt_add_char>
 80027d4:	4603      	mov	r3, r0
 80027d6:	757b      	strb	r3, [r7, #21]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80027d8:	7d7b      	ldrb	r3, [r7, #21]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <Add_HWServW2ST_Service+0x116>
    return BLE_STATUS_ERROR;
 80027de:	2347      	movs	r3, #71	; 0x47
 80027e0:	e040      	b.n	8002864 <Add_HWServW2ST_Service+0x198>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 80027e2:	231b      	movs	r3, #27
 80027e4:	713b      	strb	r3, [r7, #4]
 80027e6:	23c5      	movs	r3, #197	; 0xc5
 80027e8:	717b      	strb	r3, [r7, #5]
 80027ea:	23d5      	movs	r3, #213	; 0xd5
 80027ec:	71bb      	strb	r3, [r7, #6]
 80027ee:	23a5      	movs	r3, #165	; 0xa5
 80027f0:	71fb      	strb	r3, [r7, #7]
 80027f2:	2302      	movs	r3, #2
 80027f4:	723b      	strb	r3, [r7, #8]
 80027f6:	2300      	movs	r3, #0
 80027f8:	727b      	strb	r3, [r7, #9]
 80027fa:	2336      	movs	r3, #54	; 0x36
 80027fc:	72bb      	strb	r3, [r7, #10]
 80027fe:	23ac      	movs	r3, #172	; 0xac
 8002800:	72fb      	strb	r3, [r7, #11]
 8002802:	23e1      	movs	r3, #225	; 0xe1
 8002804:	733b      	strb	r3, [r7, #12]
 8002806:	2311      	movs	r3, #17
 8002808:	737b      	strb	r3, [r7, #13]
 800280a:	2301      	movs	r3, #1
 800280c:	73bb      	strb	r3, [r7, #14]
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
 8002812:	2300      	movs	r3, #0
 8002814:	743b      	strb	r3, [r7, #16]
 8002816:	2300      	movs	r3, #0
 8002818:	747b      	strb	r3, [r7, #17]
 800281a:	23e0      	movs	r3, #224	; 0xe0
 800281c:	74bb      	strb	r3, [r7, #18]
 800281e:	2300      	movs	r3, #0
 8002820:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <Add_HWServW2ST_Service+0x1a8>)
 8002824:	461c      	mov	r4, r3
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800282a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <Add_HWServW2ST_Service+0x1a4>)
 8002830:	8818      	ldrh	r0, [r3, #0]
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <Add_HWServW2ST_Service+0x1b0>)
 8002834:	9305      	str	r3, [sp, #20]
 8002836:	2300      	movs	r3, #0
 8002838:	9304      	str	r3, [sp, #16]
 800283a:	2310      	movs	r3, #16
 800283c:	9303      	str	r3, [sp, #12]
 800283e:	2304      	movs	r3, #4
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	2300      	movs	r3, #0
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	2310      	movs	r3, #16
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2314      	movs	r3, #20
 800284c:	4a09      	ldr	r2, [pc, #36]	; (8002874 <Add_HWServW2ST_Service+0x1a8>)
 800284e:	2102      	movs	r1, #2
 8002850:	f005 f94f 	bl	8007af2 <aci_gatt_add_char>
 8002854:	4603      	mov	r3, r0
 8002856:	757b      	strb	r3, [r7, #21]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002858:	7d7b      	ldrb	r3, [r7, #21]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <Add_HWServW2ST_Service+0x196>
    return BLE_STATUS_ERROR;
 800285e:	2347      	movs	r3, #71	; 0x47
 8002860:	e000      	b.n	8002864 <Add_HWServW2ST_Service+0x198>

  return BLE_STATUS_SUCCESS;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	20000228 	.word	0x20000228
 8002870:	2000021c 	.word	0x2000021c
 8002874:	20000238 	.word	0x20000238
 8002878:	2000021e 	.word	0x2000021e
 800287c:	20000220 	.word	0x20000220

08002880 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b08d      	sub	sp, #52	; 0x34
 8002884:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 1;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	461a      	mov	r2, r3
 800288e:	0052      	lsls	r2, r2, #1
 8002890:	4413      	add	r3, r2
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3301      	adds	r3, #1
 8002896:	75bb      	strb	r3, [r7, #22]

  /* add SW_SENS_W2ST service */
  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8002898:	231b      	movs	r3, #27
 800289a:	713b      	strb	r3, [r7, #4]
 800289c:	23c5      	movs	r3, #197	; 0xc5
 800289e:	717b      	strb	r3, [r7, #5]
 80028a0:	23d5      	movs	r3, #213	; 0xd5
 80028a2:	71bb      	strb	r3, [r7, #6]
 80028a4:	23a5      	movs	r3, #165	; 0xa5
 80028a6:	71fb      	strb	r3, [r7, #7]
 80028a8:	2302      	movs	r3, #2
 80028aa:	723b      	strb	r3, [r7, #8]
 80028ac:	2300      	movs	r3, #0
 80028ae:	727b      	strb	r3, [r7, #9]
 80028b0:	23b4      	movs	r3, #180	; 0xb4
 80028b2:	72bb      	strb	r3, [r7, #10]
 80028b4:	239a      	movs	r3, #154	; 0x9a
 80028b6:	72fb      	strb	r3, [r7, #11]
 80028b8:	23e1      	movs	r3, #225	; 0xe1
 80028ba:	733b      	strb	r3, [r7, #12]
 80028bc:	2311      	movs	r3, #17
 80028be:	737b      	strb	r3, [r7, #13]
 80028c0:	2302      	movs	r3, #2
 80028c2:	73bb      	strb	r3, [r7, #14]
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
 80028c8:	2300      	movs	r3, #0
 80028ca:	743b      	strb	r3, [r7, #16]
 80028cc:	2300      	movs	r3, #0
 80028ce:	747b      	strb	r3, [r7, #17]
 80028d0:	2300      	movs	r3, #0
 80028d2:	74bb      	strb	r3, [r7, #18]
 80028d4:	2300      	movs	r3, #0
 80028d6:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <Add_SWServW2ST_Service+0x110>)
 80028da:	461c      	mov	r4, r3
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 80028e4:	7dbb      	ldrb	r3, [r7, #22]
 80028e6:	4a2b      	ldr	r2, [pc, #172]	; (8002994 <Add_SWServW2ST_Service+0x114>)
 80028e8:	9200      	str	r2, [sp, #0]
 80028ea:	2201      	movs	r2, #1
 80028ec:	4928      	ldr	r1, [pc, #160]	; (8002990 <Add_SWServW2ST_Service+0x110>)
 80028ee:	2002      	movs	r0, #2
 80028f0:	f005 f829 	bl	8007946 <aci_gatt_add_service>
 80028f4:	4603      	mov	r3, r0
 80028f6:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80028f8:	7d7b      	ldrb	r3, [r7, #21]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d13f      	bne.n	800297e <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 80028fe:	231b      	movs	r3, #27
 8002900:	713b      	strb	r3, [r7, #4]
 8002902:	23c5      	movs	r3, #197	; 0xc5
 8002904:	717b      	strb	r3, [r7, #5]
 8002906:	23d5      	movs	r3, #213	; 0xd5
 8002908:	71bb      	strb	r3, [r7, #6]
 800290a:	23a5      	movs	r3, #165	; 0xa5
 800290c:	71fb      	strb	r3, [r7, #7]
 800290e:	2302      	movs	r3, #2
 8002910:	723b      	strb	r3, [r7, #8]
 8002912:	2300      	movs	r3, #0
 8002914:	727b      	strb	r3, [r7, #9]
 8002916:	2336      	movs	r3, #54	; 0x36
 8002918:	72bb      	strb	r3, [r7, #10]
 800291a:	23ac      	movs	r3, #172	; 0xac
 800291c:	72fb      	strb	r3, [r7, #11]
 800291e:	23e1      	movs	r3, #225	; 0xe1
 8002920:	733b      	strb	r3, [r7, #12]
 8002922:	2311      	movs	r3, #17
 8002924:	737b      	strb	r3, [r7, #13]
 8002926:	2301      	movs	r3, #1
 8002928:	73bb      	strb	r3, [r7, #14]
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	2300      	movs	r3, #0
 8002930:	743b      	strb	r3, [r7, #16]
 8002932:	2301      	movs	r3, #1
 8002934:	747b      	strb	r3, [r7, #17]
 8002936:	2300      	movs	r3, #0
 8002938:	74bb      	strb	r3, [r7, #18]
 800293a:	2300      	movs	r3, #0
 800293c:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <Add_SWServW2ST_Service+0x118>)
 8002940:	461c      	mov	r4, r3
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, &char_uuid,
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <Add_SWServW2ST_Service+0x114>)
 800294c:	8818      	ldrh	r0, [r3, #0]
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <Add_SWServW2ST_Service+0x11c>)
 8002950:	9305      	str	r3, [sp, #20]
 8002952:	2300      	movs	r3, #0
 8002954:	9304      	str	r3, [sp, #16]
 8002956:	2310      	movs	r3, #16
 8002958:	9303      	str	r3, [sp, #12]
 800295a:	2304      	movs	r3, #4
 800295c:	9302      	str	r3, [sp, #8]
 800295e:	2300      	movs	r3, #0
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2310      	movs	r3, #16
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2308      	movs	r3, #8
 8002968:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <Add_SWServW2ST_Service+0x118>)
 800296a:	2102      	movs	r1, #2
 800296c:	f005 f8c1 	bl	8007af2 <aci_gatt_add_char>
 8002970:	4603      	mov	r3, r0
 8002972:	757b      	strb	r3, [r7, #21]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002974:	7d7b      	ldrb	r3, [r7, #21]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d103      	bne.n	8002982 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 800297a:	2300      	movs	r3, #0
 800297c:	e003      	b.n	8002986 <Add_SWServW2ST_Service+0x106>
    goto fail;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <Add_SWServW2ST_Service+0x104>
    goto fail;
 8002982:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8002984:	2347      	movs	r3, #71	; 0x47
}
 8002986:	4618      	mov	r0, r3
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd90      	pop	{r4, r7, pc}
 800298e:	bf00      	nop
 8002990:	20000228 	.word	0x20000228
 8002994:	20000222 	.word	0x20000222
 8002998:	20000238 	.word	0x20000238
 800299c:	20000224 	.word	0x20000224

080029a0 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	; 0x30
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80029ac:	f001 fa24 	bl	8003df8 <HAL_GetTick>
 80029b0:	4603      	mov	r3, r0
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	743b      	strb	r3, [r7, #16]
 80029b8:	f001 fa1e 	bl	8003df8 <HAL_GetTick>
 80029bc:	4603      	mov	r3, r0
 80029be:	0adb      	lsrs	r3, r3, #11
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2, -x_axes->AXIS_X);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	425b      	negs	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	74bb      	strb	r3, [r7, #18]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	425b      	negs	r3, r3
 80029d6:	121b      	asrs	r3, r3, #8
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4,  x_axes->AXIS_Y);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	753b      	strb	r3, [r7, #20]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	121b      	asrs	r3, r3, #8
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6, -x_axes->AXIS_Z);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	425b      	negs	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	75bb      	strb	r3, [r7, #22]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	425b      	negs	r3, r3
 8002a00:	121b      	asrs	r3, r3, #8
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,  g_axes->AXIS_X);
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	763b      	strb	r3, [r7, #24]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	121b      	asrs	r3, r3, #8
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10, g_axes->AXIS_Y);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	76bb      	strb	r3, [r7, #26]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	121b      	asrs	r3, r3, #8
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12, g_axes->AXIS_Z);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	773b      	strb	r3, [r7, #28]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	121b      	asrs	r3, r3, #8
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14, m_axes->AXIS_X);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	77bb      	strb	r3, [r7, #30]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	121b      	asrs	r3, r3, #8
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16, m_axes->AXIS_Y);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f887 3020 	strb.w	r3, [r7, #32]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	121b      	asrs	r3, r3, #8
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18, m_axes->AXIS_Z);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	121b      	asrs	r3, r3, #8
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <Acc_Update+0x118>)
 8002a7c:	8818      	ldrh	r0, [r3, #0]
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <Acc_Update+0x11c>)
 8002a80:	8819      	ldrh	r1, [r3, #0]
 8002a82:	f107 0310 	add.w	r3, r7, #16
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2314      	movs	r3, #20
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f005 f939 	bl	8007d02 <aci_gatt_update_char_value>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <Acc_Update+0x10e>
    PRINT_DBG("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
 8002a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4806      	ldr	r0, [pc, #24]	; (8002ac0 <Acc_Update+0x120>)
 8002aa6:	f007 ff89 	bl	800a9bc <iprintf>
    return BLE_STATUS_ERROR ;
 8002aaa:	2347      	movs	r3, #71	; 0x47
 8002aac:	e000      	b.n	8002ab0 <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3728      	adds	r7, #40	; 0x28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	2000021c 	.word	0x2000021c
 8002abc:	20000220 	.word	0x20000220
 8002ac0:	0800d088 	.word	0x0800d088

08002ac4 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002acc:	f001 f994 	bl	8003df8 <HAL_GetTick>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	08db      	lsrs	r3, r3, #3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	733b      	strb	r3, [r7, #12]
 8002ad8:	f001 f98e 	bl	8003df8 <HAL_GetTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	0adb      	lsrs	r3, r3, #11
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	73bb      	strb	r3, [r7, #14]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	121b      	asrs	r3, r3, #8
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	743b      	strb	r3, [r7, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	121b      	asrs	r3, r3, #8
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	74bb      	strb	r3, [r7, #18]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	121b      	asrs	r3, r3, #8
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <Quat_Update+0x90>)
 8002b1c:	8818      	ldrh	r0, [r3, #0]
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <Quat_Update+0x94>)
 8002b20:	8819      	ldrh	r1, [r3, #0]
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2308      	movs	r3, #8
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f005 f8e9 	bl	8007d02 <aci_gatt_update_char_value>
 8002b30:	4603      	mov	r3, r0
 8002b32:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d006      	beq.n	8002b48 <Quat_Update+0x84>
    PRINT_DBG("Error while updating Sensor Fusion characteristic: 0x%02X\r\n",ret) ;
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4807      	ldr	r0, [pc, #28]	; (8002b5c <Quat_Update+0x98>)
 8002b40:	f007 ff3c 	bl	800a9bc <iprintf>
    return BLE_STATUS_ERROR ;
 8002b44:	2347      	movs	r3, #71	; 0x47
 8002b46:	e000      	b.n	8002b4a <Quat_Update+0x86>
  }

  return BLE_STATUS_SUCCESS;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000222 	.word	0x20000222
 8002b58:	20000224 	.word	0x20000224
 8002b5c:	0800d0c4 	.word	0x0800d0c4

08002b60 <Read_Request_CB>:
* Description    : Update the sensor valuse.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002b6a:	88fa      	ldrh	r2, [r7, #6]
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <Read_Request_CB+0x98>)
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d105      	bne.n	8002b82 <Read_Request_CB+0x22>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002b76:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <Read_Request_CB+0x9c>)
 8002b78:	4921      	ldr	r1, [pc, #132]	; (8002c00 <Read_Request_CB+0xa0>)
 8002b7a:	4822      	ldr	r0, [pc, #136]	; (8002c04 <Read_Request_CB+0xa4>)
 8002b7c:	f7ff ff10 	bl	80029a0 <Acc_Update>
 8002b80:	e021      	b.n	8002bc6 <Read_Request_CB+0x66>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002b82:	88fa      	ldrh	r2, [r7, #6]
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <Read_Request_CB+0xa8>)
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d11b      	bne.n	8002bc6 <Read_Request_CB+0x66>
  {
    float data_t, data_p;
    data_t = 20.0;//27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8002b8e:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <Read_Request_CB+0xac>)
 8002b90:	617b      	str	r3, [r7, #20]
    data_p = 1000.0; // + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8002b92:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <Read_Request_CB+0xb0>)
 8002b94:	613b      	str	r3, [r7, #16]
    Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8002b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b9a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002c14 <Read_Request_CB+0xb4>
 8002b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002ba6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002baa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb6:	ee17 3a90 	vmov	r3, s15
 8002bba:	b21b      	sxth	r3, r3
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	ee16 0a90 	vmov	r0, s13
 8002bc2:	f000 f82d 	bl	8002c20 <Environmental_Update>
  }

  if(connection_handle !=0)
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <Read_Request_CB+0xb8>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00f      	beq.n	8002bf0 <Read_Request_CB+0x90>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <Read_Request_CB+0xb8>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f005 f945 	bl	8007e66 <aci_gatt_allow_read>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d004      	beq.n	8002bf0 <Read_Request_CB+0x90>
    {
      PRINT_DBG("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	4619      	mov	r1, r3
 8002bea:	480c      	ldr	r0, [pc, #48]	; (8002c1c <Read_Request_CB+0xbc>)
 8002bec:	f007 fee6 	bl	800a9bc <iprintf>
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000220 	.word	0x20000220
 8002bfc:	200003c4 	.word	0x200003c4
 8002c00:	200003b8 	.word	0x200003b8
 8002c04:	200003ac 	.word	0x200003ac
 8002c08:	2000021e 	.word	0x2000021e
 8002c0c:	41a00000 	.word	0x41a00000
 8002c10:	447a0000 	.word	0x447a0000
 8002c14:	42c80000 	.word	0x42c80000
 8002c18:	200003a4 	.word	0x200003a4
 8002c1c:	0800d100 	.word	0x0800d100

08002c20 <Environmental_Update>:

tBleStatus Environmental_Update(int32_t press, int16_t temp)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  //HOST_TO_LE_16(buff, HAL_GetTick()>>3);
  HOST_TO_LE_16(buff, 0);
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	733b      	strb	r3, [r7, #12]
 8002c30:	2300      	movs	r3, #0
 8002c32:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	73bb      	strb	r3, [r7, #14]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	121b      	asrs	r3, r3, #8
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	141b      	asrs	r3, r3, #16
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	743b      	strb	r3, [r7, #16]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	161b      	asrs	r3, r3, #24
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	74bb      	strb	r3, [r7, #18]
 8002c58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c5c:	121b      	asrs	r3, r3, #8
 8002c5e:	b21b      	sxth	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002c64:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <Environmental_Update+0x7c>)
 8002c66:	8818      	ldrh	r0, [r3, #0]
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <Environmental_Update+0x80>)
 8002c6a:	8819      	ldrh	r1, [r3, #0]
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2308      	movs	r3, #8
 8002c74:	2200      	movs	r2, #0
 8002c76:	f005 f844 	bl	8007d02 <aci_gatt_update_char_value>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d006      	beq.n	8002c92 <Environmental_Update+0x72>
    PRINT_DBG("Error while updating TEMP characteristic: 0x%04X\r\n",ret) ;
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	4619      	mov	r1, r3
 8002c88:	4806      	ldr	r0, [pc, #24]	; (8002ca4 <Environmental_Update+0x84>)
 8002c8a:	f007 fe97 	bl	800a9bc <iprintf>
    return BLE_STATUS_ERROR ;
 8002c8e:	2347      	movs	r3, #71	; 0x47
 8002c90:	e000      	b.n	8002c94 <Environmental_Update+0x74>
  }

  return BLE_STATUS_SUCCESS;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	2000021c 	.word	0x2000021c
 8002ca0:	2000021e 	.word	0x2000021e
 8002ca4:	0800d128 	.word	0x0800d128

08002ca8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cae:	f107 0314 	add.w	r3, r7, #20
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
 8002cb8:	609a      	str	r2, [r3, #8]
 8002cba:	60da      	str	r2, [r3, #12]
 8002cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbe:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	4a33      	ldr	r2, [pc, #204]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cca:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	4a2d      	ldr	r2, [pc, #180]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cee:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf2:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cfa:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d12:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <MX_GPIO_Init+0xe8>)
 8002d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d28:	f001 fcee 	bl	8004708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d44:	f001 fa2a 	bl	800419c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8002d48:	f44f 7381 	mov.w	r3, #258	; 0x102
 8002d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d64:	f001 fa1a 	bl	800419c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	2006      	movs	r0, #6
 8002d6e:	f001 f972 	bl	8004056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d72:	2006      	movs	r0, #6
 8002d74:	f001 f98b 	bl	800408e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	2028      	movs	r0, #40	; 0x28
 8002d7e:	f001 f96a 	bl	8004056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d82:	2028      	movs	r0, #40	; 0x28
 8002d84:	f001 f983 	bl	800408e <HAL_NVIC_EnableIRQ>

}
 8002d88:	bf00      	nop
 8002d8a:	3728      	adds	r7, #40	; 0x28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000

08002d94 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8002d98:	2006      	movs	r0, #6
 8002d9a:	f001 f978 	bl	800408e <HAL_NVIC_EnableIRQ>
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8002da6:	2006      	movs	r0, #6
 8002da8:	f001 f97f 	bl	80040aa <HAL_NVIC_DisableIRQ>
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <HCI_TL_SPI_Init+0x94>)
 8002dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbc:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <HCI_TL_SPI_Init+0x94>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <HCI_TL_SPI_Init+0x94>)
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8002dde:	f107 030c 	add.w	r3, r7, #12
 8002de2:	4619      	mov	r1, r3
 8002de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de8:	f001 f9d8 	bl	800419c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8002dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df2:	2301      	movs	r3, #1
 8002df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8002dfe:	f107 030c 	add.w	r3, r7, #12
 8002e02:	4619      	mov	r1, r3
 8002e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e08:	f001 f9c8 	bl	800419c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e10:	2301      	movs	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8002e1c:	f107 030c 	add.w	r3, r7, #12
 8002e20:	4619      	mov	r1, r3
 8002e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e26:	f001 f9b9 	bl	800419c <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2102      	movs	r1, #2
 8002e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e32:	f001 fc69 	bl	8004708 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8002e36:	f000 fbd5 	bl	80035e4 <BSP_SPI1_Init>
 8002e3a:	4603      	mov	r3, r0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000

08002e48 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e52:	f001 fb4d 	bl	80044f0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8002e56:	2102      	movs	r1, #2
 8002e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e5c:	f001 fb48 	bl	80044f0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8002e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e68:	f001 fb42 	bl	80044f0 <HAL_GPIO_DeInit>
  return 0;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002e76:	2201      	movs	r2, #1
 8002e78:	2102      	movs	r1, #2
 8002e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e7e:	f001 fc43 	bl	8004708 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002e82:	2200      	movs	r2, #0
 8002e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e8c:	f001 fc3c 	bl	8004708 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002e90:	2005      	movs	r0, #5
 8002e92:	f000 ffbd 	bl	8003e10 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002e96:	2201      	movs	r2, #1
 8002e98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea0:	f001 fc32 	bl	8004708 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002ea4:	2005      	movs	r0, #5
 8002ea6:	f000 ffb3 	bl	8003e10 <HAL_Delay>
  return 0;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002ec4:	4a27      	ldr	r2, [pc, #156]	; (8002f64 <HCI_TL_SPI_Receive+0xb4>)
 8002ec6:	f107 0314 	add.w	r3, r7, #20
 8002eca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ece:	6018      	str	r0, [r3, #0]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8002ed4:	f7ff ff65 	bl	8002da2 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2102      	movs	r1, #2
 8002edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ee0:	f001 fc12 	bl	8004708 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002ee4:	f107 010c 	add.w	r1, r7, #12
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	2205      	movs	r2, #5
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fba8 	bl	8003644 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8002ef4:	7c3b      	ldrb	r3, [r7, #16]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	b21a      	sxth	r2, r3
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	b21b      	sxth	r3, r3
 8002efe:	4313      	orrs	r3, r2
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8002f04:	8bfb      	ldrh	r3, [r7, #30]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01e      	beq.n	8002f48 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8002f0a:	8bfa      	ldrh	r2, [r7, #30]
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d901      	bls.n	8002f16 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	777b      	strb	r3, [r7, #29]
 8002f1a:	e010      	b.n	8002f3e <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8002f1c:	f107 011b 	add.w	r1, r7, #27
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	2201      	movs	r2, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fb8c 	bl	8003644 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8002f2c:	7f7b      	ldrb	r3, [r7, #29]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4413      	add	r3, r2
 8002f32:	7efa      	ldrb	r2, [r7, #27]
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8002f38:	7f7b      	ldrb	r3, [r7, #29]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	777b      	strb	r3, [r7, #29]
 8002f3e:	7f7b      	ldrb	r3, [r7, #29]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	8bfa      	ldrh	r2, [r7, #30]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d8e9      	bhi.n	8002f1c <HCI_TL_SPI_Receive+0x6c>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f50:	f001 fbda 	bl	8004708 <HAL_GPIO_WritePin>

  HCI_TL_SPI_Enable_IRQ();
 8002f54:	f7ff ff1e 	bl	8002d94 <HCI_TL_SPI_Enable_IRQ>

  return len;
 8002f58:	7f7b      	ldrb	r3, [r7, #29]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	0800d15c 	.word	0x0800d15c

08002f68 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002f74:	4a36      	ldr	r2, [pc, #216]	; (8003050 <HCI_TL_SPI_Send+0xe8>)
 8002f76:	f107 0314 	add.w	r3, r7, #20
 8002f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f7e:	6018      	str	r0, [r3, #0]
 8002f80:	3304      	adds	r3, #4
 8002f82:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002f84:	f000 ff38 	bl	8003df8 <HAL_GetTick>
 8002f88:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8002f8a:	f7ff ff0a 	bl	8002da2 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8002f8e:	f000 ff33 	bl	8003df8 <HAL_GetTick>
 8002f92:	61f8      	str	r0, [r7, #28]

    result = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fa0:	f001 fbb2 	bl	8004708 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8002fa4:	e00a      	b.n	8002fbc <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8002fa6:	f000 ff27 	bl	8003df8 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b0f      	cmp	r3, #15
 8002fb2:	d903      	bls.n	8002fbc <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 8002fb4:	f06f 0302 	mvn.w	r3, #2
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fba:	e004      	b.n	8002fc6 <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 8002fbc:	f000 f84c 	bl	8003058 <IsDataAvailable>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ef      	beq.n	8002fa6 <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	f113 0f03 	cmn.w	r3, #3
 8002fcc:	d106      	bne.n	8002fdc <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002fce:	2201      	movs	r2, #1
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd6:	f001 fb97 	bl	8004708 <HAL_GPIO_WritePin>
      break;
 8002fda:	e031      	b.n	8003040 <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002fdc:	f107 010c 	add.w	r1, r7, #12
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2205      	movs	r2, #5
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fb2c 	bl	8003644 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8002fec:	7bbb      	ldrb	r3, [r7, #14]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	b21a      	sxth	r2, r3
 8002ff2:	7b7b      	ldrb	r3, [r7, #13]
 8002ff4:	b21b      	sxth	r3, r3
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	b21b      	sxth	r3, r3
 8002ffa:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8002ffc:	8b7a      	ldrh	r2, [r7, #26]
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	429a      	cmp	r2, r3
 8003002:	d306      	bcc.n	8003012 <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	461a      	mov	r2, r3
 8003008:	4912      	ldr	r1, [pc, #72]	; (8003054 <HCI_TL_SPI_Send+0xec>)
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fb1a 	bl	8003644 <BSP_SPI1_SendRecv>
 8003010:	e002      	b.n	8003018 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8003012:	f06f 0301 	mvn.w	r3, #1
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003018:	2201      	movs	r2, #1
 800301a:	2102      	movs	r1, #2
 800301c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003020:	f001 fb72 	bl	8004708 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8003024:	f000 fee8 	bl	8003df8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b0f      	cmp	r3, #15
 8003030:	d903      	bls.n	800303a <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 8003032:	f06f 0302 	mvn.w	r3, #2
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8003038:	e002      	b.n	8003040 <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	2b00      	cmp	r3, #0
 800303e:	dba6      	blt.n	8002f8e <HCI_TL_SPI_Send+0x26>

  HCI_TL_SPI_Enable_IRQ();
 8003040:	f7ff fea8 	bl	8002d94 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003046:	4618      	mov	r0, r3
 8003048:	3728      	adds	r7, #40	; 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	0800d164 	.word	0x0800d164
 8003054:	20000250 	.word	0x20000250

08003058 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800305c:	2101      	movs	r1, #1
 800305e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003062:	f001 fb39 	bl	80046d8 <HAL_GPIO_ReadPin>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
}
 8003072:	4618      	mov	r0, r3
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800307e:	4b13      	ldr	r3, [pc, #76]	; (80030cc <hci_tl_lowlevel_init+0x54>)
 8003080:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <hci_tl_lowlevel_init+0x58>)
 8003084:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8003086:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <hci_tl_lowlevel_init+0x5c>)
 8003088:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <hci_tl_lowlevel_init+0x60>)
 800308c:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <hci_tl_lowlevel_init+0x64>)
 8003090:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <hci_tl_lowlevel_init+0x68>)
 8003094:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8003096:	1d3b      	adds	r3, r7, #4
 8003098:	4618      	mov	r0, r3
 800309a:	f006 fd1b 	bl	8009ad4 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800309e:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 80030a2:	4810      	ldr	r0, [pc, #64]	; (80030e4 <hci_tl_lowlevel_init+0x6c>)
 80030a4:	f001 f835 	bl	8004112 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80030a8:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <hci_tl_lowlevel_init+0x70>)
 80030aa:	2100      	movs	r1, #0
 80030ac:	480d      	ldr	r0, [pc, #52]	; (80030e4 <hci_tl_lowlevel_init+0x6c>)
 80030ae:	f001 f816 	bl	80040de <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2100      	movs	r1, #0
 80030b6:	2006      	movs	r0, #6
 80030b8:	f000 ffcd 	bl	8004056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80030bc:	2006      	movs	r0, #6
 80030be:	f000 ffe6 	bl	800408e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80030c2:	bf00      	nop
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	08002db1 	.word	0x08002db1
 80030d0:	08002e49 	.word	0x08002e49
 80030d4:	08002f69 	.word	0x08002f69
 80030d8:	08002eb1 	.word	0x08002eb1
 80030dc:	08002e73 	.word	0x08002e73
 80030e0:	08003685 	.word	0x08003685
 80030e4:	20000248 	.word	0x20000248
 80030e8:	080030ed 	.word	0x080030ed

080030ec <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80030f0:	e005      	b.n	80030fe <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80030f2:	2000      	movs	r0, #0
 80030f4:	f006 fe54 	bl	8009da0 <hci_notify_asynch_evt>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80030fe:	f7ff ffab 	bl	8003058 <IsDataAvailable>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f4      	bne.n	80030f2 <hci_tl_lowlevel_isr+0x6>
 8003108:	e000      	b.n	800310c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800310a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <MX_I2C1_Init+0x74>)
 8003116:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <MX_I2C1_Init+0x78>)
 8003118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <MX_I2C1_Init+0x74>)
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <MX_I2C1_Init+0x7c>)
 800311e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003120:	4b18      	ldr	r3, [pc, #96]	; (8003184 <MX_I2C1_Init+0x74>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <MX_I2C1_Init+0x74>)
 8003128:	2201      	movs	r2, #1
 800312a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800312c:	4b15      	ldr	r3, [pc, #84]	; (8003184 <MX_I2C1_Init+0x74>)
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <MX_I2C1_Init+0x74>)
 8003134:	2200      	movs	r2, #0
 8003136:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <MX_I2C1_Init+0x74>)
 800313a:	2200      	movs	r2, #0
 800313c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <MX_I2C1_Init+0x74>)
 8003140:	2200      	movs	r2, #0
 8003142:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <MX_I2C1_Init+0x74>)
 8003146:	2200      	movs	r2, #0
 8003148:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800314a:	480e      	ldr	r0, [pc, #56]	; (8003184 <MX_I2C1_Init+0x74>)
 800314c:	f001 fb0e 	bl	800476c <HAL_I2C_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003156:	f000 f8d9 	bl	800330c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800315a:	2100      	movs	r1, #0
 800315c:	4809      	ldr	r0, [pc, #36]	; (8003184 <MX_I2C1_Init+0x74>)
 800315e:	f001 fb94 	bl	800488a <HAL_I2CEx_ConfigAnalogFilter>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003168:	f000 f8d0 	bl	800330c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800316c:	2100      	movs	r1, #0
 800316e:	4805      	ldr	r0, [pc, #20]	; (8003184 <MX_I2C1_Init+0x74>)
 8003170:	f001 fbd6 	bl	8004920 <HAL_I2CEx_ConfigDigitalFilter>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800317a:	f000 f8c7 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000350 	.word	0x20000350
 8003188:	40005400 	.word	0x40005400
 800318c:	10707dbc 	.word	0x10707dbc

08003190 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b0ac      	sub	sp, #176	; 0xb0
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	2288      	movs	r2, #136	; 0x88
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f006 ff91 	bl	800a0d8 <memset>
  if(i2cHandle->Instance==I2C1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a21      	ldr	r2, [pc, #132]	; (8003240 <HAL_I2C_MspInit+0xb0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d13b      	bne.n	8003238 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80031c0:	2340      	movs	r3, #64	; 0x40
 80031c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031c4:	2300      	movs	r3, #0
 80031c6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031c8:	f107 0314 	add.w	r3, r7, #20
 80031cc:	4618      	mov	r0, r3
 80031ce:	f002 fa57 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80031d8:	f000 f898 	bl	800330c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031dc:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_I2C_MspInit+0xb4>)
 80031de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e0:	4a18      	ldr	r2, [pc, #96]	; (8003244 <HAL_I2C_MspInit+0xb4>)
 80031e2:	f043 0302 	orr.w	r3, r3, #2
 80031e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e8:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_I2C_MspInit+0xb4>)
 80031ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031fc:	2312      	movs	r3, #18
 80031fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003208:	2303      	movs	r3, #3
 800320a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800320e:	2304      	movs	r3, #4
 8003210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003214:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003218:	4619      	mov	r1, r3
 800321a:	480b      	ldr	r0, [pc, #44]	; (8003248 <HAL_I2C_MspInit+0xb8>)
 800321c:	f000 ffbe 	bl	800419c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_I2C_MspInit+0xb4>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	4a07      	ldr	r2, [pc, #28]	; (8003244 <HAL_I2C_MspInit+0xb4>)
 8003226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800322a:	6593      	str	r3, [r2, #88]	; 0x58
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_I2C_MspInit+0xb4>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003238:	bf00      	nop
 800323a:	37b0      	adds	r7, #176	; 0xb0
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40005400 	.word	0x40005400
 8003244:	40021000 	.word	0x40021000
 8003248:	48000400 	.word	0x48000400

0800324c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003250:	f000 fd62 	bl	8003d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003254:	f000 f809 	bl	800326a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003258:	f7ff fd26 	bl	8002ca8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800325c:	f7ff ff58 	bl	8003110 <MX_I2C1_Init>
  MX_BlueNRG_2_Init();
 8003260:	f7fd fe4e 	bl	8000f00 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_2_Process();
 8003264:	f7fd fe80 	bl	8000f68 <MX_BlueNRG_2_Process>
 8003268:	e7fc      	b.n	8003264 <main+0x18>

0800326a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b096      	sub	sp, #88	; 0x58
 800326e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	2244      	movs	r2, #68	; 0x44
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f006 ff2d 	bl	800a0d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800327e:	463b      	mov	r3, r7
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800328c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003290:	f001 fba0 	bl	80049d4 <HAL_PWREx_ControlVoltageScaling>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800329a:	f000 f837 	bl	800330c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800329e:	2302      	movs	r3, #2
 80032a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032a8:	2310      	movs	r3, #16
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032ac:	2302      	movs	r3, #2
 80032ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032b0:	2302      	movs	r3, #2
 80032b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80032b4:	2301      	movs	r3, #1
 80032b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80032b8:	2308      	movs	r3, #8
 80032ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80032bc:	2307      	movs	r3, #7
 80032be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80032c0:	2302      	movs	r3, #2
 80032c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80032c4:	2302      	movs	r3, #2
 80032c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 fbd7 	bl	8004a80 <HAL_RCC_OscConfig>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <SystemClock_Config+0x72>
  {
    Error_Handler();
 80032d8:	f000 f818 	bl	800330c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032dc:	230f      	movs	r3, #15
 80032de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032e0:	2303      	movs	r3, #3
 80032e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80032f0:	463b      	mov	r3, r7
 80032f2:	2103      	movs	r1, #3
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 ff9f 	bl	8005238 <HAL_RCC_ClockConfig>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003300:	f000 f804 	bl	800330c <Error_Handler>
  }
}
 8003304:	bf00      	nop
 8003306:	3758      	adds	r7, #88	; 0x58
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003310:	b672      	cpsid	i
}
 8003312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003314:	e7fe      	b.n	8003314 <Error_Handler+0x8>
	...

08003318 <Set_DeviceConnectable>:
 * @note   Puts the device in connectable mode
 * @param  None
 * @retval None
 */
void Set_DeviceConnectable(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b092      	sub	sp, #72	; 0x48
 800331c:	af08      	add	r7, sp, #32
  uint8_t ret;
  uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 800331e:	4a3f      	ldr	r2, [pc, #252]	; (800341c <Set_DeviceConnectable+0x104>)
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003328:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 800332c:	2302      	movs	r3, #2
 800332e:	703b      	strb	r3, [r7, #0]
 8003330:	230a      	movs	r3, #10
 8003332:	707b      	strb	r3, [r7, #1]
 8003334:	2300      	movs	r3, #0
 8003336:	70bb      	strb	r3, [r7, #2]
 8003338:	2308      	movs	r3, #8
 800333a:	70fb      	strb	r3, [r7, #3]
 800333c:	2309      	movs	r3, #9
 800333e:	713b      	strb	r3, [r7, #4]
 8003340:	2342      	movs	r3, #66	; 0x42
 8003342:	717b      	strb	r3, [r7, #5]
 8003344:	236c      	movs	r3, #108	; 0x6c
 8003346:	71bb      	strb	r3, [r7, #6]
 8003348:	2375      	movs	r3, #117	; 0x75
 800334a:	71fb      	strb	r3, [r7, #7]
 800334c:	2365      	movs	r3, #101	; 0x65
 800334e:	723b      	strb	r3, [r7, #8]
 8003350:	234e      	movs	r3, #78	; 0x4e
 8003352:	727b      	strb	r3, [r7, #9]
 8003354:	2352      	movs	r3, #82	; 0x52
 8003356:	72bb      	strb	r3, [r7, #10]
 8003358:	2347      	movs	r3, #71	; 0x47
 800335a:	72fb      	strb	r3, [r7, #11]
 800335c:	230d      	movs	r3, #13
 800335e:	733b      	strb	r3, [r7, #12]
 8003360:	23ff      	movs	r3, #255	; 0xff
 8003362:	737b      	strb	r3, [r7, #13]
 8003364:	2301      	movs	r3, #1
 8003366:	73bb      	strb	r3, [r7, #14]
 8003368:	2302      	movs	r3, #2
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	2300      	movs	r3, #0
 800336e:	743b      	strb	r3, [r7, #16]
 8003370:	23f4      	movs	r3, #244	; 0xf4
 8003372:	747b      	strb	r3, [r7, #17]
 8003374:	2300      	movs	r3, #0
 8003376:	74bb      	strb	r3, [r7, #18]
 8003378:	2300      	movs	r3, #0
 800337a:	74fb      	strb	r3, [r7, #19]
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 800337c:	4b28      	ldr	r3, [pc, #160]	; (8003420 <Set_DeviceConnectable+0x108>)
 800337e:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8003380:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8003382:	4b27      	ldr	r3, [pc, #156]	; (8003420 <Set_DeviceConnectable+0x108>)
 8003384:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8003386:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <Set_DeviceConnectable+0x108>)
 800338a:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 800338c:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 800338e:	4b24      	ldr	r3, [pc, #144]	; (8003420 <Set_DeviceConnectable+0x108>)
 8003390:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8003392:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <Set_DeviceConnectable+0x108>)
 8003396:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8003398:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 800339a:	4b21      	ldr	r3, [pc, #132]	; (8003420 <Set_DeviceConnectable+0x108>)
 800339c:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 800339e:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80033a0:	7cbb      	ldrb	r3, [r7, #18]
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_response_data(0,NULL);
 80033aa:	2100      	movs	r1, #0
 80033ac:	2000      	movs	r0, #0
 80033ae:	f006 fa3c 	bl	800982a <hci_le_set_scan_response_data>

  PRINT_DBG("Set General Discoverable Mode.\r\n");
 80033b2:	481c      	ldr	r0, [pc, #112]	; (8003424 <Set_DeviceConnectable+0x10c>)
 80033b4:	f007 fb88 	bl	800aac8 <puts>

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80033b8:	2300      	movs	r3, #0
 80033ba:	9306      	str	r3, [sp, #24]
 80033bc:	2300      	movs	r3, #0
 80033be:	9305      	str	r3, [sp, #20]
 80033c0:	2300      	movs	r3, #0
 80033c2:	9304      	str	r3, [sp, #16]
 80033c4:	2300      	movs	r3, #0
 80033c6:	9303      	str	r3, [sp, #12]
 80033c8:	f107 031c 	add.w	r3, r7, #28
 80033cc:	9302      	str	r3, [sp, #8]
 80033ce:	2308      	movs	r3, #8
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	2300      	movs	r3, #0
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2301      	movs	r3, #1
 80033d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033e0:	2000      	movs	r0, #0
 80033e2:	f003 ff8e 	bl	8007302 <aci_gap_set_discoverable>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                 ADV_INTERV_MIN, ADV_INTERV_MAX,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 80033ec:	463b      	mov	r3, r7
 80033ee:	4619      	mov	r1, r3
 80033f0:	201a      	movs	r0, #26
 80033f2:	f004 fa03 	bl	80077fc <aci_gap_update_adv_data>

  if(ret != BLE_STATUS_SUCCESS)
 80033f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <Set_DeviceConnectable+0xf4>
  {
    PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 80033fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003402:	4619      	mov	r1, r3
 8003404:	4808      	ldr	r0, [pc, #32]	; (8003428 <Set_DeviceConnectable+0x110>)
 8003406:	f007 fad9 	bl	800a9bc <iprintf>
  }
  else
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 800340a:	e002      	b.n	8003412 <Set_DeviceConnectable+0xfa>
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
 800340c:	4807      	ldr	r0, [pc, #28]	; (800342c <Set_DeviceConnectable+0x114>)
 800340e:	f007 fb5b 	bl	800aac8 <puts>
}
 8003412:	bf00      	nop
 8003414:	3728      	adds	r7, #40	; 0x28
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	0800d1e0 	.word	0x0800d1e0
 8003420:	20000210 	.word	0x20000210
 8003424:	0800d16c 	.word	0x0800d16c
 8003428:	0800d18c 	.word	0x0800d18c
 800342c:	0800d1b8 	.word	0x0800d1b8

08003430 <APP_UserEvtRx>:
 *         parsed
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void APP_UserEvtRx(void *pData)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d163      	bne.n	800350c <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	3301      	adds	r3, #1
 8003448:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b3e      	cmp	r3, #62	; 0x3e
 8003450:	d11e      	bne.n	8003490 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3302      	adds	r3, #2
 8003456:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	e014      	b.n	8003488 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b29a      	uxth	r2, r3
 8003464:	492b      	ldr	r1, [pc, #172]	; (8003514 <APP_UserEvtRx+0xe4>)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800346c:	429a      	cmp	r2, r3
 800346e:	d108      	bne.n	8003482 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8003470:	4a28      	ldr	r2, [pc, #160]	; (8003514 <APP_UserEvtRx+0xe4>)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	3201      	adds	r2, #1
 800347e:	4610      	mov	r0, r2
 8003480:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3301      	adds	r3, #1
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b09      	cmp	r3, #9
 800348c:	d9e7      	bls.n	800345e <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 800348e:	e03d      	b.n	800350c <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2bff      	cmp	r3, #255	; 0xff
 8003496:	d11e      	bne.n	80034d6 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3302      	adds	r3, #2
 800349c:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e014      	b.n	80034ce <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	491b      	ldr	r1, [pc, #108]	; (8003518 <APP_UserEvtRx+0xe8>)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d108      	bne.n	80034c8 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 80034b6:	4a18      	ldr	r2, [pc, #96]	; (8003518 <APP_UserEvtRx+0xe8>)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	3202      	adds	r2, #2
 80034c4:	4610      	mov	r0, r2
 80034c6:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	3301      	adds	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2b2a      	cmp	r3, #42	; 0x2a
 80034d2:	d9e7      	bls.n	80034a4 <APP_UserEvtRx+0x74>
}
 80034d4:	e01a      	b.n	800350c <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	e014      	b.n	8003506 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	490e      	ldr	r1, [pc, #56]	; (800351c <APP_UserEvtRx+0xec>)
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d108      	bne.n	8003500 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <APP_UserEvtRx+0xec>)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	3202      	adds	r2, #2
 80034fc:	4610      	mov	r0, r2
 80034fe:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	3301      	adds	r3, #1
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b06      	cmp	r3, #6
 800350a:	d9e7      	bls.n	80034dc <APP_UserEvtRx+0xac>
}
 800350c:	bf00      	nop
 800350e:	3720      	adds	r7, #32
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	0800d27c 	.word	0x0800d27c
 8003518:	0800d2cc 	.word	0x0800d2cc
 800351c:	0800d244 	.word	0x0800d244

08003520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003526:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <HAL_MspInit+0x44>)
 8003528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352a:	4a0e      	ldr	r2, [pc, #56]	; (8003564 <HAL_MspInit+0x44>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6613      	str	r3, [r2, #96]	; 0x60
 8003532:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <HAL_MspInit+0x44>)
 8003534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_MspInit+0x44>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	4a08      	ldr	r2, [pc, #32]	; (8003564 <HAL_MspInit+0x44>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	6593      	str	r3, [r2, #88]	; 0x58
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_MspInit+0x44>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000

08003568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800356c:	e7fe      	b.n	800356c <NMI_Handler+0x4>

0800356e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <HardFault_Handler+0x4>

08003574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <MemManage_Handler+0x4>

0800357a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800357e:	e7fe      	b.n	800357e <BusFault_Handler+0x4>

08003580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <UsageFault_Handler+0x4>

08003586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035b4:	f000 fc0c 	bl	8003dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}

080035bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80035c0:	4802      	ldr	r0, [pc, #8]	; (80035cc <EXTI0_IRQHandler+0x10>)
 80035c2:	f000 fdbb 	bl	800413c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000248 	.word	0x20000248

080035d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80035d4:	4802      	ldr	r0, [pc, #8]	; (80035e0 <EXTI15_10_IRQHandler+0x10>)
 80035d6:	f000 fdb1 	bl	800413c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <BSP_SPI1_Init+0x54>)
 80035f0:	4a12      	ldr	r2, [pc, #72]	; (800363c <BSP_SPI1_Init+0x58>)
 80035f2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <BSP_SPI1_Init+0x5c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	4911      	ldr	r1, [pc, #68]	; (8003640 <BSP_SPI1_Init+0x5c>)
 80035fc:	600a      	str	r2, [r1, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d114      	bne.n	800362c <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8003602:	480d      	ldr	r0, [pc, #52]	; (8003638 <BSP_SPI1_Init+0x54>)
 8003604:	f002 ffb8 	bl	8006578 <HAL_SPI_GetState>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10e      	bne.n	800362c <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 800360e:	480a      	ldr	r0, [pc, #40]	; (8003638 <BSP_SPI1_Init+0x54>)
 8003610:	f000 f882 	bl	8003718 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d108      	bne.n	800362c <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800361a:	4807      	ldr	r0, [pc, #28]	; (8003638 <BSP_SPI1_Init+0x54>)
 800361c:	f000 f83a 	bl	8003694 <MX_SPI1_Init>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003626:	f06f 0307 	mvn.w	r3, #7
 800362a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800362c:	687b      	ldr	r3, [r7, #4]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200003dc 	.word	0x200003dc
 800363c:	40013000 	.word	0x40013000
 8003640:	20000440 	.word	0x20000440

08003644 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800365c:	9200      	str	r2, [sp, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	68f9      	ldr	r1, [r7, #12]
 8003662:	4807      	ldr	r0, [pc, #28]	; (8003680 <BSP_SPI1_SendRecv+0x3c>)
 8003664:	f002 fd75 	bl	8006152 <HAL_SPI_TransmitReceive>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800366e:	f06f 0305 	mvn.w	r3, #5
 8003672:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003674:	697b      	ldr	r3, [r7, #20]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200003dc 	.word	0x200003dc

08003684 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003688:	f000 fbb6 	bl	8003df8 <HAL_GetTick>
 800368c:	4603      	mov	r3, r0
}
 800368e:	4618      	mov	r0, r3
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <MX_SPI1_Init+0x80>)
 80036a4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036ac:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036ba:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ce:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2228      	movs	r2, #40	; 0x28
 80036d4:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2207      	movs	r2, #7
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f002 fc7c 	bl	8005ff8 <HAL_SPI_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40013000 	.word	0x40013000

08003718 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003720:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <SPI1_MspInit+0xbc>)
 8003722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003724:	4a2b      	ldr	r2, [pc, #172]	; (80037d4 <SPI1_MspInit+0xbc>)
 8003726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800372a:	6613      	str	r3, [r2, #96]	; 0x60
 800372c:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <SPI1_MspInit+0xbc>)
 800372e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003738:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <SPI1_MspInit+0xbc>)
 800373a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373c:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <SPI1_MspInit+0xbc>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <SPI1_MspInit+0xbc>)
 8003746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003750:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <SPI1_MspInit+0xbc>)
 8003752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <SPI1_MspInit+0xbc>)
 8003756:	f043 0302 	orr.w	r3, r3, #2
 800375a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <SPI1_MspInit+0xbc>)
 800375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003768:	2340      	movs	r3, #64	; 0x40
 800376a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003774:	2303      	movs	r3, #3
 8003776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003778:	2305      	movs	r3, #5
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800377c:	f107 0314 	add.w	r3, r7, #20
 8003780:	4619      	mov	r1, r3
 8003782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003786:	f000 fd09 	bl	800419c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378e:	2302      	movs	r3, #2
 8003790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003796:	2303      	movs	r3, #3
 8003798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800379a:	2305      	movs	r3, #5
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800379e:	f107 0314 	add.w	r3, r7, #20
 80037a2:	4619      	mov	r1, r3
 80037a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a8:	f000 fcf8 	bl	800419c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80037ac:	2308      	movs	r3, #8
 80037ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	2302      	movs	r3, #2
 80037b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	2303      	movs	r3, #3
 80037ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80037bc:	2305      	movs	r3, #5
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	4619      	mov	r1, r3
 80037c6:	4804      	ldr	r0, [pc, #16]	; (80037d8 <SPI1_MspInit+0xc0>)
 80037c8:	f000 fce8 	bl	800419c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80037cc:	bf00      	nop
 80037ce:	3728      	adds	r7, #40	; 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	48000400 	.word	0x48000400

080037dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return 1;
 80037e0:	2301      	movs	r3, #1
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <_kill>:

int _kill(int pid, int sig)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037f6:	f006 fc37 	bl	800a068 <__errno>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2216      	movs	r2, #22
 80037fe:	601a      	str	r2, [r3, #0]
  return -1;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_exit>:

void _exit (int status)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ffe7 	bl	80037ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800381e:	e7fe      	b.n	800381e <_exit+0x12>

08003820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e00a      	b.n	8003848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003832:	f3af 8000 	nop.w
 8003836:	4601      	mov	r1, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	60ba      	str	r2, [r7, #8]
 800383e:	b2ca      	uxtb	r2, r1
 8003840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	3301      	adds	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	dbf0      	blt.n	8003832 <_read+0x12>
  }

  return len;
 8003850:	687b      	ldr	r3, [r7, #4]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e009      	b.n	8003880 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	60ba      	str	r2, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 f9c3 	bl	8003c00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3301      	adds	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	dbf1      	blt.n	800386c <_write+0x12>
  }
  return len;
 8003888:	687b      	ldr	r3, [r7, #4]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <_close>:

int _close(int file)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038ba:	605a      	str	r2, [r3, #4]
  return 0;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <_isatty>:

int _isatty(int file)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038d2:	2301      	movs	r3, #1
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <_sbrk+0x5c>)
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <_sbrk+0x60>)
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003910:	4b13      	ldr	r3, [pc, #76]	; (8003960 <_sbrk+0x64>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d102      	bne.n	800391e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <_sbrk+0x64>)
 800391a:	4a12      	ldr	r2, [pc, #72]	; (8003964 <_sbrk+0x68>)
 800391c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <_sbrk+0x64>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4413      	add	r3, r2
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	429a      	cmp	r2, r3
 800392a:	d207      	bcs.n	800393c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800392c:	f006 fb9c 	bl	800a068 <__errno>
 8003930:	4603      	mov	r3, r0
 8003932:	220c      	movs	r2, #12
 8003934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800393a:	e009      	b.n	8003950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800393c:	4b08      	ldr	r3, [pc, #32]	; (8003960 <_sbrk+0x64>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <_sbrk+0x64>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4413      	add	r3, r2
 800394a:	4a05      	ldr	r2, [pc, #20]	; (8003960 <_sbrk+0x64>)
 800394c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800394e:	68fb      	ldr	r3, [r7, #12]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20018000 	.word	0x20018000
 800395c:	00000800 	.word	0x00000800
 8003960:	20000444 	.word	0x20000444
 8003964:	20000a90 	.word	0x20000a90

08003968 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	4a04      	ldr	r2, [pc, #16]	; (8003988 <BSP_LED_Init+0x20>)
 8003976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	0800d1e8 	.word	0x0800d1e8

0800398c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	4a06      	ldr	r2, [pc, #24]	; (80039b4 <BSP_LED_On+0x28>)
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	2120      	movs	r1, #32
 80039a0:	2201      	movs	r2, #1
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 feb0 	bl	8004708 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000004 	.word	0x20000004

080039b8 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <BSP_LED_Off+0x28>)
 80039c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ca:	2120      	movs	r1, #32
 80039cc:	2200      	movs	r2, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fe9a 	bl	8004708 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000004 	.word	0x20000004

080039e4 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <BSP_LED_Toggle+0x28>)
 80039f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f6:	2220      	movs	r2, #32
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fe9c 	bl	8004738 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000004 	.word	0x20000004

08003a10 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	460a      	mov	r2, r1
 8003a2a:	71fb      	strb	r3, [r7, #7]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <BSP_PB_Init+0x94>)
 8003a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003a3e:	79bb      	ldrb	r3, [r7, #6]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d132      	bne.n	8003aaa <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <BSP_PB_Init+0x98>)
 8003a4a:	441a      	add	r2, r3
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	491b      	ldr	r1, [pc, #108]	; (8003abc <BSP_PB_Init+0x9c>)
 8003a50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f000 fb5b 	bl	8004112 <HAL_EXTI_GetHandle>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003a62:	f06f 0303 	mvn.w	r3, #3
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e01f      	b.n	8003aaa <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <BSP_PB_Init+0x98>)
 8003a70:	1898      	adds	r0, r3, r2
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	4a12      	ldr	r2, [pc, #72]	; (8003ac0 <BSP_PB_Init+0xa0>)
 8003a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	f000 fb2e 	bl	80040de <HAL_EXTI_RegisterCallback>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003a88:	f06f 0303 	mvn.w	r3, #3
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e00c      	b.n	8003aaa <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003a90:	2028      	movs	r0, #40	; 0x28
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <BSP_PB_Init+0xa4>)
 8003a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f000 fada 	bl	8004056 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003aa2:	2328      	movs	r3, #40	; 0x28
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 faf2 	bl	800408e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	0800d1ec 	.word	0x0800d1ec
 8003ab8:	2000000c 	.word	0x2000000c
 8003abc:	0800d1f0 	.word	0x0800d1f0
 8003ac0:	0800d1f4 	.word	0x0800d1f4
 8003ac4:	0800d1f8 	.word	0x0800d1f8

08003ac8 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	4a09      	ldr	r2, [pc, #36]	; (8003afc <BSP_PB_GetState+0x34>)
 8003ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fdf9 	bl	80046d8 <HAL_GPIO_ReadPin>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000008 	.word	0x20000008

08003b00 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003b04:	2000      	movs	r0, #0
 8003b06:	f7fe fd7b 	bl	8002600 <BSP_PB_Callback>
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d903      	bls.n	8003b38 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b30:	f06f 0301 	mvn.w	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	e025      	b.n	8003b84 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	79fa      	ldrb	r2, [r7, #7]
 8003b3c:	4914      	ldr	r1, [pc, #80]	; (8003b90 <BSP_COM_Init+0x74>)
 8003b3e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003b42:	4814      	ldr	r0, [pc, #80]	; (8003b94 <BSP_COM_Init+0x78>)
 8003b44:	4613      	mov	r3, r2
 8003b46:	015b      	lsls	r3, r3, #5
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4403      	add	r3, r0
 8003b4e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8003b50:	79fa      	ldrb	r2, [r7, #7]
 8003b52:	4613      	mov	r3, r2
 8003b54:	015b      	lsls	r3, r3, #5
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <BSP_COM_Init+0x78>)
 8003b5c:	4413      	add	r3, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f86a 	bl	8003c38 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8003b64:	79fa      	ldrb	r2, [r7, #7]
 8003b66:	4613      	mov	r3, r2
 8003b68:	015b      	lsls	r3, r3, #5
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <BSP_COM_Init+0x78>)
 8003b70:	4413      	add	r3, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f810 	bl	8003b98 <MX_USART2_UART_Init>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003b7e:	f06f 0303 	mvn.w	r3, #3
 8003b82:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003b84:	68fb      	ldr	r3, [r7, #12]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000014 	.word	0x20000014
 8003b94:	20000448 	.word	0x20000448

08003b98 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <MX_USART2_UART_Init+0x64>)
 8003ba8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bb0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f002 fe3a 	bl	800685c <HAL_UART_Init>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40004400 	.word	0x40004400

08003c00 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <__io_putchar+0x30>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4613      	mov	r3, r2
 8003c10:	015b      	lsls	r3, r3, #5
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <__io_putchar+0x34>)
 8003c18:	1898      	adds	r0, r3, r2
 8003c1a:	1d39      	adds	r1, r7, #4
 8003c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c20:	2201      	movs	r2, #1
 8003c22:	f002 fe73 	bl	800690c <HAL_UART_Transmit>
  return ch;
 8003c26:	687b      	ldr	r3, [r7, #4]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200004cc 	.word	0x200004cc
 8003c34:	20000448 	.word	0x20000448

08003c38 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b0ac      	sub	sp, #176	; 0xb0
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	2288      	movs	r2, #136	; 0x88
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f006 fa45 	bl	800a0d8 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c52:	2300      	movs	r3, #0
 8003c54:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 fd10 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c60:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <USART2_MspInit+0xb8>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <USART2_MspInit+0xb8>)
 8003c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <USART2_MspInit+0xb8>)
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <USART2_MspInit+0xb8>)
 8003c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7c:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <USART2_MspInit+0xb8>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c84:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <USART2_MspInit+0xb8>)
 8003c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8003c90:	2304      	movs	r3, #4
 8003c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c96:	2302      	movs	r3, #2
 8003c98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8003ca8:	2307      	movs	r3, #7
 8003caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8003cae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cb8:	f000 fa70 	bl	800419c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8003cd4:	2307      	movs	r3, #7
 8003cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8003cda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ce4:	f000 fa5a 	bl	800419c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8003ce8:	bf00      	nop
 8003cea:	37b0      	adds	r7, #176	; 0xb0
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000

08003cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <SystemInit+0x20>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <SystemInit+0x20>)
 8003d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_Init+0x3c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <HAL_Init+0x3c>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d2e:	2003      	movs	r0, #3
 8003d30:	f000 f986 	bl	8004040 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d34:	2000      	movs	r0, #0
 8003d36:	f000 f80f 	bl	8003d58 <HAL_InitTick>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	71fb      	strb	r3, [r7, #7]
 8003d44:	e001      	b.n	8003d4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d46:	f7ff fbeb 	bl	8003520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40022000 	.word	0x40022000

08003d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d64:	4b17      	ldr	r3, [pc, #92]	; (8003dc4 <HAL_InitTick+0x6c>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d023      	beq.n	8003db4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d6c:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <HAL_InitTick+0x70>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <HAL_InitTick+0x6c>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	4619      	mov	r1, r3
 8003d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f99f 	bl	80040c6 <HAL_SYSTICK_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10f      	bne.n	8003dae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b0f      	cmp	r3, #15
 8003d92:	d809      	bhi.n	8003da8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d94:	2200      	movs	r2, #0
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d9c:	f000 f95b 	bl	8004056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003da0:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <HAL_InitTick+0x74>)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e007      	b.n	8003db8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	e004      	b.n	8003db8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	e001      	b.n	8003db8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000020 	.word	0x20000020
 8003dc8:	20000018 	.word	0x20000018
 8003dcc:	2000001c 	.word	0x2000001c

08003dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_IncTick+0x20>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_IncTick+0x24>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4413      	add	r3, r2
 8003de0:	4a04      	ldr	r2, [pc, #16]	; (8003df4 <HAL_IncTick+0x24>)
 8003de2:	6013      	str	r3, [r2, #0]
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000020 	.word	0x20000020
 8003df4:	200004d0 	.word	0x200004d0

08003df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_GetTick+0x14>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	200004d0 	.word	0x200004d0

08003e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e18:	f7ff ffee 	bl	8003df8 <HAL_GetTick>
 8003e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e28:	d005      	beq.n	8003e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <HAL_Delay+0x44>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e36:	bf00      	nop
 8003e38:	f7ff ffde 	bl	8003df8 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d8f7      	bhi.n	8003e38 <HAL_Delay+0x28>
  {
  }
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000020 	.word	0x20000020

08003e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <__NVIC_SetPriorityGrouping+0x44>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e74:	4013      	ands	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e8a:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <__NVIC_SetPriorityGrouping+0x44>)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	60d3      	str	r3, [r2, #12]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
 8003eaa:	f003 0307 	and.w	r3, r3, #7
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	db0b      	blt.n	8003ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	f003 021f 	and.w	r2, r3, #31
 8003ed4:	4907      	ldr	r1, [pc, #28]	; (8003ef4 <__NVIC_EnableIRQ+0x38>)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2001      	movs	r0, #1
 8003ede:	fa00 f202 	lsl.w	r2, r0, r2
 8003ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	e000e100 	.word	0xe000e100

08003ef8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	db12      	blt.n	8003f30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	f003 021f 	and.w	r2, r3, #31
 8003f10:	490a      	ldr	r1, [pc, #40]	; (8003f3c <__NVIC_DisableIRQ+0x44>)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2001      	movs	r0, #1
 8003f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1e:	3320      	adds	r3, #32
 8003f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f24:	f3bf 8f4f 	dsb	sy
}
 8003f28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f2a:	f3bf 8f6f 	isb	sy
}
 8003f2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000e100 	.word	0xe000e100

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	; (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	; (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	; 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf28      	it	cs
 8003fb2:	2304      	movcs	r3, #4
 8003fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d902      	bls.n	8003fc4 <NVIC_EncodePriority+0x30>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3b03      	subs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <NVIC_EncodePriority+0x32>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	4313      	orrs	r3, r2
         );
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	; 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800400c:	d301      	bcc.n	8004012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400e:	2301      	movs	r3, #1
 8004010:	e00f      	b.n	8004032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <SysTick_Config+0x40>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3b01      	subs	r3, #1
 8004018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401a:	210f      	movs	r1, #15
 800401c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004020:	f7ff ff8e 	bl	8003f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <SysTick_Config+0x40>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <SysTick_Config+0x40>)
 800402c:	2207      	movs	r2, #7
 800402e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	e000e010 	.word	0xe000e010

08004040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ff05 	bl	8003e58 <__NVIC_SetPriorityGrouping>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	4603      	mov	r3, r0
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004068:	f7ff ff1a 	bl	8003ea0 <__NVIC_GetPriorityGrouping>
 800406c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	6978      	ldr	r0, [r7, #20]
 8004074:	f7ff ff8e 	bl	8003f94 <NVIC_EncodePriority>
 8004078:	4602      	mov	r2, r0
 800407a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff5d 	bl	8003f40 <__NVIC_SetPriority>
}
 8004086:	bf00      	nop
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	4603      	mov	r3, r0
 8004096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff ff0d 	bl	8003ebc <__NVIC_EnableIRQ>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	4603      	mov	r3, r0
 80040b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80040b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ff1d 	bl	8003ef8 <__NVIC_DisableIRQ>
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff ff94 	bl	8003ffc <SysTick_Config>
 80040d4:	4603      	mov	r3, r0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80040de:	b480      	push	{r7}
 80040e0:	b087      	sub	sp, #28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	460b      	mov	r3, r1
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80040f0:	7afb      	ldrb	r3, [r7, #11]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d103      	bne.n	80040fe <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	605a      	str	r2, [r3, #4]
      break;
 80040fc:	e002      	b.n	8004104 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
      break;
 8004102:	bf00      	nop
  }

  return status;
 8004104:	7dfb      	ldrb	r3, [r7, #23]
}
 8004106:	4618      	mov	r0, r3
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e003      	b.n	800412e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800412c:	2300      	movs	r3, #0
  }
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	0c1b      	lsrs	r3, r3, #16
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	2201      	movs	r2, #1
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <HAL_EXTI_IRQHandler+0x5c>)
 8004166:	4413      	add	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4013      	ands	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4798      	blx	r3
    }
  }
}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40010414 	.word	0x40010414

0800419c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041aa:	e17f      	b.n	80044ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	2101      	movs	r1, #1
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	fa01 f303 	lsl.w	r3, r1, r3
 80041b8:	4013      	ands	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8171 	beq.w	80044a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d005      	beq.n	80041dc <HAL_GPIO_Init+0x40>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d130      	bne.n	800423e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	2203      	movs	r2, #3
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004212:	2201      	movs	r2, #1
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4013      	ands	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	f003 0201 	and.w	r2, r3, #1
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b03      	cmp	r3, #3
 8004248:	d118      	bne.n	800427c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004250:	2201      	movs	r2, #1
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	08db      	lsrs	r3, r3, #3
 8004266:	f003 0201 	and.w	r2, r3, #1
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b03      	cmp	r3, #3
 8004286:	d017      	beq.n	80042b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	2203      	movs	r2, #3
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d123      	bne.n	800430c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	08da      	lsrs	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3208      	adds	r2, #8
 80042cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	220f      	movs	r2, #15
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	08da      	lsrs	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3208      	adds	r2, #8
 8004306:	6939      	ldr	r1, [r7, #16]
 8004308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2203      	movs	r2, #3
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0203 	and.w	r2, r3, #3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80ac 	beq.w	80044a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434e:	4b5f      	ldr	r3, [pc, #380]	; (80044cc <HAL_GPIO_Init+0x330>)
 8004350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004352:	4a5e      	ldr	r2, [pc, #376]	; (80044cc <HAL_GPIO_Init+0x330>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	6613      	str	r3, [r2, #96]	; 0x60
 800435a:	4b5c      	ldr	r3, [pc, #368]	; (80044cc <HAL_GPIO_Init+0x330>)
 800435c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004366:	4a5a      	ldr	r2, [pc, #360]	; (80044d0 <HAL_GPIO_Init+0x334>)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	089b      	lsrs	r3, r3, #2
 800436c:	3302      	adds	r3, #2
 800436e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004372:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	220f      	movs	r2, #15
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004390:	d025      	beq.n	80043de <HAL_GPIO_Init+0x242>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a4f      	ldr	r2, [pc, #316]	; (80044d4 <HAL_GPIO_Init+0x338>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01f      	beq.n	80043da <HAL_GPIO_Init+0x23e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a4e      	ldr	r2, [pc, #312]	; (80044d8 <HAL_GPIO_Init+0x33c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d019      	beq.n	80043d6 <HAL_GPIO_Init+0x23a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a4d      	ldr	r2, [pc, #308]	; (80044dc <HAL_GPIO_Init+0x340>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_GPIO_Init+0x236>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a4c      	ldr	r2, [pc, #304]	; (80044e0 <HAL_GPIO_Init+0x344>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00d      	beq.n	80043ce <HAL_GPIO_Init+0x232>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a4b      	ldr	r2, [pc, #300]	; (80044e4 <HAL_GPIO_Init+0x348>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d007      	beq.n	80043ca <HAL_GPIO_Init+0x22e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a4a      	ldr	r2, [pc, #296]	; (80044e8 <HAL_GPIO_Init+0x34c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d101      	bne.n	80043c6 <HAL_GPIO_Init+0x22a>
 80043c2:	2306      	movs	r3, #6
 80043c4:	e00c      	b.n	80043e0 <HAL_GPIO_Init+0x244>
 80043c6:	2307      	movs	r3, #7
 80043c8:	e00a      	b.n	80043e0 <HAL_GPIO_Init+0x244>
 80043ca:	2305      	movs	r3, #5
 80043cc:	e008      	b.n	80043e0 <HAL_GPIO_Init+0x244>
 80043ce:	2304      	movs	r3, #4
 80043d0:	e006      	b.n	80043e0 <HAL_GPIO_Init+0x244>
 80043d2:	2303      	movs	r3, #3
 80043d4:	e004      	b.n	80043e0 <HAL_GPIO_Init+0x244>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e002      	b.n	80043e0 <HAL_GPIO_Init+0x244>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_GPIO_Init+0x244>
 80043de:	2300      	movs	r3, #0
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	f002 0203 	and.w	r2, r2, #3
 80043e6:	0092      	lsls	r2, r2, #2
 80043e8:	4093      	lsls	r3, r2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043f0:	4937      	ldr	r1, [pc, #220]	; (80044d0 <HAL_GPIO_Init+0x334>)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	089b      	lsrs	r3, r3, #2
 80043f6:	3302      	adds	r3, #2
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043fe:	4b3b      	ldr	r3, [pc, #236]	; (80044ec <HAL_GPIO_Init+0x350>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	43db      	mvns	r3, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4013      	ands	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004422:	4a32      	ldr	r2, [pc, #200]	; (80044ec <HAL_GPIO_Init+0x350>)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004428:	4b30      	ldr	r3, [pc, #192]	; (80044ec <HAL_GPIO_Init+0x350>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	43db      	mvns	r3, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800444c:	4a27      	ldr	r2, [pc, #156]	; (80044ec <HAL_GPIO_Init+0x350>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004452:	4b26      	ldr	r3, [pc, #152]	; (80044ec <HAL_GPIO_Init+0x350>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	43db      	mvns	r3, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004476:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <HAL_GPIO_Init+0x350>)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <HAL_GPIO_Init+0x350>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	43db      	mvns	r3, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4013      	ands	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044a0:	4a12      	ldr	r2, [pc, #72]	; (80044ec <HAL_GPIO_Init+0x350>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	3301      	adds	r3, #1
 80044aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f47f ae78 	bne.w	80041ac <HAL_GPIO_Init+0x10>
  }
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40010000 	.word	0x40010000
 80044d4:	48000400 	.word	0x48000400
 80044d8:	48000800 	.word	0x48000800
 80044dc:	48000c00 	.word	0x48000c00
 80044e0:	48001000 	.word	0x48001000
 80044e4:	48001400 	.word	0x48001400
 80044e8:	48001800 	.word	0x48001800
 80044ec:	40010400 	.word	0x40010400

080044f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80044fe:	e0cd      	b.n	800469c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004500:	2201      	movs	r2, #1
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	4013      	ands	r3, r2
 800450c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80c0 	beq.w	8004696 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004516:	4a68      	ldr	r2, [pc, #416]	; (80046b8 <HAL_GPIO_DeInit+0x1c8>)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	3302      	adds	r3, #2
 800451e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004522:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	220f      	movs	r2, #15
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4013      	ands	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800453e:	d025      	beq.n	800458c <HAL_GPIO_DeInit+0x9c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a5e      	ldr	r2, [pc, #376]	; (80046bc <HAL_GPIO_DeInit+0x1cc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d01f      	beq.n	8004588 <HAL_GPIO_DeInit+0x98>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a5d      	ldr	r2, [pc, #372]	; (80046c0 <HAL_GPIO_DeInit+0x1d0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d019      	beq.n	8004584 <HAL_GPIO_DeInit+0x94>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a5c      	ldr	r2, [pc, #368]	; (80046c4 <HAL_GPIO_DeInit+0x1d4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d013      	beq.n	8004580 <HAL_GPIO_DeInit+0x90>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a5b      	ldr	r2, [pc, #364]	; (80046c8 <HAL_GPIO_DeInit+0x1d8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00d      	beq.n	800457c <HAL_GPIO_DeInit+0x8c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a5a      	ldr	r2, [pc, #360]	; (80046cc <HAL_GPIO_DeInit+0x1dc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <HAL_GPIO_DeInit+0x88>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a59      	ldr	r2, [pc, #356]	; (80046d0 <HAL_GPIO_DeInit+0x1e0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_GPIO_DeInit+0x84>
 8004570:	2306      	movs	r3, #6
 8004572:	e00c      	b.n	800458e <HAL_GPIO_DeInit+0x9e>
 8004574:	2307      	movs	r3, #7
 8004576:	e00a      	b.n	800458e <HAL_GPIO_DeInit+0x9e>
 8004578:	2305      	movs	r3, #5
 800457a:	e008      	b.n	800458e <HAL_GPIO_DeInit+0x9e>
 800457c:	2304      	movs	r3, #4
 800457e:	e006      	b.n	800458e <HAL_GPIO_DeInit+0x9e>
 8004580:	2303      	movs	r3, #3
 8004582:	e004      	b.n	800458e <HAL_GPIO_DeInit+0x9e>
 8004584:	2302      	movs	r3, #2
 8004586:	e002      	b.n	800458e <HAL_GPIO_DeInit+0x9e>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_GPIO_DeInit+0x9e>
 800458c:	2300      	movs	r3, #0
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	f002 0203 	and.w	r2, r2, #3
 8004594:	0092      	lsls	r2, r2, #2
 8004596:	4093      	lsls	r3, r2
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	429a      	cmp	r2, r3
 800459c:	d132      	bne.n	8004604 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800459e:	4b4d      	ldr	r3, [pc, #308]	; (80046d4 <HAL_GPIO_DeInit+0x1e4>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	494b      	ldr	r1, [pc, #300]	; (80046d4 <HAL_GPIO_DeInit+0x1e4>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80045ac:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <HAL_GPIO_DeInit+0x1e4>)
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	4947      	ldr	r1, [pc, #284]	; (80046d4 <HAL_GPIO_DeInit+0x1e4>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80045ba:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <HAL_GPIO_DeInit+0x1e4>)
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	4944      	ldr	r1, [pc, #272]	; (80046d4 <HAL_GPIO_DeInit+0x1e4>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80045c8:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <HAL_GPIO_DeInit+0x1e4>)
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	4940      	ldr	r1, [pc, #256]	; (80046d4 <HAL_GPIO_DeInit+0x1e4>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	220f      	movs	r2, #15
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80045e6:	4a34      	ldr	r2, [pc, #208]	; (80046b8 <HAL_GPIO_DeInit+0x1c8>)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	3302      	adds	r3, #2
 80045ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	43da      	mvns	r2, r3
 80045f6:	4830      	ldr	r0, [pc, #192]	; (80046b8 <HAL_GPIO_DeInit+0x1c8>)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	400a      	ands	r2, r1
 80045fe:	3302      	adds	r3, #2
 8004600:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	2103      	movs	r1, #3
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	08da      	lsrs	r2, r3, #3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3208      	adds	r2, #8
 8004620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	220f      	movs	r2, #15
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	08d2      	lsrs	r2, r2, #3
 8004638:	4019      	ands	r1, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3208      	adds	r2, #8
 800463e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	2103      	movs	r1, #3
 800464c:	fa01 f303 	lsl.w	r3, r1, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	401a      	ands	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	2101      	movs	r1, #1
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	fa01 f303 	lsl.w	r3, r1, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	401a      	ands	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	2103      	movs	r1, #3
 8004676:	fa01 f303 	lsl.w	r3, r1, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	401a      	ands	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004686:	2101      	movs	r1, #1
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	401a      	ands	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	3301      	adds	r3, #1
 800469a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f47f af2b 	bne.w	8004500 <HAL_GPIO_DeInit+0x10>
  }
}
 80046aa:	bf00      	nop
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40010000 	.word	0x40010000
 80046bc:	48000400 	.word	0x48000400
 80046c0:	48000800 	.word	0x48000800
 80046c4:	48000c00 	.word	0x48000c00
 80046c8:	48001000 	.word	0x48001000
 80046cc:	48001400 	.word	0x48001400
 80046d0:	48001800 	.word	0x48001800
 80046d4:	40010400 	.word	0x40010400

080046d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	887b      	ldrh	r3, [r7, #2]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
 80046f4:	e001      	b.n	80046fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	807b      	strh	r3, [r7, #2]
 8004714:	4613      	mov	r3, r2
 8004716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004718:	787b      	ldrb	r3, [r7, #1]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800471e:	887a      	ldrh	r2, [r7, #2]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004724:	e002      	b.n	800472c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800474a:	887a      	ldrh	r2, [r7, #2]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4013      	ands	r3, r2
 8004750:	041a      	lsls	r2, r3, #16
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	43d9      	mvns	r1, r3
 8004756:	887b      	ldrh	r3, [r7, #2]
 8004758:	400b      	ands	r3, r1
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e081      	b.n	8004882 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fe fcfc 	bl	8003190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2224      	movs	r2, #36	; 0x24
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0201 	bic.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d107      	bne.n	80047e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047e2:	609a      	str	r2, [r3, #8]
 80047e4:	e006      	b.n	80047f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d104      	bne.n	8004806 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004804:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004818:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004828:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69d9      	ldr	r1, [r3, #28]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1a      	ldr	r2, [r3, #32]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b20      	cmp	r3, #32
 800489e:	d138      	bne.n	8004912 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e032      	b.n	8004914 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2224      	movs	r2, #36	; 0x24
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b20      	cmp	r3, #32
 8004934:	d139      	bne.n	80049aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004940:	2302      	movs	r3, #2
 8004942:	e033      	b.n	80049ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2224      	movs	r2, #36	; 0x24
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0201 	bic.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004972:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e000      	b.n	80049ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
  }
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40007000 	.word	0x40007000

080049d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e2:	d130      	bne.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80049e4:	4b23      	ldr	r3, [pc, #140]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f0:	d038      	beq.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049fa:	4a1e      	ldr	r2, [pc, #120]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a02:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2232      	movs	r2, #50	; 0x32
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	0c9b      	lsrs	r3, r3, #18
 8004a14:	3301      	adds	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a18:	e002      	b.n	8004a20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a20:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d102      	bne.n	8004a34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f2      	bne.n	8004a1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a34:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a40:	d110      	bne.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e00f      	b.n	8004a66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a52:	d007      	beq.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a5c:	4a05      	ldr	r2, [pc, #20]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40007000 	.word	0x40007000
 8004a78:	20000018 	.word	0x20000018
 8004a7c:	431bde83 	.word	0x431bde83

08004a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e3ca      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a92:	4b97      	ldr	r3, [pc, #604]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a9c:	4b94      	ldr	r3, [pc, #592]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0310 	and.w	r3, r3, #16
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80e4 	beq.w	8004c7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <HAL_RCC_OscConfig+0x4a>
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	f040 808b 	bne.w	8004bd8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	f040 8087 	bne.w	8004bd8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aca:	4b89      	ldr	r3, [pc, #548]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x62>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e3a2      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1a      	ldr	r2, [r3, #32]
 8004ae6:	4b82      	ldr	r3, [pc, #520]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d004      	beq.n	8004afc <HAL_RCC_OscConfig+0x7c>
 8004af2:	4b7f      	ldr	r3, [pc, #508]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004afa:	e005      	b.n	8004b08 <HAL_RCC_OscConfig+0x88>
 8004afc:	4b7c      	ldr	r3, [pc, #496]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b02:	091b      	lsrs	r3, r3, #4
 8004b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d223      	bcs.n	8004b54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fd55 	bl	80055c0 <RCC_SetFlashLatencyFromMSIRange>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e383      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b20:	4b73      	ldr	r3, [pc, #460]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a72      	ldr	r2, [pc, #456]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b26:	f043 0308 	orr.w	r3, r3, #8
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	4b70      	ldr	r3, [pc, #448]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	496d      	ldr	r1, [pc, #436]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b3e:	4b6c      	ldr	r3, [pc, #432]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	4968      	ldr	r1, [pc, #416]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	604b      	str	r3, [r1, #4]
 8004b52:	e025      	b.n	8004ba0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b54:	4b66      	ldr	r3, [pc, #408]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a65      	ldr	r2, [pc, #404]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b5a:	f043 0308 	orr.w	r3, r3, #8
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	4b63      	ldr	r3, [pc, #396]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	4960      	ldr	r1, [pc, #384]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b72:	4b5f      	ldr	r3, [pc, #380]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	495b      	ldr	r1, [pc, #364]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fd15 	bl	80055c0 <RCC_SetFlashLatencyFromMSIRange>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e343      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ba0:	f000 fc4a 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b52      	ldr	r3, [pc, #328]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	091b      	lsrs	r3, r3, #4
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	4950      	ldr	r1, [pc, #320]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbc:	4a4e      	ldr	r2, [pc, #312]	; (8004cf8 <HAL_RCC_OscConfig+0x278>)
 8004bbe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bc0:	4b4e      	ldr	r3, [pc, #312]	; (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff f8c7 	bl	8003d58 <HAL_InitTick>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d052      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	e327      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d032      	beq.n	8004c46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004be0:	4b43      	ldr	r3, [pc, #268]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a42      	ldr	r2, [pc, #264]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bec:	f7ff f904 	bl	8003df8 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bf4:	f7ff f900 	bl	8003df8 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e310      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c06:	4b3a      	ldr	r3, [pc, #232]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c12:	4b37      	ldr	r3, [pc, #220]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a36      	ldr	r2, [pc, #216]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c18:	f043 0308 	orr.w	r3, r3, #8
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	4b34      	ldr	r3, [pc, #208]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	4931      	ldr	r1, [pc, #196]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c30:	4b2f      	ldr	r3, [pc, #188]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	492c      	ldr	r1, [pc, #176]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	604b      	str	r3, [r1, #4]
 8004c44:	e01a      	b.n	8004c7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c46:	4b2a      	ldr	r3, [pc, #168]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a29      	ldr	r2, [pc, #164]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c52:	f7ff f8d1 	bl	8003df8 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c5a:	f7ff f8cd 	bl	8003df8 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e2dd      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c6c:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f0      	bne.n	8004c5a <HAL_RCC_OscConfig+0x1da>
 8004c78:	e000      	b.n	8004c7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d074      	beq.n	8004d72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d005      	beq.n	8004c9a <HAL_RCC_OscConfig+0x21a>
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b0c      	cmp	r3, #12
 8004c92:	d10e      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d10b      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9a:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d064      	beq.n	8004d70 <HAL_RCC_OscConfig+0x2f0>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d160      	bne.n	8004d70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e2ba      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cba:	d106      	bne.n	8004cca <HAL_RCC_OscConfig+0x24a>
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0b      	ldr	r2, [pc, #44]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	e026      	b.n	8004d18 <HAL_RCC_OscConfig+0x298>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd2:	d115      	bne.n	8004d00 <HAL_RCC_OscConfig+0x280>
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a05      	ldr	r2, [pc, #20]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a02      	ldr	r2, [pc, #8]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	e014      	b.n	8004d18 <HAL_RCC_OscConfig+0x298>
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	0800d1fc 	.word	0x0800d1fc
 8004cf8:	20000018 	.word	0x20000018
 8004cfc:	2000001c 	.word	0x2000001c
 8004d00:	4ba0      	ldr	r3, [pc, #640]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a9f      	ldr	r2, [pc, #636]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4b9d      	ldr	r3, [pc, #628]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a9c      	ldr	r2, [pc, #624]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d013      	beq.n	8004d48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7ff f86a 	bl	8003df8 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d28:	f7ff f866 	bl	8003df8 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b64      	cmp	r3, #100	; 0x64
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e276      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d3a:	4b92      	ldr	r3, [pc, #584]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x2a8>
 8004d46:	e014      	b.n	8004d72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7ff f856 	bl	8003df8 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d50:	f7ff f852 	bl	8003df8 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	; 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e262      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d62:	4b88      	ldr	r3, [pc, #544]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x2d0>
 8004d6e:	e000      	b.n	8004d72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d060      	beq.n	8004e40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_OscConfig+0x310>
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d119      	bne.n	8004dbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d116      	bne.n	8004dbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d90:	4b7c      	ldr	r3, [pc, #496]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_RCC_OscConfig+0x328>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e23f      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da8:	4b76      	ldr	r3, [pc, #472]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	4973      	ldr	r1, [pc, #460]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dbc:	e040      	b.n	8004e40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d023      	beq.n	8004e0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc6:	4b6f      	ldr	r3, [pc, #444]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a6e      	ldr	r2, [pc, #440]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd2:	f7ff f811 	bl	8003df8 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dda:	f7ff f80d 	bl	8003df8 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e21d      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dec:	4b65      	ldr	r3, [pc, #404]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df8:	4b62      	ldr	r3, [pc, #392]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	061b      	lsls	r3, r3, #24
 8004e06:	495f      	ldr	r1, [pc, #380]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	604b      	str	r3, [r1, #4]
 8004e0c:	e018      	b.n	8004e40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0e:	4b5d      	ldr	r3, [pc, #372]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a5c      	ldr	r2, [pc, #368]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1a:	f7fe ffed 	bl	8003df8 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e22:	f7fe ffe9 	bl	8003df8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e1f9      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e34:	4b53      	ldr	r3, [pc, #332]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f0      	bne.n	8004e22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d03c      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01c      	beq.n	8004e8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e54:	4b4b      	ldr	r3, [pc, #300]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5a:	4a4a      	ldr	r2, [pc, #296]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fe ffc8 	bl	8003df8 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6c:	f7fe ffc4 	bl	8003df8 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e1d4      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e7e:	4b41      	ldr	r3, [pc, #260]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ef      	beq.n	8004e6c <HAL_RCC_OscConfig+0x3ec>
 8004e8c:	e01b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8e:	4b3d      	ldr	r3, [pc, #244]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e94:	4a3b      	ldr	r2, [pc, #236]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e96:	f023 0301 	bic.w	r3, r3, #1
 8004e9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9e:	f7fe ffab 	bl	8003df8 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea6:	f7fe ffa7 	bl	8003df8 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e1b7      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eb8:	4b32      	ldr	r3, [pc, #200]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1ef      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80a6 	beq.w	8005020 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ed8:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10d      	bne.n	8004f00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee4:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	4a26      	ldr	r2, [pc, #152]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eee:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef0:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004efc:	2301      	movs	r3, #1
 8004efe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f00:	4b21      	ldr	r3, [pc, #132]	; (8004f88 <HAL_RCC_OscConfig+0x508>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d118      	bne.n	8004f3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f0c:	4b1e      	ldr	r3, [pc, #120]	; (8004f88 <HAL_RCC_OscConfig+0x508>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <HAL_RCC_OscConfig+0x508>)
 8004f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f18:	f7fe ff6e 	bl	8003df8 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f20:	f7fe ff6a 	bl	8003df8 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e17a      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <HAL_RCC_OscConfig+0x508>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d108      	bne.n	8004f58 <HAL_RCC_OscConfig+0x4d8>
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f56:	e029      	b.n	8004fac <HAL_RCC_OscConfig+0x52c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b05      	cmp	r3, #5
 8004f5e:	d115      	bne.n	8004f8c <HAL_RCC_OscConfig+0x50c>
 8004f60:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f68:	f043 0304 	orr.w	r3, r3, #4
 8004f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	4a03      	ldr	r2, [pc, #12]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f80:	e014      	b.n	8004fac <HAL_RCC_OscConfig+0x52c>
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40007000 	.word	0x40007000
 8004f8c:	4b9c      	ldr	r3, [pc, #624]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f92:	4a9b      	ldr	r2, [pc, #620]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f9c:	4b98      	ldr	r3, [pc, #608]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	4a97      	ldr	r2, [pc, #604]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d016      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fe ff20 	bl	8003df8 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fbc:	f7fe ff1c 	bl	8003df8 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e12a      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd2:	4b8b      	ldr	r3, [pc, #556]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ed      	beq.n	8004fbc <HAL_RCC_OscConfig+0x53c>
 8004fe0:	e015      	b.n	800500e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe2:	f7fe ff09 	bl	8003df8 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fe8:	e00a      	b.n	8005000 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fea:	f7fe ff05 	bl	8003df8 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e113      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005000:	4b7f      	ldr	r3, [pc, #508]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ed      	bne.n	8004fea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800500e:	7ffb      	ldrb	r3, [r7, #31]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005014:	4b7a      	ldr	r3, [pc, #488]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	4a79      	ldr	r2, [pc, #484]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80fe 	beq.w	8005226 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	2b02      	cmp	r3, #2
 8005030:	f040 80d0 	bne.w	80051d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005034:	4b72      	ldr	r3, [pc, #456]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f003 0203 	and.w	r2, r3, #3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	429a      	cmp	r2, r3
 8005046:	d130      	bne.n	80050aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	3b01      	subs	r3, #1
 8005054:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005056:	429a      	cmp	r2, r3
 8005058:	d127      	bne.n	80050aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005064:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d11f      	bne.n	80050aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005074:	2a07      	cmp	r2, #7
 8005076:	bf14      	ite	ne
 8005078:	2201      	movne	r2, #1
 800507a:	2200      	moveq	r2, #0
 800507c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800507e:	4293      	cmp	r3, r2
 8005080:	d113      	bne.n	80050aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	3b01      	subs	r3, #1
 8005090:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d109      	bne.n	80050aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	3b01      	subs	r3, #1
 80050a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d06e      	beq.n	8005188 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d069      	beq.n	8005184 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050b0:	4b53      	ldr	r3, [pc, #332]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050bc:	4b50      	ldr	r3, [pc, #320]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0ad      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050cc:	4b4c      	ldr	r3, [pc, #304]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a4b      	ldr	r2, [pc, #300]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 80050d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050d8:	f7fe fe8e 	bl	8003df8 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fe fe8a 	bl	8003df8 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e09a      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f2:	4b43      	ldr	r3, [pc, #268]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050fe:	4b40      	ldr	r3, [pc, #256]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	4b40      	ldr	r3, [pc, #256]	; (8005204 <HAL_RCC_OscConfig+0x784>)
 8005104:	4013      	ands	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800510e:	3a01      	subs	r2, #1
 8005110:	0112      	lsls	r2, r2, #4
 8005112:	4311      	orrs	r1, r2
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005118:	0212      	lsls	r2, r2, #8
 800511a:	4311      	orrs	r1, r2
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005120:	0852      	lsrs	r2, r2, #1
 8005122:	3a01      	subs	r2, #1
 8005124:	0552      	lsls	r2, r2, #21
 8005126:	4311      	orrs	r1, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800512c:	0852      	lsrs	r2, r2, #1
 800512e:	3a01      	subs	r2, #1
 8005130:	0652      	lsls	r2, r2, #25
 8005132:	4311      	orrs	r1, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005138:	0912      	lsrs	r2, r2, #4
 800513a:	0452      	lsls	r2, r2, #17
 800513c:	430a      	orrs	r2, r1
 800513e:	4930      	ldr	r1, [pc, #192]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8005140:	4313      	orrs	r3, r2
 8005142:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005144:	4b2e      	ldr	r3, [pc, #184]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2d      	ldr	r2, [pc, #180]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 800514a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800514e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005150:	4b2b      	ldr	r3, [pc, #172]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a2a      	ldr	r2, [pc, #168]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8005156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800515a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800515c:	f7fe fe4c 	bl	8003df8 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005164:	f7fe fe48 	bl	8003df8 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e058      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005176:	4b22      	ldr	r3, [pc, #136]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005182:	e050      	b.n	8005226 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e04f      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005188:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d148      	bne.n	8005226 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005194:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a19      	ldr	r2, [pc, #100]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 800519a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800519e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051a0:	4b17      	ldr	r3, [pc, #92]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4a16      	ldr	r2, [pc, #88]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 80051a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051ac:	f7fe fe24 	bl	8003df8 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fe fe20 	bl	8003df8 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e030      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c6:	4b0e      	ldr	r3, [pc, #56]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0x734>
 80051d2:	e028      	b.n	8005226 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d023      	beq.n	8005222 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051da:	4b09      	ldr	r3, [pc, #36]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a08      	ldr	r2, [pc, #32]	; (8005200 <HAL_RCC_OscConfig+0x780>)
 80051e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e6:	f7fe fe07 	bl	8003df8 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ec:	e00c      	b.n	8005208 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ee:	f7fe fe03 	bl	8003df8 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d905      	bls.n	8005208 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e013      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
 8005200:	40021000 	.word	0x40021000
 8005204:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005208:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_RCC_OscConfig+0x7b0>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1ec      	bne.n	80051ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005214:	4b06      	ldr	r3, [pc, #24]	; (8005230 <HAL_RCC_OscConfig+0x7b0>)
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	4905      	ldr	r1, [pc, #20]	; (8005230 <HAL_RCC_OscConfig+0x7b0>)
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_RCC_OscConfig+0x7b4>)
 800521c:	4013      	ands	r3, r2
 800521e:	60cb      	str	r3, [r1, #12]
 8005220:	e001      	b.n	8005226 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40021000 	.word	0x40021000
 8005234:	feeefffc 	.word	0xfeeefffc

08005238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0e7      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800524c:	4b75      	ldr	r3, [pc, #468]	; (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d910      	bls.n	800527c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b72      	ldr	r3, [pc, #456]	; (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 0207 	bic.w	r2, r3, #7
 8005262:	4970      	ldr	r1, [pc, #448]	; (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	4313      	orrs	r3, r2
 8005268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526a:	4b6e      	ldr	r3, [pc, #440]	; (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e0cf      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d010      	beq.n	80052aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	4b66      	ldr	r3, [pc, #408]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005294:	429a      	cmp	r2, r3
 8005296:	d908      	bls.n	80052aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005298:	4b63      	ldr	r3, [pc, #396]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4960      	ldr	r1, [pc, #384]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d04c      	beq.n	8005350 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d107      	bne.n	80052ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052be:	4b5a      	ldr	r3, [pc, #360]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d121      	bne.n	800530e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0a6      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d107      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052d6:	4b54      	ldr	r3, [pc, #336]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d115      	bne.n	800530e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e09a      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d107      	bne.n	80052fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052ee:	4b4e      	ldr	r3, [pc, #312]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e08e      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052fe:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e086      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800530e:	4b46      	ldr	r3, [pc, #280]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 0203 	bic.w	r2, r3, #3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4943      	ldr	r1, [pc, #268]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 800531c:	4313      	orrs	r3, r2
 800531e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005320:	f7fe fd6a 	bl	8003df8 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005326:	e00a      	b.n	800533e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005328:	f7fe fd66 	bl	8003df8 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	; 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e06e      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533e:	4b3a      	ldr	r3, [pc, #232]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 020c 	and.w	r2, r3, #12
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	429a      	cmp	r2, r3
 800534e:	d1eb      	bne.n	8005328 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d010      	beq.n	800537e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	4b31      	ldr	r3, [pc, #196]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005368:	429a      	cmp	r2, r3
 800536a:	d208      	bcs.n	800537e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800536c:	4b2e      	ldr	r3, [pc, #184]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	492b      	ldr	r1, [pc, #172]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800537e:	4b29      	ldr	r3, [pc, #164]	; (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d210      	bcs.n	80053ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538c:	4b25      	ldr	r3, [pc, #148]	; (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 0207 	bic.w	r2, r3, #7
 8005394:	4923      	ldr	r1, [pc, #140]	; (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539c:	4b21      	ldr	r3, [pc, #132]	; (8005424 <HAL_RCC_ClockConfig+0x1ec>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e036      	b.n	800541c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ba:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	4918      	ldr	r1, [pc, #96]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d009      	beq.n	80053ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053d8:	4b13      	ldr	r3, [pc, #76]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4910      	ldr	r1, [pc, #64]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053ec:	f000 f824 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 80053f0:	4602      	mov	r2, r0
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <HAL_RCC_ClockConfig+0x1f0>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	091b      	lsrs	r3, r3, #4
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	490b      	ldr	r1, [pc, #44]	; (800542c <HAL_RCC_ClockConfig+0x1f4>)
 80053fe:	5ccb      	ldrb	r3, [r1, r3]
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
 8005408:	4a09      	ldr	r2, [pc, #36]	; (8005430 <HAL_RCC_ClockConfig+0x1f8>)
 800540a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <HAL_RCC_ClockConfig+0x1fc>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe fca1 	bl	8003d58 <HAL_InitTick>
 8005416:	4603      	mov	r3, r0
 8005418:	72fb      	strb	r3, [r7, #11]

  return status;
 800541a:	7afb      	ldrb	r3, [r7, #11]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40022000 	.word	0x40022000
 8005428:	40021000 	.word	0x40021000
 800542c:	0800d1fc 	.word	0x0800d1fc
 8005430:	20000018 	.word	0x20000018
 8005434:	2000001c 	.word	0x2000001c

08005438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005438:	b480      	push	{r7}
 800543a:	b089      	sub	sp, #36	; 0x24
 800543c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	2300      	movs	r3, #0
 8005444:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005446:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 030c 	and.w	r3, r3, #12
 800544e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005450:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_GetSysClockFreq+0x34>
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d121      	bne.n	80054aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d11e      	bne.n	80054aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800546c:	4b34      	ldr	r3, [pc, #208]	; (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d107      	bne.n	8005488 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005478:	4b31      	ldr	r3, [pc, #196]	; (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 800547a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547e:	0a1b      	lsrs	r3, r3, #8
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	e005      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005488:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005494:	4a2b      	ldr	r2, [pc, #172]	; (8005544 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10d      	bne.n	80054c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054a8:	e00a      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d102      	bne.n	80054b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054b0:	4b25      	ldr	r3, [pc, #148]	; (8005548 <HAL_RCC_GetSysClockFreq+0x110>)
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	e004      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054bc:	4b23      	ldr	r3, [pc, #140]	; (800554c <HAL_RCC_GetSysClockFreq+0x114>)
 80054be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	d134      	bne.n	8005530 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054c6:	4b1e      	ldr	r3, [pc, #120]	; (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d003      	beq.n	80054de <HAL_RCC_GetSysClockFreq+0xa6>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d003      	beq.n	80054e4 <HAL_RCC_GetSysClockFreq+0xac>
 80054dc:	e005      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054de:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <HAL_RCC_GetSysClockFreq+0x110>)
 80054e0:	617b      	str	r3, [r7, #20]
      break;
 80054e2:	e005      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054e4:	4b19      	ldr	r3, [pc, #100]	; (800554c <HAL_RCC_GetSysClockFreq+0x114>)
 80054e6:	617b      	str	r3, [r7, #20]
      break;
 80054e8:	e002      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	617b      	str	r3, [r7, #20]
      break;
 80054ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054f0:	4b13      	ldr	r3, [pc, #76]	; (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	3301      	adds	r3, #1
 80054fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054fe:	4b10      	ldr	r3, [pc, #64]	; (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	fb03 f202 	mul.w	r2, r3, r2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005516:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <HAL_RCC_GetSysClockFreq+0x108>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	0e5b      	lsrs	r3, r3, #25
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	3301      	adds	r3, #1
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	fbb2 f3f3 	udiv	r3, r2, r3
 800552e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005530:	69bb      	ldr	r3, [r7, #24]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3724      	adds	r7, #36	; 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40021000 	.word	0x40021000
 8005544:	0800d214 	.word	0x0800d214
 8005548:	00f42400 	.word	0x00f42400
 800554c:	007a1200 	.word	0x007a1200

08005550 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <HAL_RCC_GetHCLKFreq+0x14>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000018 	.word	0x20000018

08005568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800556c:	f7ff fff0 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4904      	ldr	r1, [pc, #16]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40021000 	.word	0x40021000
 8005590:	0800d20c 	.word	0x0800d20c

08005594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005598:	f7ff ffda 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0adb      	lsrs	r3, r3, #11
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4904      	ldr	r1, [pc, #16]	; (80055bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40021000 	.word	0x40021000
 80055bc:	0800d20c 	.word	0x0800d20c

080055c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055cc:	4b2a      	ldr	r3, [pc, #168]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055d8:	f7ff f9ee 	bl	80049b8 <HAL_PWREx_GetVoltageRange>
 80055dc:	6178      	str	r0, [r7, #20]
 80055de:	e014      	b.n	800560a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055e0:	4b25      	ldr	r3, [pc, #148]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e4:	4a24      	ldr	r2, [pc, #144]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ea:	6593      	str	r3, [r2, #88]	; 0x58
 80055ec:	4b22      	ldr	r3, [pc, #136]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055f8:	f7ff f9de 	bl	80049b8 <HAL_PWREx_GetVoltageRange>
 80055fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055fe:	4b1e      	ldr	r3, [pc, #120]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005602:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005608:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005610:	d10b      	bne.n	800562a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b80      	cmp	r3, #128	; 0x80
 8005616:	d919      	bls.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2ba0      	cmp	r3, #160	; 0xa0
 800561c:	d902      	bls.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800561e:	2302      	movs	r3, #2
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e013      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005624:	2301      	movs	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	e010      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b80      	cmp	r3, #128	; 0x80
 800562e:	d902      	bls.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005630:	2303      	movs	r3, #3
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	e00a      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b80      	cmp	r3, #128	; 0x80
 800563a:	d102      	bne.n	8005642 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800563c:	2302      	movs	r3, #2
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	e004      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b70      	cmp	r3, #112	; 0x70
 8005646:	d101      	bne.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005648:	2301      	movs	r3, #1
 800564a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f023 0207 	bic.w	r2, r3, #7
 8005654:	4909      	ldr	r1, [pc, #36]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800565c:	4b07      	ldr	r3, [pc, #28]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d001      	beq.n	800566e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40021000 	.word	0x40021000
 800567c:	40022000 	.word	0x40022000

08005680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005688:	2300      	movs	r3, #0
 800568a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800568c:	2300      	movs	r3, #0
 800568e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005698:	2b00      	cmp	r3, #0
 800569a:	d041      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056a4:	d02a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056aa:	d824      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056b0:	d008      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056b6:	d81e      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056c0:	d010      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056c2:	e018      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056c4:	4b86      	ldr	r3, [pc, #536]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4a85      	ldr	r2, [pc, #532]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056d0:	e015      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3304      	adds	r3, #4
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fabb 	bl	8005c54 <RCCEx_PLLSAI1_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056e2:	e00c      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3320      	adds	r3, #32
 80056e8:	2100      	movs	r1, #0
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fba6 	bl	8005e3c <RCCEx_PLLSAI2_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056f4:	e003      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	74fb      	strb	r3, [r7, #19]
      break;
 80056fa:	e000      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80056fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056fe:	7cfb      	ldrb	r3, [r7, #19]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10b      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005704:	4b76      	ldr	r3, [pc, #472]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005712:	4973      	ldr	r1, [pc, #460]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800571a:	e001      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571c:	7cfb      	ldrb	r3, [r7, #19]
 800571e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d041      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005730:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005734:	d02a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005736:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800573a:	d824      	bhi.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800573c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005740:	d008      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005746:	d81e      	bhi.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800574c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005750:	d010      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005752:	e018      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005754:	4b62      	ldr	r3, [pc, #392]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	4a61      	ldr	r2, [pc, #388]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800575a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005760:	e015      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3304      	adds	r3, #4
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fa73 	bl	8005c54 <RCCEx_PLLSAI1_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005772:	e00c      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3320      	adds	r3, #32
 8005778:	2100      	movs	r1, #0
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fb5e 	bl	8005e3c <RCCEx_PLLSAI2_Config>
 8005780:	4603      	mov	r3, r0
 8005782:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005784:	e003      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	74fb      	strb	r3, [r7, #19]
      break;
 800578a:	e000      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800578c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578e:	7cfb      	ldrb	r3, [r7, #19]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005794:	4b52      	ldr	r3, [pc, #328]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057a2:	494f      	ldr	r1, [pc, #316]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057aa:	e001      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ac:	7cfb      	ldrb	r3, [r7, #19]
 80057ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80a0 	beq.w	80058fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057be:	2300      	movs	r3, #0
 80057c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057c2:	4b47      	ldr	r3, [pc, #284]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80057d2:	2300      	movs	r3, #0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00d      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d8:	4b41      	ldr	r3, [pc, #260]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057dc:	4a40      	ldr	r2, [pc, #256]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e2:	6593      	str	r3, [r2, #88]	; 0x58
 80057e4:	4b3e      	ldr	r3, [pc, #248]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057f0:	2301      	movs	r3, #1
 80057f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f4:	4b3b      	ldr	r3, [pc, #236]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a3a      	ldr	r2, [pc, #232]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005800:	f7fe fafa 	bl	8003df8 <HAL_GetTick>
 8005804:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005806:	e009      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005808:	f7fe faf6 	bl	8003df8 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d902      	bls.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	74fb      	strb	r3, [r7, #19]
        break;
 800581a:	e005      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800581c:	4b31      	ldr	r3, [pc, #196]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0ef      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005828:	7cfb      	ldrb	r3, [r7, #19]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d15c      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800582e:	4b2c      	ldr	r3, [pc, #176]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005838:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01f      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	429a      	cmp	r2, r3
 800584a:	d019      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800584c:	4b24      	ldr	r3, [pc, #144]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005856:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005858:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585e:	4a20      	ldr	r2, [pc, #128]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005868:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	4a1c      	ldr	r2, [pc, #112]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005878:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d016      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588a:	f7fe fab5 	bl	8003df8 <HAL_GetTick>
 800588e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005890:	e00b      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fe fab1 	bl	8003df8 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d902      	bls.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	74fb      	strb	r3, [r7, #19]
            break;
 80058a8:	e006      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058aa:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0ec      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10c      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058be:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ce:	4904      	ldr	r1, [pc, #16]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058d6:	e009      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058d8:	7cfb      	ldrb	r3, [r7, #19]
 80058da:	74bb      	strb	r3, [r7, #18]
 80058dc:	e006      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000
 80058e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	7cfb      	ldrb	r3, [r7, #19]
 80058ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058ec:	7c7b      	ldrb	r3, [r7, #17]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d105      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f2:	4b9e      	ldr	r3, [pc, #632]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f6:	4a9d      	ldr	r2, [pc, #628]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800590a:	4b98      	ldr	r3, [pc, #608]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005910:	f023 0203 	bic.w	r2, r3, #3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	4994      	ldr	r1, [pc, #592]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800592c:	4b8f      	ldr	r3, [pc, #572]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f023 020c 	bic.w	r2, r3, #12
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	498c      	ldr	r1, [pc, #560]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800594e:	4b87      	ldr	r3, [pc, #540]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	4983      	ldr	r1, [pc, #524]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005970:	4b7e      	ldr	r3, [pc, #504]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597e:	497b      	ldr	r1, [pc, #492]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005992:	4b76      	ldr	r3, [pc, #472]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a0:	4972      	ldr	r1, [pc, #456]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059b4:	4b6d      	ldr	r3, [pc, #436]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c2:	496a      	ldr	r1, [pc, #424]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059d6:	4b65      	ldr	r3, [pc, #404]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e4:	4961      	ldr	r1, [pc, #388]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059f8:	4b5c      	ldr	r3, [pc, #368]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a06:	4959      	ldr	r1, [pc, #356]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a1a:	4b54      	ldr	r3, [pc, #336]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	4950      	ldr	r1, [pc, #320]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a3c:	4b4b      	ldr	r3, [pc, #300]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	4948      	ldr	r1, [pc, #288]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a5e:	4b43      	ldr	r3, [pc, #268]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6c:	493f      	ldr	r1, [pc, #252]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d028      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a80:	4b3a      	ldr	r3, [pc, #232]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8e:	4937      	ldr	r1, [pc, #220]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a9e:	d106      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa0:	4b32      	ldr	r3, [pc, #200]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4a31      	ldr	r2, [pc, #196]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aaa:	60d3      	str	r3, [r2, #12]
 8005aac:	e011      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab6:	d10c      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3304      	adds	r3, #4
 8005abc:	2101      	movs	r1, #1
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f8c8 	bl	8005c54 <RCCEx_PLLSAI1_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ac8:	7cfb      	ldrb	r3, [r7, #19]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005ace:	7cfb      	ldrb	r3, [r7, #19]
 8005ad0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d028      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ade:	4b23      	ldr	r3, [pc, #140]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aec:	491f      	ldr	r1, [pc, #124]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005afc:	d106      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005afe:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	4a1a      	ldr	r2, [pc, #104]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b08:	60d3      	str	r3, [r2, #12]
 8005b0a:	e011      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b14:	d10c      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 f899 	bl	8005c54 <RCCEx_PLLSAI1_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b26:	7cfb      	ldrb	r3, [r7, #19]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005b2c:	7cfb      	ldrb	r3, [r7, #19]
 8005b2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d02b      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4a:	4908      	ldr	r1, [pc, #32]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b5a:	d109      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b5c:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	4a02      	ldr	r2, [pc, #8]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b66:	60d3      	str	r3, [r2, #12]
 8005b68:	e014      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005b6a:	bf00      	nop
 8005b6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b78:	d10c      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	2101      	movs	r1, #1
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 f867 	bl	8005c54 <RCCEx_PLLSAI1_Config>
 8005b86:	4603      	mov	r3, r0
 8005b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b8a:	7cfb      	ldrb	r3, [r7, #19]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005b90:	7cfb      	ldrb	r3, [r7, #19]
 8005b92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d02f      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ba0:	4b2b      	ldr	r3, [pc, #172]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bae:	4928      	ldr	r1, [pc, #160]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bbe:	d10d      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	2102      	movs	r1, #2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f844 	bl	8005c54 <RCCEx_PLLSAI1_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bd0:	7cfb      	ldrb	r3, [r7, #19]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d014      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005bd6:	7cfb      	ldrb	r3, [r7, #19]
 8005bd8:	74bb      	strb	r3, [r7, #18]
 8005bda:	e011      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be4:	d10c      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3320      	adds	r3, #32
 8005bea:	2102      	movs	r1, #2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 f925 	bl	8005e3c <RCCEx_PLLSAI2_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bf6:	7cfb      	ldrb	r3, [r7, #19]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005bfc:	7cfb      	ldrb	r3, [r7, #19]
 8005bfe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c0c:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c1a:	490d      	ldr	r1, [pc, #52]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c2e:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c3e:	4904      	ldr	r1, [pc, #16]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c46:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40021000 	.word	0x40021000

08005c54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c62:	4b75      	ldr	r3, [pc, #468]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d018      	beq.n	8005ca0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c6e:	4b72      	ldr	r3, [pc, #456]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f003 0203 	and.w	r2, r3, #3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d10d      	bne.n	8005c9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
       ||
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c86:	4b6c      	ldr	r3, [pc, #432]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
       ||
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d047      	beq.n	8005d2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
 8005c9e:	e044      	b.n	8005d2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d018      	beq.n	8005cda <RCCEx_PLLSAI1_Config+0x86>
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d825      	bhi.n	8005cf8 <RCCEx_PLLSAI1_Config+0xa4>
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d002      	beq.n	8005cb6 <RCCEx_PLLSAI1_Config+0x62>
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d009      	beq.n	8005cc8 <RCCEx_PLLSAI1_Config+0x74>
 8005cb4:	e020      	b.n	8005cf8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cb6:	4b60      	ldr	r3, [pc, #384]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d11d      	bne.n	8005cfe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cc6:	e01a      	b.n	8005cfe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cc8:	4b5b      	ldr	r3, [pc, #364]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d116      	bne.n	8005d02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cd8:	e013      	b.n	8005d02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cda:	4b57      	ldr	r3, [pc, #348]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10f      	bne.n	8005d06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ce6:	4b54      	ldr	r3, [pc, #336]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cf6:	e006      	b.n	8005d06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfc:	e004      	b.n	8005d08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e002      	b.n	8005d08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d02:	bf00      	nop
 8005d04:	e000      	b.n	8005d08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d06:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10d      	bne.n	8005d2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d0e:	4b4a      	ldr	r3, [pc, #296]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6819      	ldr	r1, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	430b      	orrs	r3, r1
 8005d24:	4944      	ldr	r1, [pc, #272]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d17d      	bne.n	8005e2c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d30:	4b41      	ldr	r3, [pc, #260]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a40      	ldr	r2, [pc, #256]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3c:	f7fe f85c 	bl	8003df8 <HAL_GetTick>
 8005d40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d42:	e009      	b.n	8005d58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d44:	f7fe f858 	bl	8003df8 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d902      	bls.n	8005d58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	73fb      	strb	r3, [r7, #15]
        break;
 8005d56:	e005      	b.n	8005d64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d58:	4b37      	ldr	r3, [pc, #220]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ef      	bne.n	8005d44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d160      	bne.n	8005e2c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d111      	bne.n	8005d94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d70:	4b31      	ldr	r3, [pc, #196]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6892      	ldr	r2, [r2, #8]
 8005d80:	0211      	lsls	r1, r2, #8
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	68d2      	ldr	r2, [r2, #12]
 8005d86:	0912      	lsrs	r2, r2, #4
 8005d88:	0452      	lsls	r2, r2, #17
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	492a      	ldr	r1, [pc, #168]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	610b      	str	r3, [r1, #16]
 8005d92:	e027      	b.n	8005de4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d112      	bne.n	8005dc0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d9a:	4b27      	ldr	r3, [pc, #156]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005da2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6892      	ldr	r2, [r2, #8]
 8005daa:	0211      	lsls	r1, r2, #8
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6912      	ldr	r2, [r2, #16]
 8005db0:	0852      	lsrs	r2, r2, #1
 8005db2:	3a01      	subs	r2, #1
 8005db4:	0552      	lsls	r2, r2, #21
 8005db6:	430a      	orrs	r2, r1
 8005db8:	491f      	ldr	r1, [pc, #124]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	610b      	str	r3, [r1, #16]
 8005dbe:	e011      	b.n	8005de4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dc0:	4b1d      	ldr	r3, [pc, #116]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005dc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6892      	ldr	r2, [r2, #8]
 8005dd0:	0211      	lsls	r1, r2, #8
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6952      	ldr	r2, [r2, #20]
 8005dd6:	0852      	lsrs	r2, r2, #1
 8005dd8:	3a01      	subs	r2, #1
 8005dda:	0652      	lsls	r2, r2, #25
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	4916      	ldr	r1, [pc, #88]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005de4:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df0:	f7fe f802 	bl	8003df8 <HAL_GetTick>
 8005df4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005df6:	e009      	b.n	8005e0c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005df8:	f7fd fffe 	bl	8003df8 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d902      	bls.n	8005e0c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	73fb      	strb	r3, [r7, #15]
          break;
 8005e0a:	e005      	b.n	8005e18 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0ef      	beq.n	8005df8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	4904      	ldr	r1, [pc, #16]	; (8005e38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40021000 	.word	0x40021000

08005e3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e4a:	4b6a      	ldr	r3, [pc, #424]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d018      	beq.n	8005e88 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e56:	4b67      	ldr	r3, [pc, #412]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0203 	and.w	r2, r3, #3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d10d      	bne.n	8005e82 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
       ||
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d009      	beq.n	8005e82 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005e6e:	4b61      	ldr	r3, [pc, #388]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
       ||
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d047      	beq.n	8005f12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	73fb      	strb	r3, [r7, #15]
 8005e86:	e044      	b.n	8005f12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d018      	beq.n	8005ec2 <RCCEx_PLLSAI2_Config+0x86>
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d825      	bhi.n	8005ee0 <RCCEx_PLLSAI2_Config+0xa4>
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d002      	beq.n	8005e9e <RCCEx_PLLSAI2_Config+0x62>
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d009      	beq.n	8005eb0 <RCCEx_PLLSAI2_Config+0x74>
 8005e9c:	e020      	b.n	8005ee0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e9e:	4b55      	ldr	r3, [pc, #340]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d11d      	bne.n	8005ee6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eae:	e01a      	b.n	8005ee6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005eb0:	4b50      	ldr	r3, [pc, #320]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d116      	bne.n	8005eea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ec0:	e013      	b.n	8005eea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ec2:	4b4c      	ldr	r3, [pc, #304]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10f      	bne.n	8005eee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ece:	4b49      	ldr	r3, [pc, #292]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d109      	bne.n	8005eee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ede:	e006      	b.n	8005eee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee4:	e004      	b.n	8005ef0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ee6:	bf00      	nop
 8005ee8:	e002      	b.n	8005ef0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005eee:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10d      	bne.n	8005f12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ef6:	4b3f      	ldr	r3, [pc, #252]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6819      	ldr	r1, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	4939      	ldr	r1, [pc, #228]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d167      	bne.n	8005fe8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f18:	4b36      	ldr	r3, [pc, #216]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a35      	ldr	r2, [pc, #212]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f24:	f7fd ff68 	bl	8003df8 <HAL_GetTick>
 8005f28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f2a:	e009      	b.n	8005f40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f2c:	f7fd ff64 	bl	8003df8 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d902      	bls.n	8005f40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f3e:	e005      	b.n	8005f4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f40:	4b2c      	ldr	r3, [pc, #176]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1ef      	bne.n	8005f2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d14a      	bne.n	8005fe8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d111      	bne.n	8005f7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f58:	4b26      	ldr	r3, [pc, #152]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6892      	ldr	r2, [r2, #8]
 8005f68:	0211      	lsls	r1, r2, #8
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68d2      	ldr	r2, [r2, #12]
 8005f6e:	0912      	lsrs	r2, r2, #4
 8005f70:	0452      	lsls	r2, r2, #17
 8005f72:	430a      	orrs	r2, r1
 8005f74:	491f      	ldr	r1, [pc, #124]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	614b      	str	r3, [r1, #20]
 8005f7a:	e011      	b.n	8005fa0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6892      	ldr	r2, [r2, #8]
 8005f8c:	0211      	lsls	r1, r2, #8
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6912      	ldr	r2, [r2, #16]
 8005f92:	0852      	lsrs	r2, r2, #1
 8005f94:	3a01      	subs	r2, #1
 8005f96:	0652      	lsls	r2, r2, #25
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	4916      	ldr	r1, [pc, #88]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005fa0:	4b14      	ldr	r3, [pc, #80]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005faa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fac:	f7fd ff24 	bl	8003df8 <HAL_GetTick>
 8005fb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fb2:	e009      	b.n	8005fc8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fb4:	f7fd ff20 	bl	8003df8 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d902      	bls.n	8005fc8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	73fb      	strb	r3, [r7, #15]
          break;
 8005fc6:	e005      	b.n	8005fd4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0ef      	beq.n	8005fb4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	4904      	ldr	r1, [pc, #16]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40021000 	.word	0x40021000

08005ff8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e095      	b.n	8006136 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d108      	bne.n	8006024 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601a:	d009      	beq.n	8006030 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	61da      	str	r2, [r3, #28]
 8006022:	e005      	b.n	8006030 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f877 	bl	800613e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006066:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006070:	d902      	bls.n	8006078 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e002      	b.n	800607e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800607c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006086:	d007      	beq.n	8006098 <HAL_SPI_Init+0xa0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006090:	d002      	beq.n	8006098 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	ea42 0103 	orr.w	r1, r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	0c1b      	lsrs	r3, r3, #16
 80060f4:	f003 0204 	and.w	r2, r3, #4
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006114:	ea42 0103 	orr.w	r1, r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b08a      	sub	sp, #40	; 0x28
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006160:	2301      	movs	r3, #1
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_SPI_TransmitReceive+0x26>
 8006174:	2302      	movs	r3, #2
 8006176:	e1fb      	b.n	8006570 <HAL_SPI_TransmitReceive+0x41e>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006180:	f7fd fe3a 	bl	8003df8 <HAL_GetTick>
 8006184:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800618c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006194:	887b      	ldrh	r3, [r7, #2]
 8006196:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006198:	887b      	ldrh	r3, [r7, #2]
 800619a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800619c:	7efb      	ldrb	r3, [r7, #27]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d00e      	beq.n	80061c0 <HAL_SPI_TransmitReceive+0x6e>
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a8:	d106      	bne.n	80061b8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <HAL_SPI_TransmitReceive+0x66>
 80061b2:	7efb      	ldrb	r3, [r7, #27]
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d003      	beq.n	80061c0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80061b8:	2302      	movs	r3, #2
 80061ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80061be:	e1cd      	b.n	800655c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0x80>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0x80>
 80061cc:	887b      	ldrh	r3, [r7, #2]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80061d8:	e1c0      	b.n	800655c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d003      	beq.n	80061ee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2205      	movs	r2, #5
 80061ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	887a      	ldrh	r2, [r7, #2]
 80061fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	887a      	ldrh	r2, [r7, #2]
 8006206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	887a      	ldrh	r2, [r7, #2]
 8006214:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	887a      	ldrh	r2, [r7, #2]
 800621a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006230:	d802      	bhi.n	8006238 <HAL_SPI_TransmitReceive+0xe6>
 8006232:	8a3b      	ldrh	r3, [r7, #16]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d908      	bls.n	800624a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006246:	605a      	str	r2, [r3, #4]
 8006248:	e007      	b.n	800625a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006258:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d007      	beq.n	8006278 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006280:	d97c      	bls.n	800637c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_SPI_TransmitReceive+0x13e>
 800628a:	8a7b      	ldrh	r3, [r7, #18]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d169      	bne.n	8006364 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	881a      	ldrh	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	1c9a      	adds	r2, r3, #2
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b4:	e056      	b.n	8006364 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d11b      	bne.n	80062fc <HAL_SPI_TransmitReceive+0x1aa>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d016      	beq.n	80062fc <HAL_SPI_TransmitReceive+0x1aa>
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d113      	bne.n	80062fc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	881a      	ldrh	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	1c9a      	adds	r2, r3, #2
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b01      	cmp	r3, #1
 8006308:	d11c      	bne.n	8006344 <HAL_SPI_TransmitReceive+0x1f2>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d016      	beq.n	8006344 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	b292      	uxth	r2, r2
 8006322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	1c9a      	adds	r2, r3, #2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006340:	2301      	movs	r3, #1
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006344:	f7fd fd58 	bl	8003df8 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006350:	429a      	cmp	r2, r3
 8006352:	d807      	bhi.n	8006364 <HAL_SPI_TransmitReceive+0x212>
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800635a:	d003      	beq.n	8006364 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006362:	e0fb      	b.n	800655c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1a3      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x164>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d19d      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x164>
 800637a:	e0df      	b.n	800653c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <HAL_SPI_TransmitReceive+0x23a>
 8006384:	8a7b      	ldrh	r3, [r7, #18]
 8006386:	2b01      	cmp	r3, #1
 8006388:	f040 80cb 	bne.w	8006522 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b01      	cmp	r3, #1
 8006394:	d912      	bls.n	80063bc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	881a      	ldrh	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	1c9a      	adds	r2, r3, #2
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b02      	subs	r3, #2
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ba:	e0b2      	b.n	8006522 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063e2:	e09e      	b.n	8006522 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d134      	bne.n	800645c <HAL_SPI_TransmitReceive+0x30a>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d02f      	beq.n	800645c <HAL_SPI_TransmitReceive+0x30a>
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d12c      	bne.n	800645c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	d912      	bls.n	8006432 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	881a      	ldrh	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	1c9a      	adds	r2, r3, #2
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006426:	b29b      	uxth	r3, r3
 8006428:	3b02      	subs	r3, #2
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006430:	e012      	b.n	8006458 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	330c      	adds	r3, #12
 800643c:	7812      	ldrb	r2, [r2, #0]
 800643e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b01      	cmp	r3, #1
 8006468:	d148      	bne.n	80064fc <HAL_SPI_TransmitReceive+0x3aa>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d042      	beq.n	80064fc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b01      	cmp	r3, #1
 8006480:	d923      	bls.n	80064ca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	b292      	uxth	r2, r2
 800648e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	1c9a      	adds	r2, r3, #2
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b02      	subs	r3, #2
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d81f      	bhi.n	80064f8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064c6:	605a      	str	r2, [r3, #4]
 80064c8:	e016      	b.n	80064f8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f103 020c 	add.w	r2, r3, #12
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	7812      	ldrb	r2, [r2, #0]
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064f8:	2301      	movs	r3, #1
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064fc:	f7fd fc7c 	bl	8003df8 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006508:	429a      	cmp	r2, r3
 800650a:	d803      	bhi.n	8006514 <HAL_SPI_TransmitReceive+0x3c2>
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006512:	d102      	bne.n	800651a <HAL_SPI_TransmitReceive+0x3c8>
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	2b00      	cmp	r3, #0
 8006518:	d103      	bne.n	8006522 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006520:	e01c      	b.n	800655c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	f47f af5b 	bne.w	80063e4 <HAL_SPI_TransmitReceive+0x292>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	f47f af54 	bne.w	80063e4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f945 	bl	80067d0 <SPI_EndRxTxTransaction>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d006      	beq.n	800655a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	661a      	str	r2, [r3, #96]	; 0x60
 8006558:	e000      	b.n	800655c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800655a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800656c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006570:	4618      	mov	r0, r3
 8006572:	3728      	adds	r7, #40	; 0x28
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006586:	b2db      	uxtb	r3, r3
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	4613      	mov	r3, r2
 80065a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065a4:	f7fd fc28 	bl	8003df8 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	4413      	add	r3, r2
 80065b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065b4:	f7fd fc20 	bl	8003df8 <HAL_GetTick>
 80065b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065ba:	4b39      	ldr	r3, [pc, #228]	; (80066a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	015b      	lsls	r3, r3, #5
 80065c0:	0d1b      	lsrs	r3, r3, #20
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	fb02 f303 	mul.w	r3, r2, r3
 80065c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ca:	e054      	b.n	8006676 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065d2:	d050      	beq.n	8006676 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065d4:	f7fd fc10 	bl	8003df8 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d902      	bls.n	80065ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d13d      	bne.n	8006666 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006602:	d111      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800660c:	d004      	beq.n	8006618 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006616:	d107      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006630:	d10f      	bne.n	8006652 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006650:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e017      	b.n	8006696 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	3b01      	subs	r3, #1
 8006674:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4013      	ands	r3, r2
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	429a      	cmp	r2, r3
 8006692:	d19b      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000018 	.word	0x20000018

080066a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08a      	sub	sp, #40	; 0x28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066b6:	f7fd fb9f 	bl	8003df8 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	4413      	add	r3, r2
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80066c6:	f7fd fb97 	bl	8003df8 <HAL_GetTick>
 80066ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066d4:	4b3d      	ldr	r3, [pc, #244]	; (80067cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	4613      	mov	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	00da      	lsls	r2, r3, #3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	0d1b      	lsrs	r3, r3, #20
 80066e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80066ec:	e060      	b.n	80067b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066f4:	d107      	bne.n	8006706 <SPI_WaitFifoStateUntilTimeout+0x62>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006704:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800670c:	d050      	beq.n	80067b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800670e:	f7fd fb73 	bl	8003df8 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671a:	429a      	cmp	r2, r3
 800671c:	d902      	bls.n	8006724 <SPI_WaitFifoStateUntilTimeout+0x80>
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	d13d      	bne.n	80067a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006732:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800673c:	d111      	bne.n	8006762 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006746:	d004      	beq.n	8006752 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006750:	d107      	bne.n	8006762 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006760:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676a:	d10f      	bne.n	800678c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800678a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e010      	b.n	80067c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4013      	ands	r3, r2
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d196      	bne.n	80066ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3728      	adds	r7, #40	; 0x28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000018 	.word	0x20000018

080067d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7ff ff5b 	bl	80066a4 <SPI_WaitFifoStateUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f8:	f043 0220 	orr.w	r2, r3, #32
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e027      	b.n	8006854 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	2180      	movs	r1, #128	; 0x80
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7ff fec0 	bl	8006594 <SPI_WaitFlagStateUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800681e:	f043 0220 	orr.w	r2, r3, #32
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e014      	b.n	8006854 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2200      	movs	r2, #0
 8006832:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f7ff ff34 	bl	80066a4 <SPI_WaitFifoStateUntilTimeout>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d007      	beq.n	8006852 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006846:	f043 0220 	orr.w	r2, r3, #32
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e000      	b.n	8006854 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e040      	b.n	80068f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f83a 	bl	80068f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2224      	movs	r2, #36	; 0x24
 8006888:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0201 	bic.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f8ca 	bl	8006a34 <UART_SetConfig>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e022      	b.n	80068f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fb76 	bl	8006fa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fbfd 	bl	80070e8 <UART_CheckIdleState>
 80068ee:	4603      	mov	r3, r0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	; 0x28
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	4613      	mov	r3, r2
 800691a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006920:	2b20      	cmp	r3, #32
 8006922:	f040 8082 	bne.w	8006a2a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_UART_Transmit+0x26>
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e07a      	b.n	8006a2c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_UART_Transmit+0x38>
 8006940:	2302      	movs	r3, #2
 8006942:	e073      	b.n	8006a2c <HAL_UART_Transmit+0x120>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2221      	movs	r2, #33	; 0x21
 8006958:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800695a:	f7fd fa4d 	bl	8003df8 <HAL_GetTick>
 800695e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	88fa      	ldrh	r2, [r7, #6]
 8006964:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	88fa      	ldrh	r2, [r7, #6]
 800696c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006978:	d108      	bne.n	800698c <HAL_UART_Transmit+0x80>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	61bb      	str	r3, [r7, #24]
 800698a:	e003      	b.n	8006994 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006990:	2300      	movs	r3, #0
 8006992:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800699c:	e02d      	b.n	80069fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2200      	movs	r2, #0
 80069a6:	2180      	movs	r1, #128	; 0x80
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fbe6 	bl	800717a <UART_WaitOnFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e039      	b.n	8006a2c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	881a      	ldrh	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ca:	b292      	uxth	r2, r2
 80069cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	3302      	adds	r3, #2
 80069d2:	61bb      	str	r3, [r7, #24]
 80069d4:	e008      	b.n	80069e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	781a      	ldrb	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	b292      	uxth	r2, r2
 80069e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	3301      	adds	r3, #1
 80069e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1cb      	bne.n	800699e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2140      	movs	r1, #64	; 0x40
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fbb2 	bl	800717a <UART_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e005      	b.n	8006a2c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e000      	b.n	8006a2c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006a2a:	2302      	movs	r3, #2
  }
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a38:	b08a      	sub	sp, #40	; 0x28
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4ba4      	ldr	r3, [pc, #656]	; (8006cf4 <UART_SetConfig+0x2c0>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a6c:	430b      	orrs	r3, r1
 8006a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a99      	ldr	r2, [pc, #612]	; (8006cf8 <UART_SetConfig+0x2c4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d004      	beq.n	8006aa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a90      	ldr	r2, [pc, #576]	; (8006cfc <UART_SetConfig+0x2c8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d126      	bne.n	8006b0c <UART_SetConfig+0xd8>
 8006abe:	4b90      	ldr	r3, [pc, #576]	; (8006d00 <UART_SetConfig+0x2cc>)
 8006ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac4:	f003 0303 	and.w	r3, r3, #3
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d81b      	bhi.n	8006b04 <UART_SetConfig+0xd0>
 8006acc:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <UART_SetConfig+0xa0>)
 8006ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad2:	bf00      	nop
 8006ad4:	08006ae5 	.word	0x08006ae5
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	08006aed 	.word	0x08006aed
 8006ae0:	08006afd 	.word	0x08006afd
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e116      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006aec:	2302      	movs	r3, #2
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e112      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006af4:	2304      	movs	r3, #4
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afa:	e10e      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006afc:	2308      	movs	r3, #8
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b02:	e10a      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006b04:	2310      	movs	r3, #16
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0a:	e106      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a7c      	ldr	r2, [pc, #496]	; (8006d04 <UART_SetConfig+0x2d0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d138      	bne.n	8006b88 <UART_SetConfig+0x154>
 8006b16:	4b7a      	ldr	r3, [pc, #488]	; (8006d00 <UART_SetConfig+0x2cc>)
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1c:	f003 030c 	and.w	r3, r3, #12
 8006b20:	2b0c      	cmp	r3, #12
 8006b22:	d82d      	bhi.n	8006b80 <UART_SetConfig+0x14c>
 8006b24:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <UART_SetConfig+0xf8>)
 8006b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2a:	bf00      	nop
 8006b2c:	08006b61 	.word	0x08006b61
 8006b30:	08006b81 	.word	0x08006b81
 8006b34:	08006b81 	.word	0x08006b81
 8006b38:	08006b81 	.word	0x08006b81
 8006b3c:	08006b71 	.word	0x08006b71
 8006b40:	08006b81 	.word	0x08006b81
 8006b44:	08006b81 	.word	0x08006b81
 8006b48:	08006b81 	.word	0x08006b81
 8006b4c:	08006b69 	.word	0x08006b69
 8006b50:	08006b81 	.word	0x08006b81
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b79 	.word	0x08006b79
 8006b60:	2300      	movs	r3, #0
 8006b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b66:	e0d8      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6e:	e0d4      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006b70:	2304      	movs	r3, #4
 8006b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b76:	e0d0      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006b78:	2308      	movs	r3, #8
 8006b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7e:	e0cc      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006b80:	2310      	movs	r3, #16
 8006b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b86:	e0c8      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a5e      	ldr	r2, [pc, #376]	; (8006d08 <UART_SetConfig+0x2d4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d125      	bne.n	8006bde <UART_SetConfig+0x1aa>
 8006b92:	4b5b      	ldr	r3, [pc, #364]	; (8006d00 <UART_SetConfig+0x2cc>)
 8006b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b9c:	2b30      	cmp	r3, #48	; 0x30
 8006b9e:	d016      	beq.n	8006bce <UART_SetConfig+0x19a>
 8006ba0:	2b30      	cmp	r3, #48	; 0x30
 8006ba2:	d818      	bhi.n	8006bd6 <UART_SetConfig+0x1a2>
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	d00a      	beq.n	8006bbe <UART_SetConfig+0x18a>
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d814      	bhi.n	8006bd6 <UART_SetConfig+0x1a2>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <UART_SetConfig+0x182>
 8006bb0:	2b10      	cmp	r3, #16
 8006bb2:	d008      	beq.n	8006bc6 <UART_SetConfig+0x192>
 8006bb4:	e00f      	b.n	8006bd6 <UART_SetConfig+0x1a2>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bbc:	e0ad      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc4:	e0a9      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006bc6:	2304      	movs	r3, #4
 8006bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bcc:	e0a5      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006bce:	2308      	movs	r3, #8
 8006bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd4:	e0a1      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006bd6:	2310      	movs	r3, #16
 8006bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bdc:	e09d      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a4a      	ldr	r2, [pc, #296]	; (8006d0c <UART_SetConfig+0x2d8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d125      	bne.n	8006c34 <UART_SetConfig+0x200>
 8006be8:	4b45      	ldr	r3, [pc, #276]	; (8006d00 <UART_SetConfig+0x2cc>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8006bf4:	d016      	beq.n	8006c24 <UART_SetConfig+0x1f0>
 8006bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8006bf8:	d818      	bhi.n	8006c2c <UART_SetConfig+0x1f8>
 8006bfa:	2b80      	cmp	r3, #128	; 0x80
 8006bfc:	d00a      	beq.n	8006c14 <UART_SetConfig+0x1e0>
 8006bfe:	2b80      	cmp	r3, #128	; 0x80
 8006c00:	d814      	bhi.n	8006c2c <UART_SetConfig+0x1f8>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <UART_SetConfig+0x1d8>
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	d008      	beq.n	8006c1c <UART_SetConfig+0x1e8>
 8006c0a:	e00f      	b.n	8006c2c <UART_SetConfig+0x1f8>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c12:	e082      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006c14:	2302      	movs	r3, #2
 8006c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1a:	e07e      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c22:	e07a      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006c24:	2308      	movs	r3, #8
 8006c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2a:	e076      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c32:	e072      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a35      	ldr	r2, [pc, #212]	; (8006d10 <UART_SetConfig+0x2dc>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d12a      	bne.n	8006c94 <UART_SetConfig+0x260>
 8006c3e:	4b30      	ldr	r3, [pc, #192]	; (8006d00 <UART_SetConfig+0x2cc>)
 8006c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c4c:	d01a      	beq.n	8006c84 <UART_SetConfig+0x250>
 8006c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c52:	d81b      	bhi.n	8006c8c <UART_SetConfig+0x258>
 8006c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c58:	d00c      	beq.n	8006c74 <UART_SetConfig+0x240>
 8006c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c5e:	d815      	bhi.n	8006c8c <UART_SetConfig+0x258>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <UART_SetConfig+0x238>
 8006c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c68:	d008      	beq.n	8006c7c <UART_SetConfig+0x248>
 8006c6a:	e00f      	b.n	8006c8c <UART_SetConfig+0x258>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c72:	e052      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006c74:	2302      	movs	r3, #2
 8006c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7a:	e04e      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c82:	e04a      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006c84:	2308      	movs	r3, #8
 8006c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8a:	e046      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006c8c:	2310      	movs	r3, #16
 8006c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c92:	e042      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <UART_SetConfig+0x2c4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d13a      	bne.n	8006d14 <UART_SetConfig+0x2e0>
 8006c9e:	4b18      	ldr	r3, [pc, #96]	; (8006d00 <UART_SetConfig+0x2cc>)
 8006ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cac:	d01a      	beq.n	8006ce4 <UART_SetConfig+0x2b0>
 8006cae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cb2:	d81b      	bhi.n	8006cec <UART_SetConfig+0x2b8>
 8006cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb8:	d00c      	beq.n	8006cd4 <UART_SetConfig+0x2a0>
 8006cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cbe:	d815      	bhi.n	8006cec <UART_SetConfig+0x2b8>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <UART_SetConfig+0x298>
 8006cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc8:	d008      	beq.n	8006cdc <UART_SetConfig+0x2a8>
 8006cca:	e00f      	b.n	8006cec <UART_SetConfig+0x2b8>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd2:	e022      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cda:	e01e      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006cdc:	2304      	movs	r3, #4
 8006cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce2:	e01a      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006ce4:	2308      	movs	r3, #8
 8006ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cea:	e016      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006cec:	2310      	movs	r3, #16
 8006cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf2:	e012      	b.n	8006d1a <UART_SetConfig+0x2e6>
 8006cf4:	efff69f3 	.word	0xefff69f3
 8006cf8:	40008000 	.word	0x40008000
 8006cfc:	40013800 	.word	0x40013800
 8006d00:	40021000 	.word	0x40021000
 8006d04:	40004400 	.word	0x40004400
 8006d08:	40004800 	.word	0x40004800
 8006d0c:	40004c00 	.word	0x40004c00
 8006d10:	40005000 	.word	0x40005000
 8006d14:	2310      	movs	r3, #16
 8006d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a9f      	ldr	r2, [pc, #636]	; (8006f9c <UART_SetConfig+0x568>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d17a      	bne.n	8006e1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d824      	bhi.n	8006d76 <UART_SetConfig+0x342>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <UART_SetConfig+0x300>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d59 	.word	0x08006d59
 8006d38:	08006d77 	.word	0x08006d77
 8006d3c:	08006d61 	.word	0x08006d61
 8006d40:	08006d77 	.word	0x08006d77
 8006d44:	08006d67 	.word	0x08006d67
 8006d48:	08006d77 	.word	0x08006d77
 8006d4c:	08006d77 	.word	0x08006d77
 8006d50:	08006d77 	.word	0x08006d77
 8006d54:	08006d6f 	.word	0x08006d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d58:	f7fe fc06 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8006d5c:	61f8      	str	r0, [r7, #28]
        break;
 8006d5e:	e010      	b.n	8006d82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d60:	4b8f      	ldr	r3, [pc, #572]	; (8006fa0 <UART_SetConfig+0x56c>)
 8006d62:	61fb      	str	r3, [r7, #28]
        break;
 8006d64:	e00d      	b.n	8006d82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d66:	f7fe fb67 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 8006d6a:	61f8      	str	r0, [r7, #28]
        break;
 8006d6c:	e009      	b.n	8006d82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d72:	61fb      	str	r3, [r7, #28]
        break;
 8006d74:	e005      	b.n	8006d82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80fb 	beq.w	8006f80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	4413      	add	r3, r2
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d305      	bcc.n	8006da6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d903      	bls.n	8006dae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006dac:	e0e8      	b.n	8006f80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	2200      	movs	r2, #0
 8006db2:	461c      	mov	r4, r3
 8006db4:	4615      	mov	r5, r2
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	f04f 0300 	mov.w	r3, #0
 8006dbe:	022b      	lsls	r3, r5, #8
 8006dc0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006dc4:	0222      	lsls	r2, r4, #8
 8006dc6:	68f9      	ldr	r1, [r7, #12]
 8006dc8:	6849      	ldr	r1, [r1, #4]
 8006dca:	0849      	lsrs	r1, r1, #1
 8006dcc:	2000      	movs	r0, #0
 8006dce:	4688      	mov	r8, r1
 8006dd0:	4681      	mov	r9, r0
 8006dd2:	eb12 0a08 	adds.w	sl, r2, r8
 8006dd6:	eb43 0b09 	adc.w	fp, r3, r9
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006de8:	4650      	mov	r0, sl
 8006dea:	4659      	mov	r1, fp
 8006dec:	f7f9 fedc 	bl	8000ba8 <__aeabi_uldivmod>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4613      	mov	r3, r2
 8006df6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dfe:	d308      	bcc.n	8006e12 <UART_SetConfig+0x3de>
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e06:	d204      	bcs.n	8006e12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	60da      	str	r2, [r3, #12]
 8006e10:	e0b6      	b.n	8006f80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e18:	e0b2      	b.n	8006f80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e22:	d15e      	bne.n	8006ee2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d828      	bhi.n	8006e7e <UART_SetConfig+0x44a>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x400>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e61 	.word	0x08006e61
 8006e3c:	08006e69 	.word	0x08006e69
 8006e40:	08006e7f 	.word	0x08006e7f
 8006e44:	08006e6f 	.word	0x08006e6f
 8006e48:	08006e7f 	.word	0x08006e7f
 8006e4c:	08006e7f 	.word	0x08006e7f
 8006e50:	08006e7f 	.word	0x08006e7f
 8006e54:	08006e77 	.word	0x08006e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7fe fb86 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8006e5c:	61f8      	str	r0, [r7, #28]
        break;
 8006e5e:	e014      	b.n	8006e8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e60:	f7fe fb98 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8006e64:	61f8      	str	r0, [r7, #28]
        break;
 8006e66:	e010      	b.n	8006e8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e68:	4b4d      	ldr	r3, [pc, #308]	; (8006fa0 <UART_SetConfig+0x56c>)
 8006e6a:	61fb      	str	r3, [r7, #28]
        break;
 8006e6c:	e00d      	b.n	8006e8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6e:	f7fe fae3 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 8006e72:	61f8      	str	r0, [r7, #28]
        break;
 8006e74:	e009      	b.n	8006e8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7a:	61fb      	str	r3, [r7, #28]
        break;
 8006e7c:	e005      	b.n	8006e8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d077      	beq.n	8006f80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	005a      	lsls	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	085b      	lsrs	r3, r3, #1
 8006e9a:	441a      	add	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b0f      	cmp	r3, #15
 8006eaa:	d916      	bls.n	8006eda <UART_SetConfig+0x4a6>
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb2:	d212      	bcs.n	8006eda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f023 030f 	bic.w	r3, r3, #15
 8006ebc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	085b      	lsrs	r3, r3, #1
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	8afb      	ldrh	r3, [r7, #22]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	8afa      	ldrh	r2, [r7, #22]
 8006ed6:	60da      	str	r2, [r3, #12]
 8006ed8:	e052      	b.n	8006f80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ee0:	e04e      	b.n	8006f80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d827      	bhi.n	8006f3a <UART_SetConfig+0x506>
 8006eea:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <UART_SetConfig+0x4bc>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f15 	.word	0x08006f15
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f25 	.word	0x08006f25
 8006efc:	08006f3b 	.word	0x08006f3b
 8006f00:	08006f2b 	.word	0x08006f2b
 8006f04:	08006f3b 	.word	0x08006f3b
 8006f08:	08006f3b 	.word	0x08006f3b
 8006f0c:	08006f3b 	.word	0x08006f3b
 8006f10:	08006f33 	.word	0x08006f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f14:	f7fe fb28 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8006f18:	61f8      	str	r0, [r7, #28]
        break;
 8006f1a:	e014      	b.n	8006f46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f1c:	f7fe fb3a 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8006f20:	61f8      	str	r0, [r7, #28]
        break;
 8006f22:	e010      	b.n	8006f46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f24:	4b1e      	ldr	r3, [pc, #120]	; (8006fa0 <UART_SetConfig+0x56c>)
 8006f26:	61fb      	str	r3, [r7, #28]
        break;
 8006f28:	e00d      	b.n	8006f46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2a:	f7fe fa85 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 8006f2e:	61f8      	str	r0, [r7, #28]
        break;
 8006f30:	e009      	b.n	8006f46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f36:	61fb      	str	r3, [r7, #28]
        break;
 8006f38:	e005      	b.n	8006f46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f44:	bf00      	nop
    }

    if (pclk != 0U)
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d019      	beq.n	8006f80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	085a      	lsrs	r2, r3, #1
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	441a      	add	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	2b0f      	cmp	r3, #15
 8006f64:	d909      	bls.n	8006f7a <UART_SetConfig+0x546>
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6c:	d205      	bcs.n	8006f7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60da      	str	r2, [r3, #12]
 8006f78:	e002      	b.n	8006f80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3728      	adds	r7, #40	; 0x28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40008000 	.word	0x40008000
 8006fa0:	00f42400 	.word	0x00f42400

08006fa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00a      	beq.n	8007012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	f003 0310 	and.w	r3, r3, #16
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00a      	beq.n	8007056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01a      	beq.n	80070ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a2:	d10a      	bne.n	80070ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	605a      	str	r2, [r3, #4]
  }
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070f8:	f7fc fe7e 	bl	8003df8 <HAL_GetTick>
 80070fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	2b08      	cmp	r3, #8
 800710a:	d10e      	bne.n	800712a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800710c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f82d 	bl	800717a <UART_WaitOnFlagUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e023      	b.n	8007172 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b04      	cmp	r3, #4
 8007136:	d10e      	bne.n	8007156 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f817 	bl	800717a <UART_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e00d      	b.n	8007172 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2220      	movs	r2, #32
 800715a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b09c      	sub	sp, #112	; 0x70
 800717e:	af00      	add	r7, sp, #0
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	603b      	str	r3, [r7, #0]
 8007186:	4613      	mov	r3, r2
 8007188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718a:	e0a5      	b.n	80072d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800718c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007192:	f000 80a1 	beq.w	80072d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007196:	f7fc fe2f 	bl	8003df8 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d302      	bcc.n	80071ac <UART_WaitOnFlagUntilTimeout+0x32>
 80071a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d13e      	bne.n	800722a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071c0:	667b      	str	r3, [r7, #100]	; 0x64
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e6      	bne.n	80071ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3308      	adds	r3, #8
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	f023 0301 	bic.w	r3, r3, #1
 80071f4:	663b      	str	r3, [r7, #96]	; 0x60
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3308      	adds	r3, #8
 80071fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8007200:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007206:	e841 2300 	strex	r3, r2, [r1]
 800720a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800720c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e5      	bne.n	80071de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2220      	movs	r2, #32
 8007216:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2220      	movs	r2, #32
 800721c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e067      	b.n	80072fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d04f      	beq.n	80072d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007246:	d147      	bne.n	80072d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007250:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	e853 3f00 	ldrex	r3, [r3]
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
 8007272:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007278:	e841 2300 	strex	r3, r2, [r1]
 800727c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1e6      	bne.n	8007252 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	e853 3f00 	ldrex	r3, [r3]
 8007292:	613b      	str	r3, [r7, #16]
   return(result);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	66bb      	str	r3, [r7, #104]	; 0x68
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3308      	adds	r3, #8
 80072a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072a4:	623a      	str	r2, [r7, #32]
 80072a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	69f9      	ldr	r1, [r7, #28]
 80072aa:	6a3a      	ldr	r2, [r7, #32]
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e5      	bne.n	8007284 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2220      	movs	r2, #32
 80072c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e010      	b.n	80072fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69da      	ldr	r2, [r3, #28]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	4013      	ands	r3, r2
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	bf0c      	ite	eq
 80072e8:	2301      	moveq	r3, #1
 80072ea:	2300      	movne	r3, #0
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	461a      	mov	r2, r3
 80072f0:	79fb      	ldrb	r3, [r7, #7]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	f43f af4a 	beq.w	800718c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3770      	adds	r7, #112	; 0x70
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8007302:	b5b0      	push	{r4, r5, r7, lr}
 8007304:	b0ce      	sub	sp, #312	; 0x138
 8007306:	af00      	add	r7, sp, #0
 8007308:	4605      	mov	r5, r0
 800730a:	460c      	mov	r4, r1
 800730c:	4610      	mov	r0, r2
 800730e:	4619      	mov	r1, r3
 8007310:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007314:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007318:	462a      	mov	r2, r5
 800731a:	701a      	strb	r2, [r3, #0]
 800731c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007320:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007324:	4622      	mov	r2, r4
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800732c:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8007330:	4602      	mov	r2, r0
 8007332:	801a      	strh	r2, [r3, #0]
 8007334:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007338:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800733c:	460a      	mov	r2, r1
 800733e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007340:	f107 030c 	add.w	r3, r7, #12
 8007344:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007348:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800734c:	3308      	adds	r3, #8
 800734e:	f107 020c 	add.w	r2, r7, #12
 8007352:	4413      	add	r3, r2
 8007354:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007358:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800735c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007360:	4413      	add	r3, r2
 8007362:	3309      	adds	r3, #9
 8007364:	f107 020c 	add.w	r2, r7, #12
 8007368:	4413      	add	r3, r2
 800736a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800736e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007372:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8007380:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007384:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007388:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800738c:	7812      	ldrb	r2, [r2, #0]
 800738e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007390:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007394:	3301      	adds	r3, #1
 8007396:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800739a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800739e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80073a2:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80073a6:	8812      	ldrh	r2, [r2, #0]
 80073a8:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80073ac:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80073b0:	3302      	adds	r3, #2
 80073b2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 80073b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073ba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80073be:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80073c2:	8812      	ldrh	r2, [r2, #0]
 80073c4:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80073c8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80073cc:	3302      	adds	r3, #2
 80073ce:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80073d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073d6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80073da:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80073de:	7812      	ldrb	r2, [r2, #0]
 80073e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80073e2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80073e6:	3301      	adds	r3, #1
 80073e8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 80073ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073f0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80073f4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80073f6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80073fa:	3301      	adds	r3, #1
 80073fc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8007400:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007404:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007408:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800740a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800740e:	3301      	adds	r3, #1
 8007410:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8007414:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007418:	3308      	adds	r3, #8
 800741a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800741e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007422:	4618      	mov	r0, r3
 8007424:	f002 fe4a 	bl	800a0bc <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8007428:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800742c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007430:	4413      	add	r3, r2
 8007432:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8007436:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800743a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800743e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007440:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007444:	3301      	adds	r3, #1
 8007446:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800744a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800744e:	3301      	adds	r3, #1
 8007450:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007454:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007458:	4618      	mov	r0, r3
 800745a:	f002 fe2f 	bl	800a0bc <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 800745e:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8007462:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007466:	4413      	add	r3, r2
 8007468:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800746c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007470:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007474:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007476:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800747a:	3302      	adds	r3, #2
 800747c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8007480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007484:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007488:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800748a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800748e:	3302      	adds	r3, #2
 8007490:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007494:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007498:	2218      	movs	r2, #24
 800749a:	2100      	movs	r1, #0
 800749c:	4618      	mov	r0, r3
 800749e:	f002 fe1b 	bl	800a0d8 <memset>
  rq.ogf = 0x3f;
 80074a2:	233f      	movs	r3, #63	; 0x3f
 80074a4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80074a8:	2383      	movs	r3, #131	; 0x83
 80074aa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80074ae:	f107 030c 	add.w	r3, r7, #12
 80074b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80074b6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80074ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80074be:	f107 030b 	add.w	r3, r7, #11
 80074c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80074cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074d0:	2100      	movs	r1, #0
 80074d2:	4618      	mov	r0, r3
 80074d4:	f002 fb1e 	bl	8009b14 <hci_send_req>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da01      	bge.n	80074e2 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80074de:	23ff      	movs	r3, #255	; 0xff
 80074e0:	e00d      	b.n	80074fe <aci_gap_set_discoverable+0x1fc>
  if (status) {
 80074e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80074e6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <aci_gap_set_discoverable+0x1fa>
    return status;
 80074f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80074f4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	e000      	b.n	80074fe <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007504:	46bd      	mov	sp, r7
 8007506:	bdb0      	pop	{r4, r5, r7, pc}

08007508 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8007508:	b5b0      	push	{r4, r5, r7, lr}
 800750a:	b0cc      	sub	sp, #304	; 0x130
 800750c:	af00      	add	r7, sp, #0
 800750e:	4605      	mov	r5, r0
 8007510:	460c      	mov	r4, r1
 8007512:	4610      	mov	r0, r2
 8007514:	4619      	mov	r1, r3
 8007516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800751e:	462a      	mov	r2, r5
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007526:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800752a:	4622      	mov	r2, r4
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007536:	4602      	mov	r2, r0
 8007538:	701a      	strb	r2, [r3, #0]
 800753a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007542:	460a      	mov	r2, r1
 8007544:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007546:	f107 030c 	add.w	r3, r7, #12
 800754a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8007560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007564:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007568:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800756c:	7812      	ldrb	r2, [r2, #0]
 800756e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007570:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007574:	3301      	adds	r3, #1
 8007576:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800757a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007582:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007586:	7812      	ldrb	r2, [r2, #0]
 8007588:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800758a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800758e:	3301      	adds	r3, #1
 8007590:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 8007594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007598:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800759c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80075a0:	7812      	ldrb	r2, [r2, #0]
 80075a2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80075a4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80075a8:	3301      	adds	r3, #1
 80075aa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 80075ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075b6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80075ba:	7812      	ldrb	r2, [r2, #0]
 80075bc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80075be:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80075c2:	3301      	adds	r3, #1
 80075c4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 80075c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075cc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80075d0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80075d2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80075d6:	3301      	adds	r3, #1
 80075d8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 80075dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80075e4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80075e6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80075ea:	3301      	adds	r3, #1
 80075ec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 80075f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80075f8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80075fa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80075fe:	3301      	adds	r3, #1
 8007600:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8007604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007608:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800760c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007610:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007614:	3304      	adds	r3, #4
 8007616:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800761a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007622:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007624:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007628:	3301      	adds	r3, #1
 800762a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800762e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007632:	2218      	movs	r2, #24
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f002 fd4e 	bl	800a0d8 <memset>
  rq.ogf = 0x3f;
 800763c:	233f      	movs	r3, #63	; 0x3f
 800763e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007642:	2386      	movs	r3, #134	; 0x86
 8007644:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007648:	f107 030c 	add.w	r3, r7, #12
 800764c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007650:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007654:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007658:	f107 030b 	add.w	r3, r7, #11
 800765c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007660:	2301      	movs	r3, #1
 8007662:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007666:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800766a:	2100      	movs	r1, #0
 800766c:	4618      	mov	r0, r3
 800766e:	f002 fa51 	bl	8009b14 <hci_send_req>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	da01      	bge.n	800767c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007678:	23ff      	movs	r3, #255	; 0xff
 800767a:	e00d      	b.n	8007698 <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 800767c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007680:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d005      	beq.n	8007696 <aci_gap_set_authentication_requirement+0x18e>
    return status;
 800768a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	e000      	b.n	8007698 <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800769e:	46bd      	mov	sp, r7
 80076a0:	bdb0      	pop	{r4, r5, r7, pc}

080076a2 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 80076a2:	b590      	push	{r4, r7, lr}
 80076a4:	b0cf      	sub	sp, #316	; 0x13c
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	4604      	mov	r4, r0
 80076aa:	4608      	mov	r0, r1
 80076ac:	4611      	mov	r1, r2
 80076ae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80076b2:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80076bc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80076c0:	4622      	mov	r2, r4
 80076c2:	701a      	strb	r2, [r3, #0]
 80076c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80076c8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80076cc:	4602      	mov	r2, r0
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80076d4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80076d8:	460a      	mov	r2, r1
 80076da:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80076dc:	f107 0314 	add.w	r3, r7, #20
 80076e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80076e4:	f107 030c 	add.w	r3, r7, #12
 80076e8:	2207      	movs	r2, #7
 80076ea:	2100      	movs	r1, #0
 80076ec:	4618      	mov	r0, r3
 80076ee:	f002 fcf3 	bl	800a0d8 <memset>
  uint8_t index_input = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 80076f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80076fc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007700:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007704:	7812      	ldrb	r2, [r2, #0]
 8007706:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007708:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800770c:	3301      	adds	r3, #1
 800770e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8007712:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007716:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800771a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800771e:	7812      	ldrb	r2, [r2, #0]
 8007720:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007722:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007726:	3301      	adds	r3, #1
 8007728:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800772c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007730:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007734:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800773c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007740:	3301      	adds	r3, #1
 8007742:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007746:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800774a:	2218      	movs	r2, #24
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f002 fcc2 	bl	800a0d8 <memset>
  rq.ogf = 0x3f;
 8007754:	233f      	movs	r3, #63	; 0x3f
 8007756:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 800775a:	238a      	movs	r3, #138	; 0x8a
 800775c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007760:	f107 0314 	add.w	r3, r7, #20
 8007764:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007768:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800776c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007770:	f107 030c 	add.w	r3, r7, #12
 8007774:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007778:	2307      	movs	r3, #7
 800777a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800777e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007782:	2100      	movs	r1, #0
 8007784:	4618      	mov	r0, r3
 8007786:	f002 f9c5 	bl	8009b14 <hci_send_req>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	da01      	bge.n	8007794 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007790:	23ff      	movs	r3, #255	; 0xff
 8007792:	e02e      	b.n	80077f2 <aci_gap_init+0x150>
  if (resp.Status) {
 8007794:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <aci_gap_init+0x10c>
    return resp.Status;
 80077a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	e021      	b.n	80077f2 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80077ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077b6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077c0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80077c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077d0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80077da:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 80077dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80077ee:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd90      	pop	{r4, r7, pc}

080077fc <aci_gap_update_adv_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b0cc      	sub	sp, #304	; 0x130
 8007800:	af00      	add	r7, sp, #0
 8007802:	4602      	mov	r2, r0
 8007804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780c:	6019      	str	r1, [r3, #0]
 800780e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007812:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007816:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007818:	f107 030c 	add.w	r3, r7, #12
 800781c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007824:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8007832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007836:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800783a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800783e:	7812      	ldrb	r2, [r2, #0]
 8007840:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007842:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007846:	3301      	adds	r3, #1
 8007848:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800784c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007850:	1c58      	adds	r0, r3, #1
 8007852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007856:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007864:	6819      	ldr	r1, [r3, #0]
 8007866:	f002 fc29 	bl	800a0bc <memcpy>
    index_input += AdvDataLen*sizeof(uint8_t);
 800786a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007872:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	4413      	add	r3, r2
 800787a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800787e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007882:	2218      	movs	r2, #24
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f002 fc26 	bl	800a0d8 <memset>
  rq.ogf = 0x3f;
 800788c:	233f      	movs	r3, #63	; 0x3f
 800788e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007892:	238e      	movs	r3, #142	; 0x8e
 8007894:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007898:	f107 030c 	add.w	r3, r7, #12
 800789c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078a0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80078a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80078a8:	f107 030b 	add.w	r3, r7, #11
 80078ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80078b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f002 f929 	bl	8009b14 <hci_send_req>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	da01      	bge.n	80078cc <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80078c8:	23ff      	movs	r3, #255	; 0xff
 80078ca:	e00d      	b.n	80078e8 <aci_gap_update_adv_data+0xec>
  if (status) {
 80078cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d005      	beq.n	80078e6 <aci_gap_update_adv_data+0xea>
    return status;
 80078da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078de:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	e000      	b.n	80078e8 <aci_gap_update_adv_data+0xec>
  }
  return BLE_STATUS_SUCCESS;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b088      	sub	sp, #32
 80078f6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80078fc:	f107 0308 	add.w	r3, r7, #8
 8007900:	2218      	movs	r2, #24
 8007902:	2100      	movs	r1, #0
 8007904:	4618      	mov	r0, r3
 8007906:	f002 fbe7 	bl	800a0d8 <memset>
  rq.ogf = 0x3f;
 800790a:	233f      	movs	r3, #63	; 0x3f
 800790c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800790e:	f240 1301 	movw	r3, #257	; 0x101
 8007912:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007914:	1dfb      	adds	r3, r7, #7
 8007916:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007918:	2301      	movs	r3, #1
 800791a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800791c:	f107 0308 	add.w	r3, r7, #8
 8007920:	2100      	movs	r1, #0
 8007922:	4618      	mov	r0, r3
 8007924:	f002 f8f6 	bl	8009b14 <hci_send_req>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	da01      	bge.n	8007932 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800792e:	23ff      	movs	r3, #255	; 0xff
 8007930:	e005      	b.n	800793e <aci_gatt_init+0x4c>
  if (status) {
 8007932:	79fb      	ldrb	r3, [r7, #7]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <aci_gatt_init+0x4a>
    return status;
 8007938:	79fb      	ldrb	r3, [r7, #7]
 800793a:	e000      	b.n	800793e <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3720      	adds	r7, #32
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8007946:	b590      	push	{r4, r7, lr}
 8007948:	b0cf      	sub	sp, #316	; 0x13c
 800794a:	af00      	add	r7, sp, #0
 800794c:	4604      	mov	r4, r0
 800794e:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8007952:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8007956:	6001      	str	r1, [r0, #0]
 8007958:	4610      	mov	r0, r2
 800795a:	4619      	mov	r1, r3
 800795c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007960:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007964:	4622      	mov	r2, r4
 8007966:	701a      	strb	r2, [r3, #0]
 8007968:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800796c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007970:	4602      	mov	r2, r0
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007978:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800797c:	460a      	mov	r2, r1
 800797e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007980:	f107 030c 	add.w	r3, r7, #12
 8007984:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007988:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800798c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d00a      	beq.n	80079ac <aci_gatt_add_service+0x66>
 8007996:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800799a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d101      	bne.n	80079a8 <aci_gatt_add_service+0x62>
 80079a4:	2311      	movs	r3, #17
 80079a6:	e002      	b.n	80079ae <aci_gatt_add_service+0x68>
 80079a8:	2301      	movs	r3, #1
 80079aa:	e000      	b.n	80079ae <aci_gatt_add_service+0x68>
 80079ac:	2303      	movs	r3, #3
 80079ae:	f107 020c 	add.w	r2, r7, #12
 80079b2:	4413      	add	r3, r2
 80079b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80079b8:	f107 0308 	add.w	r3, r7, #8
 80079bc:	2203      	movs	r2, #3
 80079be:	2100      	movs	r1, #0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f002 fb89 	bl	800a0d8 <memset>
  uint8_t index_input = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80079cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079d0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80079d4:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80079d8:	7812      	ldrb	r2, [r2, #0]
 80079da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079dc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80079e0:	3301      	adds	r3, #1
 80079e2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 80079e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80079ea:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d002      	beq.n	80079fa <aci_gatt_add_service+0xb4>
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d004      	beq.n	8007a02 <aci_gatt_add_service+0xbc>
 80079f8:	e007      	b.n	8007a0a <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 80079fa:	2302      	movs	r3, #2
 80079fc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007a00:	e005      	b.n	8007a0e <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007a02:	2310      	movs	r3, #16
 8007a04:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007a08:	e001      	b.n	8007a0e <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007a0a:	2347      	movs	r3, #71	; 0x47
 8007a0c:	e06c      	b.n	8007ae8 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8007a0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a12:	1c58      	adds	r0, r3, #1
 8007a14:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007a18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a1c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007a20:	6819      	ldr	r1, [r3, #0]
 8007a22:	f002 fb4b 	bl	800a0bc <memcpy>
    index_input += size;
 8007a26:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8007a2a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007a2e:	4413      	add	r3, r2
 8007a30:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8007a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a38:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a3c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007a40:	7812      	ldrb	r2, [r2, #0]
 8007a42:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007a44:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007a48:	3301      	adds	r3, #1
 8007a4a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8007a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a52:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a56:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007a5a:	7812      	ldrb	r2, [r2, #0]
 8007a5c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007a5e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007a62:	3301      	adds	r3, #1
 8007a64:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007a68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a6c:	2218      	movs	r2, #24
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f002 fb31 	bl	800a0d8 <memset>
  rq.ogf = 0x3f;
 8007a76:	233f      	movs	r3, #63	; 0x3f
 8007a78:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007a7c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007a80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a84:	f107 030c 	add.w	r3, r7, #12
 8007a88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a8c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007a90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007a94:	f107 0308 	add.w	r3, r7, #8
 8007a98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007aa2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f002 f833 	bl	8009b14 <hci_send_req>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	da01      	bge.n	8007ab8 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007ab4:	23ff      	movs	r3, #255	; 0xff
 8007ab6:	e017      	b.n	8007ae8 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8007ab8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007ac6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	e00a      	b.n	8007ae8 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8007ad2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ada:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007ae4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd90      	pop	{r4, r7, pc}

08007af2 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8007af2:	b590      	push	{r4, r7, lr}
 8007af4:	b0d1      	sub	sp, #324	; 0x144
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	4604      	mov	r4, r0
 8007afa:	4608      	mov	r0, r1
 8007afc:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007b00:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8007b04:	600a      	str	r2, [r1, #0]
 8007b06:	4619      	mov	r1, r3
 8007b08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007b0c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007b10:	4622      	mov	r2, r4
 8007b12:	801a      	strh	r2, [r3, #0]
 8007b14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007b18:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	701a      	strb	r2, [r3, #0]
 8007b20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007b24:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8007b28:	460a      	mov	r2, r1
 8007b2a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007b2c:	f107 0314 	add.w	r3, r7, #20
 8007b30:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007b34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007b38:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d00a      	beq.n	8007b58 <aci_gatt_add_char+0x66>
 8007b42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007b46:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d101      	bne.n	8007b54 <aci_gatt_add_char+0x62>
 8007b50:	2313      	movs	r3, #19
 8007b52:	e002      	b.n	8007b5a <aci_gatt_add_char+0x68>
 8007b54:	2303      	movs	r3, #3
 8007b56:	e000      	b.n	8007b5a <aci_gatt_add_char+0x68>
 8007b58:	2305      	movs	r3, #5
 8007b5a:	f107 0214 	add.w	r2, r7, #20
 8007b5e:	4413      	add	r3, r2
 8007b60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007b64:	f107 0310 	add.w	r3, r7, #16
 8007b68:	2203      	movs	r2, #3
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f002 fab3 	bl	800a0d8 <memset>
  uint8_t index_input = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 8007b78:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007b7c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007b80:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007b84:	8812      	ldrh	r2, [r2, #0]
 8007b86:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007b88:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007b8c:	3302      	adds	r3, #2
 8007b8e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8007b92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007b96:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007b9a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007b9e:	7812      	ldrb	r2, [r2, #0]
 8007ba0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007ba2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8007bac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007bb0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d002      	beq.n	8007bc0 <aci_gatt_add_char+0xce>
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d004      	beq.n	8007bc8 <aci_gatt_add_char+0xd6>
 8007bbe:	e007      	b.n	8007bd0 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007bc6:	e005      	b.n	8007bd4 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007bc8:	2310      	movs	r3, #16
 8007bca:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007bce:	e001      	b.n	8007bd4 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007bd0:	2347      	movs	r3, #71	; 0x47
 8007bd2:	e091      	b.n	8007cf8 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8007bd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007bd8:	1cd8      	adds	r0, r3, #3
 8007bda:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007bde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007be2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007be6:	6819      	ldr	r1, [r3, #0]
 8007be8:	f002 fa68 	bl	800a0bc <memcpy>
    index_input += size;
 8007bec:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8007bf0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8007bfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007bfe:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007c02:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8007c06:	8812      	ldrh	r2, [r2, #0]
 8007c08:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007c0a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007c0e:	3302      	adds	r3, #2
 8007c10:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8007c14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c18:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007c1c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007c1e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007c22:	3301      	adds	r3, #1
 8007c24:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8007c28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c2c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007c30:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007c32:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007c36:	3301      	adds	r3, #1
 8007c38:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8007c3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c40:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007c44:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007c46:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8007c50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c54:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007c58:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007c5a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007c5e:	3301      	adds	r3, #1
 8007c60:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8007c64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c68:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007c6c:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007c6e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007c72:	3301      	adds	r3, #1
 8007c74:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007c78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007c7c:	2218      	movs	r2, #24
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f002 fa29 	bl	800a0d8 <memset>
  rq.ogf = 0x3f;
 8007c86:	233f      	movs	r3, #63	; 0x3f
 8007c88:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007c8c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007c90:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007c94:	f107 0314 	add.w	r3, r7, #20
 8007c98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007c9c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007ca0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007ca4:	f107 0310 	add.w	r3, r7, #16
 8007ca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007cac:	2303      	movs	r3, #3
 8007cae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8007cb2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 ff2b 	bl	8009b14 <hci_send_req>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	da01      	bge.n	8007cc8 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007cc4:	23ff      	movs	r3, #255	; 0xff
 8007cc6:	e017      	b.n	8007cf8 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 8007cc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007cd6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	e00a      	b.n	8007cf8 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8007ce2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007cf4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd90      	pop	{r4, r7, pc}

08007d02 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8007d02:	b5b0      	push	{r4, r5, r7, lr}
 8007d04:	b0cc      	sub	sp, #304	; 0x130
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	4605      	mov	r5, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4619      	mov	r1, r3
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d18:	462a      	mov	r2, r5
 8007d1a:	801a      	strh	r2, [r3, #0]
 8007d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d24:	4622      	mov	r2, r4
 8007d26:	801a      	strh	r2, [r3, #0]
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007d30:	4602      	mov	r2, r0
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d38:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007d3c:	460a      	mov	r2, r1
 8007d3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007d40:	f107 030c 	add.w	r3, r7, #12
 8007d44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007d50:	2200      	movs	r2, #0
 8007d52:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8007d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d62:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007d66:	8812      	ldrh	r2, [r2, #0]
 8007d68:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007d6a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007d6e:	3302      	adds	r3, #2
 8007d70:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8007d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d7c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007d80:	8812      	ldrh	r2, [r2, #0]
 8007d82:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007d84:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007d88:	3302      	adds	r3, #2
 8007d8a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 8007d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d96:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007d9a:	7812      	ldrb	r2, [r2, #0]
 8007d9c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007d9e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007da2:	3301      	adds	r3, #1
 8007da4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8007da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007db0:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007db4:	7812      	ldrb	r2, [r2, #0]
 8007db6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007db8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8007dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc6:	1d98      	adds	r0, r3, #6
 8007dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dcc:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007dd8:	f002 f970 	bl	800a0bc <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8007ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007de4:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	4413      	add	r3, r2
 8007dec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007df0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007df4:	2218      	movs	r2, #24
 8007df6:	2100      	movs	r1, #0
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f002 f96d 	bl	800a0d8 <memset>
  rq.ogf = 0x3f;
 8007dfe:	233f      	movs	r3, #63	; 0x3f
 8007e00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007e04:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007e08:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e0c:	f107 030c 	add.w	r3, r7, #12
 8007e10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e14:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007e18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e1c:	f107 030b 	add.w	r3, r7, #11
 8007e20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007e2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f001 fe6f 	bl	8009b14 <hci_send_req>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	da01      	bge.n	8007e40 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007e3c:	23ff      	movs	r3, #255	; 0xff
 8007e3e:	e00d      	b.n	8007e5c <aci_gatt_update_char_value+0x15a>
  if (status) {
 8007e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e44:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d005      	beq.n	8007e5a <aci_gatt_update_char_value+0x158>
    return status;
 8007e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e52:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	e000      	b.n	8007e5c <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bdb0      	pop	{r4, r5, r7, pc}

08007e66 <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b0cc      	sub	sp, #304	; 0x130
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e72:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007e76:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8007e78:	f107 030c 	add.w	r3, r7, #12
 8007e7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e84:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007e88:	2200      	movs	r2, #0
 8007e8a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8007e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e9a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007e9e:	8812      	ldrh	r2, [r2, #0]
 8007ea0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007ea2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007ea6:	3302      	adds	r3, #2
 8007ea8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007eac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eb0:	2218      	movs	r2, #24
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f002 f90f 	bl	800a0d8 <memset>
  rq.ogf = 0x3f;
 8007eba:	233f      	movs	r3, #63	; 0x3f
 8007ebc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 8007ec0:	f240 1327 	movw	r3, #295	; 0x127
 8007ec4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ec8:	f107 030c 	add.w	r3, r7, #12
 8007ecc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ed0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007ed4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ed8:	f107 030b 	add.w	r3, r7, #11
 8007edc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007ee6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 fe11 	bl	8009b14 <hci_send_req>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	da01      	bge.n	8007efc <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8007ef8:	23ff      	movs	r3, #255	; 0xff
 8007efa:	e00d      	b.n	8007f18 <aci_gatt_allow_read+0xb2>
  if (status) {
 8007efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f00:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <aci_gatt_allow_read+0xb0>
    return status;
 8007f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	e000      	b.n	8007f18 <aci_gatt_allow_read+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <aci_hal_read_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b0ee      	sub	sp, #440	; 0x1b8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8007f2c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007f30:	6019      	str	r1, [r3, #0]
 8007f32:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8007f36:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8007f40:	f2a3 13a9 	subw	r3, r3, #425	; 0x1a9
 8007f44:	4602      	mov	r2, r0
 8007f46:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 8007f48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007f4c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007f50:	f107 0314 	add.w	r3, r7, #20
 8007f54:	2280      	movs	r2, #128	; 0x80
 8007f56:	2100      	movs	r1, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f002 f8bd 	bl	800a0d8 <memset>
  uint8_t index_input = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  cp0->Offset = htob(Offset, 1);
 8007f64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007f68:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8007f6c:	f2a2 12a9 	subw	r2, r2, #425	; 0x1a9
 8007f70:	7812      	ldrb	r2, [r2, #0]
 8007f72:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f74:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8007f78:	3301      	adds	r3, #1
 8007f7a:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007f7e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007f82:	2218      	movs	r2, #24
 8007f84:	2100      	movs	r1, #0
 8007f86:	4618      	mov	r0, r3
 8007f88:	f002 f8a6 	bl	800a0d8 <memset>
  rq.ogf = 0x3f;
 8007f8c:	233f      	movs	r3, #63	; 0x3f
 8007f8e:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198
  rq.ocf = 0x00d;
 8007f92:	230d      	movs	r3, #13
 8007f94:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  rq.cparam = cmd_buffer;
 8007f98:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007f9c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  rq.clen = index_input;
 8007fa0:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8007fa4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  rq.rparam = &resp;
 8007fa8:	f107 0314 	add.w	r3, r7, #20
 8007fac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  rq.rlen = sizeof(resp);
 8007fb0:	2380      	movs	r3, #128	; 0x80
 8007fb2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 8007fb6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 fda9 	bl	8009b14 <hci_send_req>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	da01      	bge.n	8007fcc <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 8007fc8:	23ff      	movs	r3, #255	; 0xff
 8007fca:	e029      	b.n	8008020 <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 8007fcc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8007fd0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d005      	beq.n	8007fe6 <aci_hal_read_config_data+0xc4>
    return resp.Status;
 8007fda:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8007fde:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	e01c      	b.n	8008020 <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 8007fe6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8007fea:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8007fee:	785a      	ldrb	r2, [r3, #1]
 8007ff0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8007ff4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8007ffc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8008000:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	461a      	mov	r2, r3
 800800a:	f107 0314 	add.w	r3, r7, #20
 800800e:	1c99      	adds	r1, r3, #2
 8008010:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8008014:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008018:	6818      	ldr	r0, [r3, #0]
 800801a:	f002 f84f 	bl	800a0bc <memcpy>
  return BLE_STATUS_SUCCESS;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b0cc      	sub	sp, #304	; 0x130
 800802e:	af00      	add	r7, sp, #0
 8008030:	4602      	mov	r2, r0
 8008032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008036:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800803a:	701a      	strb	r2, [r3, #0]
 800803c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008040:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008044:	460a      	mov	r2, r1
 8008046:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008048:	f107 030c 	add.w	r3, r7, #12
 800804c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008054:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008058:	2200      	movs	r2, #0
 800805a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 8008062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008066:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800806a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800806e:	7812      	ldrb	r2, [r2, #0]
 8008070:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008072:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008076:	3301      	adds	r3, #1
 8008078:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 800807c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008080:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008084:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008088:	7812      	ldrb	r2, [r2, #0]
 800808a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800808c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008090:	3301      	adds	r3, #1
 8008092:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008096:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800809a:	2218      	movs	r2, #24
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f002 f81a 	bl	800a0d8 <memset>
  rq.ogf = 0x3f;
 80080a4:	233f      	movs	r3, #63	; 0x3f
 80080a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80080aa:	230f      	movs	r3, #15
 80080ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80080b0:	f107 030c 	add.w	r3, r7, #12
 80080b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80080b8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80080bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80080c0:	f107 030b 	add.w	r3, r7, #11
 80080c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80080ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080d2:	2100      	movs	r1, #0
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 fd1d 	bl	8009b14 <hci_send_req>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	da01      	bge.n	80080e4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80080e0:	23ff      	movs	r3, #255	; 0xff
 80080e2:	e00d      	b.n	8008100 <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 80080e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <aci_hal_set_tx_power_level+0xd4>
    return status;
 80080f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	e000      	b.n	8008100 <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	7818      	ldrb	r0, [r3, #0]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008124:	b299      	uxth	r1, r3
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	78db      	ldrb	r3, [r3, #3]
 800812a:	461a      	mov	r2, r3
 800812c:	f7fa fa98 	bl	8002660 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	7818      	ldrb	r0, [r3, #0]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008154:	b299      	uxth	r1, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	78db      	ldrb	r3, [r3, #3]
 800815a:	461a      	mov	r2, r3
 800815c:	f000 ffca 	bl	80090f4 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 800816a:	b590      	push	{r4, r7, lr}
 800816c:	b087      	sub	sp, #28
 800816e:	af02      	add	r7, sp, #8
 8008170:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	7818      	ldrb	r0, [r3, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008184:	b299      	uxth	r1, r3
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	78da      	ldrb	r2, [r3, #3]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	889b      	ldrh	r3, [r3, #4]
 800818e:	b29c      	uxth	r4, r3
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	88db      	ldrh	r3, [r3, #6]
 8008194:	b29b      	uxth	r3, r3
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	4623      	mov	r3, r4
 800819a:	f000 ffba 	bl	8009112 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd90      	pop	{r4, r7, pc}

080081a8 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 ffbc 	bl	800913a <hci_hardware_error_event>

  return status;
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b0a6      	sub	sp, #152	; 0x98
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80081d4:	2300      	movs	r3, #0
 80081d6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80081e0:	2301      	movs	r3, #1
 80081e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80081e6:	2300      	movs	r3, #0
 80081e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081ec:	e02e      	b.n	800824c <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 80081ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80081f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80081fe:	b29a      	uxth	r2, r3
 8008200:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	3398      	adds	r3, #152	; 0x98
 8008208:	443b      	add	r3, r7
 800820a:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800820e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008212:	3302      	adds	r3, #2
 8008214:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8008218:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800821c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	3398      	adds	r3, #152	; 0x98
 8008232:	443b      	add	r3, r7
 8008234:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8008238:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800823c:	3302      	adds	r3, #2
 800823e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8008242:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008246:	3301      	adds	r3, #1
 8008248:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800824c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008258:	4293      	cmp	r3, r2
 800825a:	dbc8      	blt.n	80081ee <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 800825c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	f107 0208 	add.w	r2, r7, #8
 8008266:	4611      	mov	r1, r2
 8008268:	4618      	mov	r0, r3
 800826a:	f000 ff71 	bl	8009150 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 800826e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8008272:	4618      	mov	r0, r3
 8008274:	3798      	adds	r7, #152	; 0x98
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f000 ff6a 	bl	8009168 <hci_data_buffer_overflow_event>

  return status;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80082a6:	2300      	movs	r3, #0
 80082a8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	781a      	ldrb	r2, [r3, #0]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	4619      	mov	r1, r3
 80082bc:	4610      	mov	r0, r2
 80082be:	f000 ff5e 	bl	800917e <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f001 f9e6 	bl	80096b2 <aci_blue_initialized_event>

  return status;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4618      	mov	r0, r3
 8008304:	f001 f9e0 	bl	80096c8 <aci_blue_events_lost_event>

  return status;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8008312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008316:	b08d      	sub	sp, #52	; 0x34
 8008318:	af08      	add	r7, sp, #32
 800831a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f893 c000 	ldrb.w	ip, [r3]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f8d3 9009 	ldr.w	r9, [r3, #9]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	f8d2 2011 	ldr.w	r2, [r2, #17]
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8008350:	68b8      	ldr	r0, [r7, #8]
 8008352:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8008356:	68bc      	ldr	r4, [r7, #8]
 8008358:	f8d4 401d 	ldr.w	r4, [r4, #29]
 800835c:	68bd      	ldr	r5, [r7, #8]
 800835e:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8008362:	68be      	ldr	r6, [r7, #8]
 8008364:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 800836c:	9307      	str	r3, [sp, #28]
 800836e:	9606      	str	r6, [sp, #24]
 8008370:	9505      	str	r5, [sp, #20]
 8008372:	9404      	str	r4, [sp, #16]
 8008374:	9003      	str	r0, [sp, #12]
 8008376:	9102      	str	r1, [sp, #8]
 8008378:	9201      	str	r2, [sp, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	464b      	mov	r3, r9
 8008380:	4642      	mov	r2, r8
 8008382:	4671      	mov	r1, lr
 8008384:	4660      	mov	r0, ip
 8008386:	f001 f9a9 	bl	80096dc <aci_blue_crash_info_event>

  return status;
 800838a:	7bfb      	ldrb	r3, [r7, #15]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008396 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800839e:	2300      	movs	r3, #0
 80083a0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	7818      	ldrb	r0, [r3, #0]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	7859      	ldrb	r1, [r3, #1]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80083b4:	461a      	mov	r2, r3
 80083b6:	f001 f99f 	bl	80096f8 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f993 0000 	ldrsb.w	r0, [r3]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 80083e2:	461a      	mov	r2, r3
 80083e4:	f001 f996 	bl	8009714 <aci_hal_scan_req_report_event>

  return status;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	7818      	ldrb	r0, [r3, #0]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800840e:	461a      	mov	r2, r3
 8008410:	f001 f98e 	bl	8009730 <aci_hal_fw_error_event>

  return status;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 800842a:	f000 ff3e 	bl	80092aa <aci_gap_limited_discoverable_event>

  return status;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b298      	uxth	r0, r3
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	7899      	ldrb	r1, [r3, #2]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	78db      	ldrb	r3, [r3, #3]
 8008456:	461a      	mov	r2, r3
 8008458:	f000 ff2e 	bl	80092b8 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	b29b      	uxth	r3, r3
 800847c:	4618      	mov	r0, r3
 800847e:	f000 ff2a 	bl	80092d6 <aci_gap_pass_key_req_event>

  return status;
 8008482:	7bfb      	ldrb	r3, [r7, #15]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 ff22 	bl	80092ec <aci_gap_authorization_req_event>

  return status;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 80084be:	f000 ff20 	bl	8009302 <aci_gap_slave_security_initiated_event>

  return status;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 80084d8:	f000 ff1a 	bl	8009310 <aci_gap_bond_lost_event>

  return status;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	7818      	ldrb	r0, [r3, #0]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	7859      	ldrb	r1, [r3, #1]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8008506:	f000 ff0a 	bl	800931e <aci_gap_proc_complete_event>

  return status;
 800850a:	7bfb      	ldrb	r3, [r7, #15]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	4618      	mov	r0, r3
 800852c:	f000 ff07 	bl	800933e <aci_gap_addr_not_resolved_event>

  return status;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	b29a      	uxth	r2, r3
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008556:	4619      	mov	r1, r3
 8008558:	4610      	mov	r0, r2
 800855a:	f000 fefb 	bl	8009354 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 800855e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	b29a      	uxth	r2, r3
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	789b      	ldrb	r3, [r3, #2]
 8008582:	4619      	mov	r1, r3
 8008584:	4610      	mov	r0, r2
 8008586:	f000 fef1 	bl	800936c <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	885b      	ldrh	r3, [r3, #2]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f001 f839 	bl	800962a <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	b298      	uxth	r0, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80085e0:	461a      	mov	r2, r3
 80085e2:	f001 f830 	bl	8009646 <aci_l2cap_proc_timeout_event>

  return status;
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 80085f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085f2:	b089      	sub	sp, #36	; 0x24
 80085f4:	af04      	add	r7, sp, #16
 80085f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	b298      	uxth	r0, r3
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	789c      	ldrb	r4, [r3, #2]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008610:	b29d      	uxth	r5, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008618:	b29e      	uxth	r6, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8008620:	b29b      	uxth	r3, r3
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8008628:	b292      	uxth	r2, r2
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8008630:	b289      	uxth	r1, r1
 8008632:	9102      	str	r1, [sp, #8]
 8008634:	9201      	str	r2, [sp, #4]
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	4633      	mov	r3, r6
 800863a:	462a      	mov	r2, r5
 800863c:	4621      	mov	r1, r4
 800863e:	f001 f810 	bl	8009662 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8008642:	7bfb      	ldrb	r3, [r7, #15]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800864c <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 800864c:	b590      	push	{r4, r7, lr}
 800864e:	b087      	sub	sp, #28
 8008650:	af02      	add	r7, sp, #8
 8008652:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008654:	2300      	movs	r3, #0
 8008656:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	b298      	uxth	r0, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	7899      	ldrb	r1, [r3, #2]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800866c:	b29a      	uxth	r2, r3
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	4623      	mov	r3, r4
 800867a:	f001 f806 	bl	800968a <aci_l2cap_command_reject_event>

  return status;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	bd90      	pop	{r4, r7, pc}

08008688 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8008688:	b590      	push	{r4, r7, lr}
 800868a:	b087      	sub	sp, #28
 800868c:	af02      	add	r7, sp, #8
 800868e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b298      	uxth	r0, r3
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	885b      	ldrh	r3, [r3, #2]
 80086a2:	b299      	uxth	r1, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	889b      	ldrh	r3, [r3, #4]
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	88db      	ldrh	r3, [r3, #6]
 80086ae:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	4623      	mov	r3, r4
 80086b8:	f000 fe66 	bl	8009388 <aci_gatt_attribute_modified_event>

  return status;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd90      	pop	{r4, r7, pc}

080086c6 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fe67 	bl	80093b0 <aci_gatt_proc_timeout_event>

  return status;
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	b29a      	uxth	r2, r3
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	885b      	ldrh	r3, [r3, #2]
 8008706:	b29b      	uxth	r3, r3
 8008708:	4619      	mov	r1, r3
 800870a:	4610      	mov	r0, r2
 800870c:	f000 fe5b 	bl	80093c6 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	b298      	uxth	r0, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	7899      	ldrb	r1, [r3, #2]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800873c:	f000 fe51 	bl	80093e2 <aci_att_find_info_resp_event>

  return status;
 8008740:	7bfb      	ldrb	r3, [r7, #15]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b0a6      	sub	sp, #152	; 0x98
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008752:	2300      	movs	r3, #0
 8008754:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 800875e:	2303      	movs	r3, #3
 8008760:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8008764:	2300      	movs	r3, #0
 8008766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800876a:	e02e      	b.n	80087ca <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800876c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008770:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800877c:	b29a      	uxth	r2, r3
 800877e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	3398      	adds	r3, #152	; 0x98
 8008786:	443b      	add	r3, r7
 8008788:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800878c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008790:	3302      	adds	r3, #2
 8008792:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8008796:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800879a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	3398      	adds	r3, #152	; 0x98
 80087b0:	443b      	add	r3, r7
 80087b2:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 80087b6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80087ba:	3302      	adds	r3, #2
 80087bc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80087c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087c4:	3301      	adds	r3, #1
 80087c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087ce:	789b      	ldrb	r3, [r3, #2]
 80087d0:	461a      	mov	r2, r3
 80087d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087d6:	4293      	cmp	r3, r2
 80087d8:	dbc8      	blt.n	800876c <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 80087da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b298      	uxth	r0, r3
 80087e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087e6:	789b      	ldrb	r3, [r3, #2]
 80087e8:	f107 0208 	add.w	r2, r7, #8
 80087ec:	4619      	mov	r1, r3
 80087ee:	f000 fe08 	bl	8009402 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 80087f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3798      	adds	r7, #152	; 0x98
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	b298      	uxth	r0, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	7899      	ldrb	r1, [r3, #2]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8008820:	f000 fdfd 	bl	800941e <aci_att_read_by_type_resp_event>

  return status;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b298      	uxth	r0, r3
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 800884c:	461a      	mov	r2, r3
 800884e:	f000 fdf6 	bl	800943e <aci_att_read_resp_event>

  return status;
 8008852:	7bfb      	ldrb	r3, [r7, #15]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	b298      	uxth	r0, r3
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800887a:	461a      	mov	r2, r3
 800887c:	f000 fded 	bl	800945a <aci_att_read_blob_resp_event>

  return status;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b298      	uxth	r0, r3
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80088a8:	461a      	mov	r2, r3
 80088aa:	f000 fde4 	bl	8009476 <aci_att_read_multiple_resp_event>

  return status;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	b298      	uxth	r0, r3
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	7899      	ldrb	r1, [r3, #2]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80088da:	f000 fdda 	bl	8009492 <aci_att_read_by_group_type_resp_event>

  return status;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 80088e8:	b590      	push	{r4, r7, lr}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b298      	uxth	r0, r3
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	885b      	ldrh	r3, [r3, #2]
 8008902:	b299      	uxth	r1, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	889b      	ldrh	r3, [r3, #4]
 8008908:	b29a      	uxth	r2, r3
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	4623      	mov	r3, r4
 8008916:	f000 fdcc 	bl	80094b2 <aci_att_prepare_write_resp_event>

  return status;
 800891a:	7bfb      	ldrb	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	bd90      	pop	{r4, r7, pc}

08008924 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	b29b      	uxth	r3, r3
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fdcd 	bl	80094da <aci_att_exec_write_resp_event>

  return status;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	b298      	uxth	r0, r3
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	885b      	ldrh	r3, [r3, #2]
 8008964:	b299      	uxth	r1, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 800896e:	f000 fdbf 	bl	80094f0 <aci_gatt_indication_event>

  return status;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	b298      	uxth	r0, r3
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	885b      	ldrh	r3, [r3, #2]
 8008996:	b299      	uxth	r1, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 80089a0:	f000 fdb6 	bl	8009510 <aci_gatt_notification_event>

  return status;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	789b      	ldrb	r3, [r3, #2]
 80089c8:	4619      	mov	r1, r3
 80089ca:	4610      	mov	r0, r2
 80089cc:	f000 fdb0 	bl	8009530 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b084      	sub	sp, #16
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	b298      	uxth	r0, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	7899      	ldrb	r1, [r3, #2]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	795b      	ldrb	r3, [r3, #5]
 8008a00:	f000 fda4 	bl	800954c <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	b298      	uxth	r0, r3
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	885b      	ldrh	r3, [r3, #2]
 8008a28:	b299      	uxth	r1, r3
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8008a32:	f000 fd9f 	bl	8009574 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	b298      	uxth	r0, r3
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	885b      	ldrh	r3, [r3, #2]
 8008a5a:	b299      	uxth	r1, r3
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8008a64:	f000 fd96 	bl	8009594 <aci_gatt_write_permit_req_event>

  return status;
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	b298      	uxth	r0, r3
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	885b      	ldrh	r3, [r3, #2]
 8008a8c:	b299      	uxth	r1, r3
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	889b      	ldrh	r3, [r3, #4]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	461a      	mov	r2, r3
 8008a96:	f7f9 fe07 	bl	80026a8 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b0a6      	sub	sp, #152	; 0x98
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008aac:	2300      	movs	r3, #0
 8008aae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ac4:	e019      	b.n	8008afa <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8008ac6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008aca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	3398      	adds	r3, #152	; 0x98
 8008ae0:	443b      	add	r3, r7
 8008ae2:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8008ae6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008aea:	3302      	adds	r3, #2
 8008aec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8008af0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008af4:	3301      	adds	r3, #1
 8008af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008afa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008afe:	789b      	ldrb	r3, [r3, #2]
 8008b00:	461a      	mov	r2, r3
 8008b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b06:	4293      	cmp	r3, r2
 8008b08:	dbdd      	blt.n	8008ac6 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8008b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	b298      	uxth	r0, r3
 8008b12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b16:	789b      	ldrb	r3, [r3, #2]
 8008b18:	f107 0208 	add.w	r2, r7, #8
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	f000 fd49 	bl	80095b4 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8008b22:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3798      	adds	r7, #152	; 0x98
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	885b      	ldrh	r3, [r3, #2]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	f000 fd3f 	bl	80095d0 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fd3a 	bl	80095ec <aci_gatt_server_confirmation_event>

  return status;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8008b82:	b590      	push	{r4, r7, lr}
 8008b84:	b087      	sub	sp, #28
 8008b86:	af02      	add	r7, sp, #8
 8008b88:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	b298      	uxth	r0, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	885b      	ldrh	r3, [r3, #2]
 8008b9c:	b299      	uxth	r1, r3
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	889b      	ldrh	r3, [r3, #4]
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	4623      	mov	r3, r4
 8008bb0:	f000 fd27 	bl	8009602 <aci_gatt_prepare_write_permit_req_event>

  return status;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd90      	pop	{r4, r7, pc}

08008bbe <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8008bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bc0:	b08b      	sub	sp, #44	; 0x2c
 8008bc2:	af06      	add	r7, sp, #24
 8008bc4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	781d      	ldrb	r5, [r3, #0]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008bd8:	b29e      	uxth	r6, r3
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	f893 c003 	ldrb.w	ip, [r3, #3]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8008bf0:	b292      	uxth	r2, r2
 8008bf2:	68b9      	ldr	r1, [r7, #8]
 8008bf4:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8008bf8:	b289      	uxth	r1, r1
 8008bfa:	68b8      	ldr	r0, [r7, #8]
 8008bfc:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8008c00:	b280      	uxth	r0, r0
 8008c02:	68bc      	ldr	r4, [r7, #8]
 8008c04:	7c64      	ldrb	r4, [r4, #17]
 8008c06:	9404      	str	r4, [sp, #16]
 8008c08:	9003      	str	r0, [sp, #12]
 8008c0a:	9102      	str	r1, [sp, #8]
 8008c0c:	9201      	str	r2, [sp, #4]
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	4673      	mov	r3, lr
 8008c12:	4662      	mov	r2, ip
 8008c14:	4631      	mov	r1, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	f7f9 fd02 	bl	8002620 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c26 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b0a4      	sub	sp, #144	; 0x90
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008c40:	2300      	movs	r3, #0
 8008c42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c46:	e0b3      	b.n	8008db0 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8008c48:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008c4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	4413      	add	r3, r2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	7819      	ldrb	r1, [r3, #0]
 8008c60:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	3390      	adds	r3, #144	; 0x90
 8008c6e:	443b      	add	r3, r7
 8008c70:	3b88      	subs	r3, #136	; 0x88
 8008c72:	460a      	mov	r2, r1
 8008c74:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008c76:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8008c80:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008c84:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	4413      	add	r3, r2
 8008c92:	440b      	add	r3, r1
 8008c94:	3302      	adds	r3, #2
 8008c96:	7819      	ldrb	r1, [r3, #0]
 8008c98:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	3390      	adds	r3, #144	; 0x90
 8008ca6:	443b      	add	r3, r7
 8008ca8:	3b87      	subs	r3, #135	; 0x87
 8008caa:	460a      	mov	r2, r1
 8008cac:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008cae:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8008cb8:	f107 0108 	add.w	r1, r7, #8
 8008cbc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	440b      	add	r3, r1
 8008cca:	1c98      	adds	r0, r3, #2
 8008ccc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	4413      	add	r3, r2
 8008cda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cde:	4413      	add	r3, r2
 8008ce0:	3303      	adds	r3, #3
 8008ce2:	2206      	movs	r2, #6
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	f001 f9e9 	bl	800a0bc <memcpy>
    size += 6;
 8008cea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008cee:	3306      	adds	r3, #6
 8008cf0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8008cf4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008cf8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	4413      	add	r3, r2
 8008d06:	440b      	add	r3, r1
 8008d08:	3309      	adds	r3, #9
 8008d0a:	7819      	ldrb	r1, [r3, #0]
 8008d0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008d10:	4613      	mov	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	3390      	adds	r3, #144	; 0x90
 8008d1a:	443b      	add	r3, r7
 8008d1c:	3b80      	subs	r3, #128	; 0x80
 8008d1e:	460a      	mov	r2, r1
 8008d20:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008d22:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008d26:	3301      	adds	r3, #1
 8008d28:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8008d2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008d30:	4613      	mov	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	4413      	add	r3, r2
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d40:	4413      	add	r3, r2
 8008d42:	1c99      	adds	r1, r3, #2
 8008d44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008d48:	4613      	mov	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	3390      	adds	r3, #144	; 0x90
 8008d52:	443b      	add	r3, r7
 8008d54:	3b7c      	subs	r3, #124	; 0x7c
 8008d56:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8008d58:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008d5c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008d60:	4613      	mov	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	4413      	add	r3, r2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3309      	adds	r3, #9
 8008d6e:	781a      	ldrb	r2, [r3, #0]
 8008d70:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008d74:	4413      	add	r3, r2
 8008d76:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8008d7a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	4413      	add	r3, r2
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	b259      	sxtb	r1, r3
 8008d86:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	3390      	adds	r3, #144	; 0x90
 8008d94:	443b      	add	r3, r7
 8008d96:	3b78      	subs	r3, #120	; 0x78
 8008d98:	460a      	mov	r2, r1
 8008d9a:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008d9c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008da0:	3301      	adds	r3, #1
 8008da2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008da6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008daa:	3301      	adds	r3, #1
 8008dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	f6ff af43 	blt.w	8008c48 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 8008dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	f107 0208 	add.w	r2, r7, #8
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 f9e3 	bl	800919a <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 8008dd4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3790      	adds	r7, #144	; 0x90
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 8008de0:	b590      	push	{r4, r7, lr}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af02      	add	r7, sp, #8
 8008de6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	7818      	ldrb	r0, [r3, #0]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008dfa:	b299      	uxth	r1, r3
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008e0a:	b29c      	uxth	r4, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	4623      	mov	r3, r4
 8008e18:	f000 f9cb 	bl	80091b2 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd90      	pop	{r4, r7, pc}

08008e26 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	7818      	ldrb	r0, [r3, #0]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008e40:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8008e46:	461a      	mov	r2, r3
 8008e48:	f000 f9c7 	bl	80091da <hci_le_read_remote_used_features_complete_event>

  return status;
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	895b      	ldrh	r3, [r3, #10]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	461a      	mov	r2, r3
 8008e78:	f000 f9bd 	bl	80091f6 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 8008e86:	b590      	push	{r4, r7, lr}
 8008e88:	b087      	sub	sp, #28
 8008e8a:	af02      	add	r7, sp, #8
 8008e8c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	b298      	uxth	r0, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	885b      	ldrh	r3, [r3, #2]
 8008ea0:	b299      	uxth	r1, r3
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	889b      	ldrh	r3, [r3, #4]
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	88db      	ldrh	r3, [r3, #6]
 8008eac:	b29c      	uxth	r4, r3
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	891b      	ldrh	r3, [r3, #8]
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	f000 f9ab 	bl	8009212 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd90      	pop	{r4, r7, pc}

08008ec6 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	f000 f9aa 	bl	800923a <hci_le_read_local_p256_public_key_complete_event>

  return status;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f000 f9a1 	bl	8009252 <hci_le_generate_dhkey_complete_event>

  return status;
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8008f1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f1e:	b08d      	sub	sp, #52	; 0x34
 8008f20:	af08      	add	r7, sp, #32
 8008f22:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f893 c000 	ldrb.w	ip, [r3]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f38:	fa1f fe83 	uxth.w	lr, r3
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	f893 8003 	ldrb.w	r8, [r3, #3]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 8008f50:	68b9      	ldr	r1, [r7, #8]
 8008f52:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8008f54:	68b8      	ldr	r0, [r7, #8]
 8008f56:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8008f5a:	b280      	uxth	r0, r0
 8008f5c:	68bc      	ldr	r4, [r7, #8]
 8008f5e:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 8008f62:	b2a4      	uxth	r4, r4
 8008f64:	68bd      	ldr	r5, [r7, #8]
 8008f66:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 8008f6a:	b2ad      	uxth	r5, r5
 8008f6c:	68be      	ldr	r6, [r7, #8]
 8008f6e:	7f76      	ldrb	r6, [r6, #29]
 8008f70:	9606      	str	r6, [sp, #24]
 8008f72:	9505      	str	r5, [sp, #20]
 8008f74:	9404      	str	r4, [sp, #16]
 8008f76:	9003      	str	r0, [sp, #12]
 8008f78:	9102      	str	r1, [sp, #8]
 8008f7a:	9201      	str	r2, [sp, #4]
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	464b      	mov	r3, r9
 8008f80:	4642      	mov	r2, r8
 8008f82:	4671      	mov	r1, lr
 8008f84:	4660      	mov	r0, ip
 8008f86:	f000 f970 	bl	800926a <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008f96 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b0a6      	sub	sp, #152	; 0x98
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fb6:	e085      	b.n	80090c4 <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 8008fb8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008fbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fc0:	011b      	lsls	r3, r3, #4
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fcc:	011b      	lsls	r3, r3, #4
 8008fce:	3398      	adds	r3, #152	; 0x98
 8008fd0:	443b      	add	r3, r7
 8008fd2:	3b90      	subs	r3, #144	; 0x90
 8008fd4:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008fd6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008fda:	3301      	adds	r3, #1
 8008fdc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8008fe0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008fe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fe8:	011b      	lsls	r3, r3, #4
 8008fea:	4413      	add	r3, r2
 8008fec:	3302      	adds	r3, #2
 8008fee:	781a      	ldrb	r2, [r3, #0]
 8008ff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ff4:	011b      	lsls	r3, r3, #4
 8008ff6:	3398      	adds	r3, #152	; 0x98
 8008ff8:	443b      	add	r3, r7
 8008ffa:	3b8f      	subs	r3, #143	; 0x8f
 8008ffc:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008ffe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009002:	3301      	adds	r3, #1
 8009004:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8009008:	f107 0208 	add.w	r2, r7, #8
 800900c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	4413      	add	r3, r2
 8009014:	1c98      	adds	r0, r3, #2
 8009016:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800901a:	011b      	lsls	r3, r3, #4
 800901c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009020:	4413      	add	r3, r2
 8009022:	3303      	adds	r3, #3
 8009024:	2206      	movs	r2, #6
 8009026:	4619      	mov	r1, r3
 8009028:	f001 f848 	bl	800a0bc <memcpy>
    size += 6;
 800902c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009030:	3306      	adds	r3, #6
 8009032:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8009036:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800903a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	4413      	add	r3, r2
 8009042:	3309      	adds	r3, #9
 8009044:	781a      	ldrb	r2, [r3, #0]
 8009046:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800904a:	011b      	lsls	r3, r3, #4
 800904c:	3398      	adds	r3, #152	; 0x98
 800904e:	443b      	add	r3, r7
 8009050:	3b88      	subs	r3, #136	; 0x88
 8009052:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009054:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009058:	3301      	adds	r3, #1
 800905a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800905e:	f107 0208 	add.w	r2, r7, #8
 8009062:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009066:	011b      	lsls	r3, r3, #4
 8009068:	3308      	adds	r3, #8
 800906a:	4413      	add	r3, r2
 800906c:	1c58      	adds	r0, r3, #1
 800906e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009072:	011b      	lsls	r3, r3, #4
 8009074:	3308      	adds	r3, #8
 8009076:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800907a:	4413      	add	r3, r2
 800907c:	3302      	adds	r3, #2
 800907e:	2206      	movs	r2, #6
 8009080:	4619      	mov	r1, r3
 8009082:	f001 f81b 	bl	800a0bc <memcpy>
    size += 6;
 8009086:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800908a:	3306      	adds	r3, #6
 800908c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8009090:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009098:	011b      	lsls	r3, r3, #4
 800909a:	4413      	add	r3, r2
 800909c:	3310      	adds	r3, #16
 800909e:	f993 2000 	ldrsb.w	r2, [r3]
 80090a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	3398      	adds	r3, #152	; 0x98
 80090aa:	443b      	add	r3, r7
 80090ac:	3b81      	subs	r3, #129	; 0x81
 80090ae:	701a      	strb	r2, [r3, #0]
    size += 1;
 80090b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80090b4:	3301      	adds	r3, #1
 80090b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 80090ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090be:	3301      	adds	r3, #1
 80090c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090d0:	4293      	cmp	r3, r2
 80090d2:	f6ff af71 	blt.w	8008fb8 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 80090d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	f107 0208 	add.w	r2, r7, #8
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 f8d5 	bl	8009292 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 80090e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3798      	adds	r7, #152	; 0x98
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	71fb      	strb	r3, [r7, #7]
 80090fe:	460b      	mov	r3, r1
 8009100:	80bb      	strh	r3, [r7, #4]
 8009102:	4613      	mov	r3, r2
 8009104:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8009106:	bf00      	nop
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8009112:	b490      	push	{r4, r7}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	4604      	mov	r4, r0
 800911a:	4608      	mov	r0, r1
 800911c:	4611      	mov	r1, r2
 800911e:	461a      	mov	r2, r3
 8009120:	4623      	mov	r3, r4
 8009122:	71fb      	strb	r3, [r7, #7]
 8009124:	4603      	mov	r3, r0
 8009126:	80bb      	strh	r3, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	71bb      	strb	r3, [r7, #6]
 800912c:	4613      	mov	r3, r2
 800912e:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bc90      	pop	{r4, r7}
 8009138:	4770      	bx	lr

0800913a <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	4603      	mov	r3, r0
 8009142:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	6039      	str	r1, [r7, #0]
 800915a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 8009172:	bf00      	nop
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	4603      	mov	r3, r0
 8009186:	460a      	mov	r2, r1
 8009188:	71fb      	strb	r3, [r7, #7]
 800918a:	4613      	mov	r3, r2
 800918c:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800918e:	bf00      	nop
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	4603      	mov	r3, r0
 80091a2:	6039      	str	r1, [r7, #0]
 80091a4:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 80091a6:	bf00      	nop
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 80091b2:	b490      	push	{r4, r7}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	4604      	mov	r4, r0
 80091ba:	4608      	mov	r0, r1
 80091bc:	4611      	mov	r1, r2
 80091be:	461a      	mov	r2, r3
 80091c0:	4623      	mov	r3, r4
 80091c2:	71fb      	strb	r3, [r7, #7]
 80091c4:	4603      	mov	r3, r0
 80091c6:	80bb      	strh	r3, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	807b      	strh	r3, [r7, #2]
 80091cc:	4613      	mov	r3, r2
 80091ce:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bc90      	pop	{r4, r7}
 80091d8:	4770      	bx	lr

080091da <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 80091da:	b480      	push	{r7}
 80091dc:	b083      	sub	sp, #12
 80091de:	af00      	add	r7, sp, #0
 80091e0:	4603      	mov	r3, r0
 80091e2:	603a      	str	r2, [r7, #0]
 80091e4:	71fb      	strb	r3, [r7, #7]
 80091e6:	460b      	mov	r3, r1
 80091e8:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	4603      	mov	r3, r0
 80091fe:	6039      	str	r1, [r7, #0]
 8009200:	80fb      	strh	r3, [r7, #6]
 8009202:	4613      	mov	r3, r2
 8009204:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8009206:	bf00      	nop
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8009212:	b490      	push	{r4, r7}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	4604      	mov	r4, r0
 800921a:	4608      	mov	r0, r1
 800921c:	4611      	mov	r1, r2
 800921e:	461a      	mov	r2, r3
 8009220:	4623      	mov	r3, r4
 8009222:	80fb      	strh	r3, [r7, #6]
 8009224:	4603      	mov	r3, r0
 8009226:	80bb      	strh	r3, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	807b      	strh	r3, [r7, #2]
 800922c:	4613      	mov	r3, r2
 800922e:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bc90      	pop	{r4, r7}
 8009238:	4770      	bx	lr

0800923a <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	4603      	mov	r3, r0
 8009242:	6039      	str	r1, [r7, #0]
 8009244:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8009246:	bf00      	nop
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	4603      	mov	r3, r0
 800925a:	6039      	str	r1, [r7, #0]
 800925c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 800925e:	bf00      	nop
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800926a:	b490      	push	{r4, r7}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	4604      	mov	r4, r0
 8009272:	4608      	mov	r0, r1
 8009274:	4611      	mov	r1, r2
 8009276:	461a      	mov	r2, r3
 8009278:	4623      	mov	r3, r4
 800927a:	71fb      	strb	r3, [r7, #7]
 800927c:	4603      	mov	r3, r0
 800927e:	80bb      	strh	r3, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	71bb      	strb	r3, [r7, #6]
 8009284:	4613      	mov	r3, r2
 8009286:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8009288:	bf00      	nop
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bc90      	pop	{r4, r7}
 8009290:	4770      	bx	lr

08009292 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	4603      	mov	r3, r0
 800929a:	6039      	str	r1, [r7, #0]
 800929c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 80092aa:	b480      	push	{r7}
 80092ac:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 80092ae:	bf00      	nop
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	80fb      	strh	r3, [r7, #6]
 80092c2:	460b      	mov	r3, r1
 80092c4:	717b      	strb	r3, [r7, #5]
 80092c6:	4613      	mov	r3, r2
 80092c8:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 80092ca:	bf00      	nop
 80092cc:	370c      	adds	r7, #12
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 80092d6:	b480      	push	{r7}
 80092d8:	b083      	sub	sp, #12
 80092da:	af00      	add	r7, sp, #0
 80092dc:	4603      	mov	r3, r0
 80092de:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8009302:	b480      	push	{r7}
 8009304:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8009306:	bf00      	nop
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8009310:	b480      	push	{r7}
 8009312:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8009314:	bf00      	nop
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	603b      	str	r3, [r7, #0]
 8009326:	4603      	mov	r3, r0
 8009328:	71fb      	strb	r3, [r7, #7]
 800932a:	460b      	mov	r3, r1
 800932c:	71bb      	strb	r3, [r7, #6]
 800932e:	4613      	mov	r3, r2
 8009330:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 8009332:	bf00      	nop
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	4603      	mov	r3, r0
 8009346:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	4603      	mov	r3, r0
 800935c:	6039      	str	r1, [r7, #0]
 800935e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	460a      	mov	r2, r1
 8009376:	80fb      	strh	r3, [r7, #6]
 8009378:	4613      	mov	r3, r2
 800937a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <aci_gatt_attribute_modified_event>:
WEAK_FUNCTION(void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[]))
{
 8009388:	b490      	push	{r4, r7}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	4611      	mov	r1, r2
 8009394:	461a      	mov	r2, r3
 8009396:	4623      	mov	r3, r4
 8009398:	80fb      	strh	r3, [r7, #6]
 800939a:	4603      	mov	r3, r0
 800939c:	80bb      	strh	r3, [r7, #4]
 800939e:	460b      	mov	r3, r1
 80093a0:	807b      	strh	r3, [r7, #2]
 80093a2:	4613      	mov	r3, r2
 80093a4:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_attribute_modified_event\r\n");
}
 80093a6:	bf00      	nop
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bc90      	pop	{r4, r7}
 80093ae:	4770      	bx	lr

080093b0 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	4603      	mov	r3, r0
 80093ce:	460a      	mov	r2, r1
 80093d0:	80fb      	strh	r3, [r7, #6]
 80093d2:	4613      	mov	r3, r2
 80093d4:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	603b      	str	r3, [r7, #0]
 80093ea:	4603      	mov	r3, r0
 80093ec:	80fb      	strh	r3, [r7, #6]
 80093ee:	460b      	mov	r3, r1
 80093f0:	717b      	strb	r3, [r7, #5]
 80093f2:	4613      	mov	r3, r2
 80093f4:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	4603      	mov	r3, r0
 800940a:	603a      	str	r2, [r7, #0]
 800940c:	80fb      	strh	r3, [r7, #6]
 800940e:	460b      	mov	r3, r1
 8009410:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8009412:	bf00      	nop
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	603b      	str	r3, [r7, #0]
 8009426:	4603      	mov	r3, r0
 8009428:	80fb      	strh	r3, [r7, #6]
 800942a:	460b      	mov	r3, r1
 800942c:	717b      	strb	r3, [r7, #5]
 800942e:	4613      	mov	r3, r2
 8009430:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8009432:	bf00      	nop
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	4603      	mov	r3, r0
 8009446:	603a      	str	r2, [r7, #0]
 8009448:	80fb      	strh	r3, [r7, #6]
 800944a:	460b      	mov	r3, r1
 800944c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 800944e:	bf00      	nop
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	4603      	mov	r3, r0
 8009462:	603a      	str	r2, [r7, #0]
 8009464:	80fb      	strh	r3, [r7, #6]
 8009466:	460b      	mov	r3, r1
 8009468:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	4603      	mov	r3, r0
 800947e:	603a      	str	r2, [r7, #0]
 8009480:	80fb      	strh	r3, [r7, #6]
 8009482:	460b      	mov	r3, r1
 8009484:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	603b      	str	r3, [r7, #0]
 800949a:	4603      	mov	r3, r0
 800949c:	80fb      	strh	r3, [r7, #6]
 800949e:	460b      	mov	r3, r1
 80094a0:	717b      	strb	r3, [r7, #5]
 80094a2:	4613      	mov	r3, r2
 80094a4:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 80094b2:	b490      	push	{r4, r7}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	4604      	mov	r4, r0
 80094ba:	4608      	mov	r0, r1
 80094bc:	4611      	mov	r1, r2
 80094be:	461a      	mov	r2, r3
 80094c0:	4623      	mov	r3, r4
 80094c2:	80fb      	strh	r3, [r7, #6]
 80094c4:	4603      	mov	r3, r0
 80094c6:	80bb      	strh	r3, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	807b      	strh	r3, [r7, #2]
 80094cc:	4613      	mov	r3, r2
 80094ce:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bc90      	pop	{r4, r7}
 80094d8:	4770      	bx	lr

080094da <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	4603      	mov	r3, r0
 80094e2:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	607b      	str	r3, [r7, #4]
 80094f8:	4603      	mov	r3, r0
 80094fa:	81fb      	strh	r3, [r7, #14]
 80094fc:	460b      	mov	r3, r1
 80094fe:	81bb      	strh	r3, [r7, #12]
 8009500:	4613      	mov	r3, r2
 8009502:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8009504:	bf00      	nop
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	607b      	str	r3, [r7, #4]
 8009518:	4603      	mov	r3, r0
 800951a:	81fb      	strh	r3, [r7, #14]
 800951c:	460b      	mov	r3, r1
 800951e:	81bb      	strh	r3, [r7, #12]
 8009520:	4613      	mov	r3, r2
 8009522:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 8009524:	bf00      	nop
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	4603      	mov	r3, r0
 8009538:	460a      	mov	r2, r1
 800953a:	80fb      	strh	r3, [r7, #6]
 800953c:	4613      	mov	r3, r2
 800953e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 800954c:	b490      	push	{r4, r7}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	4611      	mov	r1, r2
 8009558:	461a      	mov	r2, r3
 800955a:	4623      	mov	r3, r4
 800955c:	80fb      	strh	r3, [r7, #6]
 800955e:	4603      	mov	r3, r0
 8009560:	717b      	strb	r3, [r7, #5]
 8009562:	460b      	mov	r3, r1
 8009564:	807b      	strh	r3, [r7, #2]
 8009566:	4613      	mov	r3, r2
 8009568:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bc90      	pop	{r4, r7}
 8009572:	4770      	bx	lr

08009574 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	607b      	str	r3, [r7, #4]
 800957c:	4603      	mov	r3, r0
 800957e:	81fb      	strh	r3, [r7, #14]
 8009580:	460b      	mov	r3, r1
 8009582:	81bb      	strh	r3, [r7, #12]
 8009584:	4613      	mov	r3, r2
 8009586:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 8009588:	bf00      	nop
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	607b      	str	r3, [r7, #4]
 800959c:	4603      	mov	r3, r0
 800959e:	81fb      	strh	r3, [r7, #14]
 80095a0:	460b      	mov	r3, r1
 80095a2:	81bb      	strh	r3, [r7, #12]
 80095a4:	4613      	mov	r3, r2
 80095a6:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 80095a8:	bf00      	nop
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	603a      	str	r2, [r7, #0]
 80095be:	80fb      	strh	r3, [r7, #6]
 80095c0:	460b      	mov	r3, r1
 80095c2:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	4603      	mov	r3, r0
 80095d8:	460a      	mov	r2, r1
 80095da:	80fb      	strh	r3, [r7, #6]
 80095dc:	4613      	mov	r3, r2
 80095de:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8009602:	b490      	push	{r4, r7}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	4604      	mov	r4, r0
 800960a:	4608      	mov	r0, r1
 800960c:	4611      	mov	r1, r2
 800960e:	461a      	mov	r2, r3
 8009610:	4623      	mov	r3, r4
 8009612:	80fb      	strh	r3, [r7, #6]
 8009614:	4603      	mov	r3, r0
 8009616:	80bb      	strh	r3, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	807b      	strh	r3, [r7, #2]
 800961c:	4613      	mov	r3, r2
 800961e:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8009620:	bf00      	nop
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bc90      	pop	{r4, r7}
 8009628:	4770      	bx	lr

0800962a <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	4603      	mov	r3, r0
 8009632:	460a      	mov	r2, r1
 8009634:	80fb      	strh	r3, [r7, #6]
 8009636:	4613      	mov	r3, r2
 8009638:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	4603      	mov	r3, r0
 800964e:	603a      	str	r2, [r7, #0]
 8009650:	80fb      	strh	r3, [r7, #6]
 8009652:	460b      	mov	r3, r1
 8009654:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 8009656:	bf00      	nop
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8009662:	b490      	push	{r4, r7}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	4604      	mov	r4, r0
 800966a:	4608      	mov	r0, r1
 800966c:	4611      	mov	r1, r2
 800966e:	461a      	mov	r2, r3
 8009670:	4623      	mov	r3, r4
 8009672:	80fb      	strh	r3, [r7, #6]
 8009674:	4603      	mov	r3, r0
 8009676:	717b      	strb	r3, [r7, #5]
 8009678:	460b      	mov	r3, r1
 800967a:	807b      	strh	r3, [r7, #2]
 800967c:	4613      	mov	r3, r2
 800967e:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bc90      	pop	{r4, r7}
 8009688:	4770      	bx	lr

0800968a <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800968a:	b490      	push	{r4, r7}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
 8009690:	4604      	mov	r4, r0
 8009692:	4608      	mov	r0, r1
 8009694:	4611      	mov	r1, r2
 8009696:	461a      	mov	r2, r3
 8009698:	4623      	mov	r3, r4
 800969a:	80fb      	strh	r3, [r7, #6]
 800969c:	4603      	mov	r3, r0
 800969e:	717b      	strb	r3, [r7, #5]
 80096a0:	460b      	mov	r3, r1
 80096a2:	807b      	strh	r3, [r7, #2]
 80096a4:	4613      	mov	r3, r2
 80096a6:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 80096a8:	bf00      	nop
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc90      	pop	{r4, r7}
 80096b0:	4770      	bx	lr

080096b2 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	4603      	mov	r3, r0
 80096ba:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	607a      	str	r2, [r7, #4]
 80096e6:	603b      	str	r3, [r7, #0]
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 80096ec:	bf00      	nop
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	603a      	str	r2, [r7, #0]
 8009702:	71fb      	strb	r3, [r7, #7]
 8009704:	460b      	mov	r3, r1
 8009706:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	603a      	str	r2, [r7, #0]
 800971e:	71fb      	strb	r3, [r7, #7]
 8009720:	460b      	mov	r3, r1
 8009722:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	603a      	str	r2, [r7, #0]
 800973a:	71fb      	strb	r3, [r7, #7]
 800973c:	460b      	mov	r3, r1
 800973e:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009756:	f107 0308 	add.w	r3, r7, #8
 800975a:	2218      	movs	r2, #24
 800975c:	2100      	movs	r1, #0
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fcba 	bl	800a0d8 <memset>
  rq.ogf = 0x03;
 8009764:	2303      	movs	r3, #3
 8009766:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009768:	2303      	movs	r3, #3
 800976a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800976c:	1dfb      	adds	r3, r7, #7
 800976e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009770:	2301      	movs	r3, #1
 8009772:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8009774:	f107 0308 	add.w	r3, r7, #8
 8009778:	2100      	movs	r1, #0
 800977a:	4618      	mov	r0, r3
 800977c:	f000 f9ca 	bl	8009b14 <hci_send_req>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	da01      	bge.n	800978a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009786:	23ff      	movs	r3, #255	; 0xff
 8009788:	e005      	b.n	8009796 <hci_reset+0x4a>
  if (status) {
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <hci_reset+0x48>
    return status;
 8009790:	79fb      	ldrb	r3, [r7, #7]
 8009792:	e000      	b.n	8009796 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3720      	adds	r7, #32
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b08e      	sub	sp, #56	; 0x38
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80097ac:	f107 0314 	add.w	r3, r7, #20
 80097b0:	2209      	movs	r2, #9
 80097b2:	2100      	movs	r1, #0
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 fc8f 	bl	800a0d8 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80097ba:	f107 0320 	add.w	r3, r7, #32
 80097be:	2218      	movs	r2, #24
 80097c0:	2100      	movs	r1, #0
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 fc88 	bl	800a0d8 <memset>
  rq.ogf = 0x04;
 80097c8:	2304      	movs	r3, #4
 80097ca:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 80097cc:	2301      	movs	r3, #1
 80097ce:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 80097d0:	f107 0314 	add.w	r3, r7, #20
 80097d4:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 80097d6:	2309      	movs	r3, #9
 80097d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 80097da:	f107 0320 	add.w	r3, r7, #32
 80097de:	2100      	movs	r1, #0
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 f997 	bl	8009b14 <hci_send_req>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	da01      	bge.n	80097f0 <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 80097ec:	23ff      	movs	r3, #255	; 0xff
 80097ee:	e018      	b.n	8009822 <hci_read_local_version_information+0x84>
  if (resp.Status) {
 80097f0:	7d3b      	ldrb	r3, [r7, #20]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <hci_read_local_version_information+0x5c>
    return resp.Status;
 80097f6:	7d3b      	ldrb	r3, [r7, #20]
 80097f8:	e013      	b.n	8009822 <hci_read_local_version_information+0x84>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 80097fa:	7d7a      	ldrb	r2, [r7, #21]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 8009800:	8afa      	ldrh	r2, [r7, #22]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 8009806:	7e3a      	ldrb	r2, [r7, #24]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800980c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009810:	b29a      	uxth	r2, r3
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 8009816:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800981a:	b29a      	uxth	r2, r3
 800981c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800981e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3738      	adds	r7, #56	; 0x38
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b0cc      	sub	sp, #304	; 0x130
 800982e:	af00      	add	r7, sp, #0
 8009830:	4602      	mov	r2, r0
 8009832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800983a:	6019      	str	r1, [r3, #0]
 800983c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009840:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009844:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8009846:	f107 030c 	add.w	r3, r7, #12
 800984a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800984e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009852:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009856:	2200      	movs	r2, #0
 8009858:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 8009860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009864:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009868:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800986c:	7812      	ldrb	r2, [r2, #0]
 800986e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009870:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009874:	3301      	adds	r3, #1
 8009876:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800987a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800987e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00a      	beq.n	800989e <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8009888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800988c:	1c58      	adds	r0, r3, #1
 800988e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009896:	221f      	movs	r2, #31
 8009898:	6819      	ldr	r1, [r3, #0]
 800989a:	f000 fc0f 	bl	800a0bc <memcpy>
  }
  index_input += 31;
 800989e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80098a2:	331f      	adds	r3, #31
 80098a4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80098a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098ac:	2218      	movs	r2, #24
 80098ae:	2100      	movs	r1, #0
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fc11 	bl	800a0d8 <memset>
  rq.ogf = 0x08;
 80098b6:	2308      	movs	r3, #8
 80098b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 80098bc:	2309      	movs	r3, #9
 80098be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80098c2:	f107 030c 	add.w	r3, r7, #12
 80098c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80098ca:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80098ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80098d2:	f107 030b 	add.w	r3, r7, #11
 80098d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80098da:	2301      	movs	r3, #1
 80098dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80098e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098e4:	2100      	movs	r1, #0
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 f914 	bl	8009b14 <hci_send_req>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	da01      	bge.n	80098f6 <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 80098f2:	23ff      	movs	r3, #255	; 0xff
 80098f4:	e00d      	b.n	8009912 <hci_le_set_scan_response_data+0xe8>
  if (status) {
 80098f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098fa:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <hci_le_set_scan_response_data+0xe6>
    return status;
 8009904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009908:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	e000      	b.n	8009912 <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3308      	adds	r3, #8
 8009928:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b04      	cmp	r3, #4
 8009930:	d001      	beq.n	8009936 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8009932:	2301      	movs	r3, #1
 8009934:	e00c      	b.n	8009950 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3302      	adds	r3, #2
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009944:	3b03      	subs	r3, #3
 8009946:	429a      	cmp	r2, r3
 8009948:	d001      	beq.n	800994e <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800994a:	2302      	movs	r3, #2
 800994c:	e000      	b.n	8009950 <verify_packet+0x34>
  
  return 0;      
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b0a6      	sub	sp, #152	; 0x98
 8009960:	af00      	add	r7, sp, #0
 8009962:	607b      	str	r3, [r7, #4]
 8009964:	4603      	mov	r3, r0
 8009966:	81fb      	strh	r3, [r7, #14]
 8009968:	460b      	mov	r3, r1
 800996a:	81bb      	strh	r3, [r7, #12]
 800996c:	4613      	mov	r3, r2
 800996e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009970:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009978:	b21a      	sxth	r2, r3
 800997a:	89fb      	ldrh	r3, [r7, #14]
 800997c:	029b      	lsls	r3, r3, #10
 800997e:	b21b      	sxth	r3, r3
 8009980:	4313      	orrs	r3, r2
 8009982:	b21b      	sxth	r3, r3
 8009984:	b29b      	uxth	r3, r3
 8009986:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800998c:	2301      	movs	r3, #1
 800998e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009990:	f107 0318 	add.w	r3, r7, #24
 8009994:	3301      	adds	r3, #1
 8009996:	461a      	mov	r2, r3
 8009998:	f107 0314 	add.w	r3, r7, #20
 800999c:	8819      	ldrh	r1, [r3, #0]
 800999e:	789b      	ldrb	r3, [r3, #2]
 80099a0:	8011      	strh	r1, [r2, #0]
 80099a2:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80099a4:	f107 0318 	add.w	r3, r7, #24
 80099a8:	3304      	adds	r3, #4
 80099aa:	7afa      	ldrb	r2, [r7, #11]
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fb84 	bl	800a0bc <memcpy>
  
  if (hciContext.io.Send)
 80099b4:	4b08      	ldr	r3, [pc, #32]	; (80099d8 <send_cmd+0x7c>)
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d009      	beq.n	80099d0 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80099bc:	4b06      	ldr	r3, [pc, #24]	; (80099d8 <send_cmd+0x7c>)
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	7afa      	ldrb	r2, [r7, #11]
 80099c2:	b292      	uxth	r2, r2
 80099c4:	3204      	adds	r2, #4
 80099c6:	b291      	uxth	r1, r2
 80099c8:	f107 0218 	add.w	r2, r7, #24
 80099cc:	4610      	mov	r0, r2
 80099ce:	4798      	blx	r3
  }
}
 80099d0:	bf00      	nop
 80099d2:	3798      	adds	r7, #152	; 0x98
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	20000a5c 	.word	0x20000a5c

080099dc <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80099e6:	e00a      	b.n	80099fe <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80099e8:	f107 030c 	add.w	r3, r7, #12
 80099ec:	4619      	mov	r1, r3
 80099ee:	6838      	ldr	r0, [r7, #0]
 80099f0:	f000 faea 	bl	8009fc8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fa51 	bl	8009ea0 <list_insert_head>
  while (!list_is_empty(src_list))
 80099fe:	6838      	ldr	r0, [r7, #0]
 8009a00:	f000 fa2c 	bl	8009e5c <list_is_empty>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0ee      	beq.n	80099e8 <move_list+0xc>
  }
}
 8009a0a:	bf00      	nop
 8009a0c:	bf00      	nop
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009a1a:	e009      	b.n	8009a30 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009a1c:	1d3b      	adds	r3, r7, #4
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4809      	ldr	r0, [pc, #36]	; (8009a48 <free_event_list+0x34>)
 8009a22:	f000 faaa 	bl	8009f7a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	4808      	ldr	r0, [pc, #32]	; (8009a4c <free_event_list+0x38>)
 8009a2c:	f000 fa5e 	bl	8009eec <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009a30:	4806      	ldr	r0, [pc, #24]	; (8009a4c <free_event_list+0x38>)
 8009a32:	f000 faf0 	bl	800a016 <list_get_size>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	ddef      	ble.n	8009a1c <free_event_list+0x8>
  }
}
 8009a3c:	bf00      	nop
 8009a3e:	bf00      	nop
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	200004dc 	.word	0x200004dc
 8009a4c:	200004d4 	.word	0x200004d4

08009a50 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8009a60:	4a18      	ldr	r2, [pc, #96]	; (8009ac4 <hci_init+0x74>)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8009a66:	4818      	ldr	r0, [pc, #96]	; (8009ac8 <hci_init+0x78>)
 8009a68:	f000 f9e8 	bl	8009e3c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8009a6c:	4817      	ldr	r0, [pc, #92]	; (8009acc <hci_init+0x7c>)
 8009a6e:	f000 f9e5 	bl	8009e3c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8009a72:	f7f9 fb01 	bl	8003078 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009a76:	2300      	movs	r3, #0
 8009a78:	73fb      	strb	r3, [r7, #15]
 8009a7a:	e00c      	b.n	8009a96 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	228c      	movs	r2, #140	; 0x8c
 8009a80:	fb02 f303 	mul.w	r3, r2, r3
 8009a84:	4a12      	ldr	r2, [pc, #72]	; (8009ad0 <hci_init+0x80>)
 8009a86:	4413      	add	r3, r2
 8009a88:	4619      	mov	r1, r3
 8009a8a:	480f      	ldr	r0, [pc, #60]	; (8009ac8 <hci_init+0x78>)
 8009a8c:	f000 fa2e 	bl	8009eec <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	3301      	adds	r3, #1
 8009a94:	73fb      	strb	r3, [r7, #15]
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	2b09      	cmp	r3, #9
 8009a9a:	d9ef      	bls.n	8009a7c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009a9c:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <hci_init+0x74>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d003      	beq.n	8009aac <hci_init+0x5c>
 8009aa4:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <hci_init+0x74>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009aac:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <hci_init+0x74>)
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <hci_init+0x6a>
 8009ab4:	4b03      	ldr	r3, [pc, #12]	; (8009ac4 <hci_init+0x74>)
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	4798      	blx	r3
}
 8009aba:	bf00      	nop
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20000a5c 	.word	0x20000a5c
 8009ac8:	200004d4 	.word	0x200004d4
 8009acc:	200004dc 	.word	0x200004dc
 8009ad0:	200004e4 	.word	0x200004e4

08009ad4 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a0b      	ldr	r2, [pc, #44]	; (8009b10 <hci_register_io_bus+0x3c>)
 8009ae2:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	4a09      	ldr	r2, [pc, #36]	; (8009b10 <hci_register_io_bus+0x3c>)
 8009aea:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	4a07      	ldr	r2, [pc, #28]	; (8009b10 <hci_register_io_bus+0x3c>)
 8009af2:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	4a05      	ldr	r2, [pc, #20]	; (8009b10 <hci_register_io_bus+0x3c>)
 8009afa:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	4a03      	ldr	r2, [pc, #12]	; (8009b10 <hci_register_io_bus+0x3c>)
 8009b02:	6093      	str	r3, [r2, #8]
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	20000a5c 	.word	0x20000a5c

08009b14 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08e      	sub	sp, #56	; 0x38
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	885b      	ldrh	r3, [r3, #2]
 8009b24:	b21b      	sxth	r3, r3
 8009b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b2a:	b21a      	sxth	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	029b      	lsls	r3, r3, #10
 8009b32:	b21b      	sxth	r3, r3
 8009b34:	4313      	orrs	r3, r2
 8009b36:	b21b      	sxth	r3, r3
 8009b38:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8009b3e:	f107 0308 	add.w	r3, r7, #8
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 f97a 	bl	8009e3c <list_init_head>

  free_event_list();
 8009b48:	f7ff ff64 	bl	8009a14 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	8818      	ldrh	r0, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	8859      	ldrh	r1, [r3, #2]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	f7ff fefd 	bl	800995c <send_cmd>
  
  if (async)
 8009b62:	78fb      	ldrb	r3, [r7, #3]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <hci_send_req+0x58>
  {
    return 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	e0e5      	b.n	8009d38 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009b6c:	f7fa f944 	bl	8003df8 <HAL_GetTick>
 8009b70:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009b72:	f7fa f941 	bl	8003df8 <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b80:	f200 80b6 	bhi.w	8009cf0 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8009b84:	486e      	ldr	r0, [pc, #440]	; (8009d40 <hci_send_req+0x22c>)
 8009b86:	f000 f969 	bl	8009e5c <list_is_empty>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d000      	beq.n	8009b92 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009b90:	e7ef      	b.n	8009b72 <hci_send_req+0x5e>
      {
        break;
 8009b92:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8009b94:	f107 0310 	add.w	r3, r7, #16
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4869      	ldr	r0, [pc, #420]	; (8009d40 <hci_send_req+0x22c>)
 8009b9c:	f000 f9ed 	bl	8009f7a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8009ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b04      	cmp	r3, #4
 8009bac:	d17b      	bne.n	8009ca6 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8009bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	3303      	adds	r3, #3
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009bc2:	3b03      	subs	r3, #3
 8009bc4:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8009bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	2b3e      	cmp	r3, #62	; 0x3e
 8009bcc:	d04d      	beq.n	8009c6a <hci_send_req+0x156>
 8009bce:	2b3e      	cmp	r3, #62	; 0x3e
 8009bd0:	dc6b      	bgt.n	8009caa <hci_send_req+0x196>
 8009bd2:	2b10      	cmp	r3, #16
 8009bd4:	f000 808e 	beq.w	8009cf4 <hci_send_req+0x1e0>
 8009bd8:	2b10      	cmp	r3, #16
 8009bda:	dc66      	bgt.n	8009caa <hci_send_req+0x196>
 8009bdc:	2b0e      	cmp	r3, #14
 8009bde:	d024      	beq.n	8009c2a <hci_send_req+0x116>
 8009be0:	2b0f      	cmp	r3, #15
 8009be2:	d162      	bne.n	8009caa <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	885b      	ldrh	r3, [r3, #2]
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	f040 8081 	bne.w	8009cf8 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	2b0f      	cmp	r3, #15
 8009bfc:	d004      	beq.n	8009c08 <hci_send_req+0xf4>
          if (cs->status) {
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d053      	beq.n	8009cae <hci_send_req+0x19a>
            goto failed;
 8009c06:	e07a      	b.n	8009cfe <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	695a      	ldr	r2, [r3, #20]
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	bf28      	it	cs
 8009c12:	461a      	movcs	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6918      	ldr	r0, [r3, #16]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	461a      	mov	r2, r3
 8009c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c24:	f000 fa4a 	bl	800a0bc <memcpy>
        goto done;
 8009c28:	e07a      	b.n	8009d20 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d15f      	bne.n	8009cfc <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3e:	3303      	adds	r3, #3
 8009c40:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	3b03      	subs	r3, #3
 8009c46:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	695a      	ldr	r2, [r3, #20]
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	bf28      	it	cs
 8009c52:	461a      	movcs	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6918      	ldr	r0, [r3, #16]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	461a      	mov	r2, r3
 8009c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c64:	f000 fa2a 	bl	800a0bc <memcpy>
        goto done;
 8009c68:	e05a      	b.n	8009d20 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d11a      	bne.n	8009cb2 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	695a      	ldr	r2, [r3, #20]
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	bf28      	it	cs
 8009c8c:	461a      	movcs	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6918      	ldr	r0, [r3, #16]
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	1c59      	adds	r1, r3, #1
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f000 fa0c 	bl	800a0bc <memcpy>
        goto done;
 8009ca4:	e03c      	b.n	8009d20 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8009ca6:	bf00      	nop
 8009ca8:	e004      	b.n	8009cb4 <hci_send_req+0x1a0>
        break;
 8009caa:	bf00      	nop
 8009cac:	e002      	b.n	8009cb4 <hci_send_req+0x1a0>
          break;
 8009cae:	bf00      	nop
 8009cb0:	e000      	b.n	8009cb4 <hci_send_req+0x1a0>
          break;
 8009cb2:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009cb4:	4823      	ldr	r0, [pc, #140]	; (8009d44 <hci_send_req+0x230>)
 8009cb6:	f000 f8d1 	bl	8009e5c <list_is_empty>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00d      	beq.n	8009cdc <hci_send_req+0x1c8>
 8009cc0:	481f      	ldr	r0, [pc, #124]	; (8009d40 <hci_send_req+0x22c>)
 8009cc2:	f000 f8cb 	bl	8009e5c <list_is_empty>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d007      	beq.n	8009cdc <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	481c      	ldr	r0, [pc, #112]	; (8009d44 <hci_send_req+0x230>)
 8009cd2:	f000 f90b 	bl	8009eec <list_insert_tail>
      hciReadPacket=NULL;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	613b      	str	r3, [r7, #16]
 8009cda:	e008      	b.n	8009cee <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	f107 0308 	add.w	r3, r7, #8
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 f901 	bl	8009eec <list_insert_tail>
      hciReadPacket=NULL;
 8009cea:	2300      	movs	r3, #0
 8009cec:	613b      	str	r3, [r7, #16]
  {
 8009cee:	e73d      	b.n	8009b6c <hci_send_req+0x58>
        goto failed;
 8009cf0:	bf00      	nop
 8009cf2:	e004      	b.n	8009cfe <hci_send_req+0x1ea>
        goto failed;
 8009cf4:	bf00      	nop
 8009cf6:	e002      	b.n	8009cfe <hci_send_req+0x1ea>
          goto failed;
 8009cf8:	bf00      	nop
 8009cfa:	e000      	b.n	8009cfe <hci_send_req+0x1ea>
          goto failed;
 8009cfc:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	4619      	mov	r1, r3
 8009d08:	480e      	ldr	r0, [pc, #56]	; (8009d44 <hci_send_req+0x230>)
 8009d0a:	f000 f8c9 	bl	8009ea0 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009d0e:	f107 0308 	add.w	r3, r7, #8
 8009d12:	4619      	mov	r1, r3
 8009d14:	480a      	ldr	r0, [pc, #40]	; (8009d40 <hci_send_req+0x22c>)
 8009d16:	f7ff fe61 	bl	80099dc <move_list>

  return -1;
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d1e:	e00b      	b.n	8009d38 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	4619      	mov	r1, r3
 8009d24:	4807      	ldr	r0, [pc, #28]	; (8009d44 <hci_send_req+0x230>)
 8009d26:	f000 f8bb 	bl	8009ea0 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009d2a:	f107 0308 	add.w	r3, r7, #8
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4803      	ldr	r0, [pc, #12]	; (8009d40 <hci_send_req+0x22c>)
 8009d32:	f7ff fe53 	bl	80099dc <move_list>

  return 0;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3738      	adds	r7, #56	; 0x38
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	200004dc 	.word	0x200004dc
 8009d44:	200004d4 	.word	0x200004d4

08009d48 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009d52:	e013      	b.n	8009d7c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8009d54:	1d3b      	adds	r3, r7, #4
 8009d56:	4619      	mov	r1, r3
 8009d58:	480e      	ldr	r0, [pc, #56]	; (8009d94 <hci_user_evt_proc+0x4c>)
 8009d5a:	f000 f90e 	bl	8009f7a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009d5e:	4b0e      	ldr	r3, [pc, #56]	; (8009d98 <hci_user_evt_proc+0x50>)
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d005      	beq.n	8009d72 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8009d66:	4b0c      	ldr	r3, [pc, #48]	; (8009d98 <hci_user_evt_proc+0x50>)
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	3208      	adds	r2, #8
 8009d6e:	4610      	mov	r0, r2
 8009d70:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4619      	mov	r1, r3
 8009d76:	4809      	ldr	r0, [pc, #36]	; (8009d9c <hci_user_evt_proc+0x54>)
 8009d78:	f000 f8b8 	bl	8009eec <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009d7c:	4805      	ldr	r0, [pc, #20]	; (8009d94 <hci_user_evt_proc+0x4c>)
 8009d7e:	f000 f86d 	bl	8009e5c <list_is_empty>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0e5      	beq.n	8009d54 <hci_user_evt_proc+0xc>
  }
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	200004dc 	.word	0x200004dc
 8009d98:	20000a5c 	.word	0x20000a5c
 8009d9c:	200004d4 	.word	0x200004d4

08009da0 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009db0:	481f      	ldr	r0, [pc, #124]	; (8009e30 <hci_notify_asynch_evt+0x90>)
 8009db2:	f000 f853 	bl	8009e5c <list_is_empty>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d132      	bne.n	8009e22 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009dbc:	f107 030c 	add.w	r3, r7, #12
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	481b      	ldr	r0, [pc, #108]	; (8009e30 <hci_notify_asynch_evt+0x90>)
 8009dc4:	f000 f8d9 	bl	8009f7a <list_remove_head>
    
    if (hciContext.io.Receive)
 8009dc8:	4b1a      	ldr	r3, [pc, #104]	; (8009e34 <hci_notify_asynch_evt+0x94>)
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d02a      	beq.n	8009e26 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009dd0:	4b18      	ldr	r3, [pc, #96]	; (8009e34 <hci_notify_asynch_evt+0x94>)
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	3208      	adds	r2, #8
 8009dd8:	2180      	movs	r1, #128	; 0x80
 8009dda:	4610      	mov	r0, r2
 8009ddc:	4798      	blx	r3
 8009dde:	4603      	mov	r3, r0
 8009de0:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8009de2:	7cfb      	ldrb	r3, [r7, #19]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d016      	beq.n	8009e16 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	7cfa      	ldrb	r2, [r7, #19]
 8009dec:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff fd92 	bl	800991c <verify_packet>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d105      	bne.n	8009e0a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4619      	mov	r1, r3
 8009e02:	480d      	ldr	r0, [pc, #52]	; (8009e38 <hci_notify_asynch_evt+0x98>)
 8009e04:	f000 f872 	bl	8009eec <list_insert_tail>
 8009e08:	e00d      	b.n	8009e26 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4808      	ldr	r0, [pc, #32]	; (8009e30 <hci_notify_asynch_evt+0x90>)
 8009e10:	f000 f846 	bl	8009ea0 <list_insert_head>
 8009e14:	e007      	b.n	8009e26 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4805      	ldr	r0, [pc, #20]	; (8009e30 <hci_notify_asynch_evt+0x90>)
 8009e1c:	f000 f840 	bl	8009ea0 <list_insert_head>
 8009e20:	e001      	b.n	8009e26 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8009e22:	2301      	movs	r3, #1
 8009e24:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009e26:	697b      	ldr	r3, [r7, #20]
  
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	200004d4 	.word	0x200004d4
 8009e34:	20000a5c 	.word	0x20000a5c
 8009e38:	200004dc 	.word	0x200004dc

08009e3c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	605a      	str	r2, [r3, #4]
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e64:	f3ef 8310 	mrs	r3, PRIMASK
 8009e68:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009e6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e6e:	b672      	cpsid	i
}
 8009e70:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d102      	bne.n	8009e82 <list_is_empty+0x26>
  {
    return_value = 1;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	75fb      	strb	r3, [r7, #23]
 8009e80:	e001      	b.n	8009e86 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	75fb      	strb	r3, [r7, #23]
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f383 8810 	msr	PRIMASK, r3
}
 8009e90:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8009eae:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009eb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eb4:	b672      	cpsid	i
}
 8009eb6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	605a      	str	r2, [r3, #4]
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f383 8810 	msr	PRIMASK, r3
}
 8009ede:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009ee0:	bf00      	nop
 8009ee2:	371c      	adds	r7, #28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b087      	sub	sp, #28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8009efa:	60fb      	str	r3, [r7, #12]
  return(result);
 8009efc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009efe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f00:	b672      	cpsid	i
}
 8009f02:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f383 8810 	msr	PRIMASK, r3
}
 8009f2a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009f2c:	bf00      	nop
 8009f2e:	371c      	adds	r7, #28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f40:	f3ef 8310 	mrs	r3, PRIMASK
 8009f44:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f46:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009f48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f4a:	b672      	cpsid	i
}
 8009f4c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	6812      	ldr	r2, [r2, #0]
 8009f56:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	6852      	ldr	r2, [r2, #4]
 8009f60:	605a      	str	r2, [r3, #4]
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f383 8810 	msr	PRIMASK, r3
}
 8009f6c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009f6e:	bf00      	nop
 8009f70:	371c      	adds	r7, #28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b086      	sub	sp, #24
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f84:	f3ef 8310 	mrs	r3, PRIMASK
 8009f88:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009f8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f8e:	b672      	cpsid	i
}
 8009f90:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff ffca 	bl	8009f38 <list_remove_node>
  (*node)->next = NULL;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	605a      	str	r2, [r3, #4]
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	f383 8810 	msr	PRIMASK, r3
}
 8009fbe:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009fc0:	bf00      	nop
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8009fd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009fda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fdc:	b672      	cpsid	i
}
 8009fde:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7ff ffa3 	bl	8009f38 <list_remove_node>
  (*node)->next = NULL;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2200      	movs	r2, #0
 800a000:	605a      	str	r2, [r3, #4]
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f383 8810 	msr	PRIMASK, r3
}
 800a00c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a00e:	bf00      	nop
 800a010:	3718      	adds	r7, #24
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a016:	b480      	push	{r7}
 800a018:	b089      	sub	sp, #36	; 0x24
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a022:	f3ef 8310 	mrs	r3, PRIMASK
 800a026:	613b      	str	r3, [r7, #16]
  return(result);
 800a028:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a02a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a02c:	b672      	cpsid	i
}
 800a02e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a036:	e005      	b.n	800a044 <list_get_size+0x2e>
  {
    size++;
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	3301      	adds	r3, #1
 800a03c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a044:	69ba      	ldr	r2, [r7, #24]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d1f5      	bne.n	800a038 <list_get_size+0x22>
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f383 8810 	msr	PRIMASK, r3
}
 800a056:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800a058:	69fb      	ldr	r3, [r7, #28]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3724      	adds	r7, #36	; 0x24
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
	...

0800a068 <__errno>:
 800a068:	4b01      	ldr	r3, [pc, #4]	; (800a070 <__errno+0x8>)
 800a06a:	6818      	ldr	r0, [r3, #0]
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	20000024 	.word	0x20000024

0800a074 <__libc_init_array>:
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	4d0d      	ldr	r5, [pc, #52]	; (800a0ac <__libc_init_array+0x38>)
 800a078:	4c0d      	ldr	r4, [pc, #52]	; (800a0b0 <__libc_init_array+0x3c>)
 800a07a:	1b64      	subs	r4, r4, r5
 800a07c:	10a4      	asrs	r4, r4, #2
 800a07e:	2600      	movs	r6, #0
 800a080:	42a6      	cmp	r6, r4
 800a082:	d109      	bne.n	800a098 <__libc_init_array+0x24>
 800a084:	4d0b      	ldr	r5, [pc, #44]	; (800a0b4 <__libc_init_array+0x40>)
 800a086:	4c0c      	ldr	r4, [pc, #48]	; (800a0b8 <__libc_init_array+0x44>)
 800a088:	f002 fe32 	bl	800ccf0 <_init>
 800a08c:	1b64      	subs	r4, r4, r5
 800a08e:	10a4      	asrs	r4, r4, #2
 800a090:	2600      	movs	r6, #0
 800a092:	42a6      	cmp	r6, r4
 800a094:	d105      	bne.n	800a0a2 <__libc_init_array+0x2e>
 800a096:	bd70      	pop	{r4, r5, r6, pc}
 800a098:	f855 3b04 	ldr.w	r3, [r5], #4
 800a09c:	4798      	blx	r3
 800a09e:	3601      	adds	r6, #1
 800a0a0:	e7ee      	b.n	800a080 <__libc_init_array+0xc>
 800a0a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0a6:	4798      	blx	r3
 800a0a8:	3601      	adds	r6, #1
 800a0aa:	e7f2      	b.n	800a092 <__libc_init_array+0x1e>
 800a0ac:	0800d860 	.word	0x0800d860
 800a0b0:	0800d860 	.word	0x0800d860
 800a0b4:	0800d860 	.word	0x0800d860
 800a0b8:	0800d864 	.word	0x0800d864

0800a0bc <memcpy>:
 800a0bc:	440a      	add	r2, r1
 800a0be:	4291      	cmp	r1, r2
 800a0c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a0c4:	d100      	bne.n	800a0c8 <memcpy+0xc>
 800a0c6:	4770      	bx	lr
 800a0c8:	b510      	push	{r4, lr}
 800a0ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0d2:	4291      	cmp	r1, r2
 800a0d4:	d1f9      	bne.n	800a0ca <memcpy+0xe>
 800a0d6:	bd10      	pop	{r4, pc}

0800a0d8 <memset>:
 800a0d8:	4402      	add	r2, r0
 800a0da:	4603      	mov	r3, r0
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d100      	bne.n	800a0e2 <memset+0xa>
 800a0e0:	4770      	bx	lr
 800a0e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a0e6:	e7f9      	b.n	800a0dc <memset+0x4>

0800a0e8 <__cvt>:
 800a0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ec:	ec55 4b10 	vmov	r4, r5, d0
 800a0f0:	2d00      	cmp	r5, #0
 800a0f2:	460e      	mov	r6, r1
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	462b      	mov	r3, r5
 800a0f8:	bfbb      	ittet	lt
 800a0fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a0fe:	461d      	movlt	r5, r3
 800a100:	2300      	movge	r3, #0
 800a102:	232d      	movlt	r3, #45	; 0x2d
 800a104:	700b      	strb	r3, [r1, #0]
 800a106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a108:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a10c:	4691      	mov	r9, r2
 800a10e:	f023 0820 	bic.w	r8, r3, #32
 800a112:	bfbc      	itt	lt
 800a114:	4622      	movlt	r2, r4
 800a116:	4614      	movlt	r4, r2
 800a118:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a11c:	d005      	beq.n	800a12a <__cvt+0x42>
 800a11e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a122:	d100      	bne.n	800a126 <__cvt+0x3e>
 800a124:	3601      	adds	r6, #1
 800a126:	2102      	movs	r1, #2
 800a128:	e000      	b.n	800a12c <__cvt+0x44>
 800a12a:	2103      	movs	r1, #3
 800a12c:	ab03      	add	r3, sp, #12
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	ab02      	add	r3, sp, #8
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	ec45 4b10 	vmov	d0, r4, r5
 800a138:	4653      	mov	r3, sl
 800a13a:	4632      	mov	r2, r6
 800a13c:	f000 fea4 	bl	800ae88 <_dtoa_r>
 800a140:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a144:	4607      	mov	r7, r0
 800a146:	d102      	bne.n	800a14e <__cvt+0x66>
 800a148:	f019 0f01 	tst.w	r9, #1
 800a14c:	d022      	beq.n	800a194 <__cvt+0xac>
 800a14e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a152:	eb07 0906 	add.w	r9, r7, r6
 800a156:	d110      	bne.n	800a17a <__cvt+0x92>
 800a158:	783b      	ldrb	r3, [r7, #0]
 800a15a:	2b30      	cmp	r3, #48	; 0x30
 800a15c:	d10a      	bne.n	800a174 <__cvt+0x8c>
 800a15e:	2200      	movs	r2, #0
 800a160:	2300      	movs	r3, #0
 800a162:	4620      	mov	r0, r4
 800a164:	4629      	mov	r1, r5
 800a166:	f7f6 fcaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a16a:	b918      	cbnz	r0, 800a174 <__cvt+0x8c>
 800a16c:	f1c6 0601 	rsb	r6, r6, #1
 800a170:	f8ca 6000 	str.w	r6, [sl]
 800a174:	f8da 3000 	ldr.w	r3, [sl]
 800a178:	4499      	add	r9, r3
 800a17a:	2200      	movs	r2, #0
 800a17c:	2300      	movs	r3, #0
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a186:	b108      	cbz	r0, 800a18c <__cvt+0xa4>
 800a188:	f8cd 900c 	str.w	r9, [sp, #12]
 800a18c:	2230      	movs	r2, #48	; 0x30
 800a18e:	9b03      	ldr	r3, [sp, #12]
 800a190:	454b      	cmp	r3, r9
 800a192:	d307      	bcc.n	800a1a4 <__cvt+0xbc>
 800a194:	9b03      	ldr	r3, [sp, #12]
 800a196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a198:	1bdb      	subs	r3, r3, r7
 800a19a:	4638      	mov	r0, r7
 800a19c:	6013      	str	r3, [r2, #0]
 800a19e:	b004      	add	sp, #16
 800a1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a4:	1c59      	adds	r1, r3, #1
 800a1a6:	9103      	str	r1, [sp, #12]
 800a1a8:	701a      	strb	r2, [r3, #0]
 800a1aa:	e7f0      	b.n	800a18e <__cvt+0xa6>

0800a1ac <__exponent>:
 800a1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2900      	cmp	r1, #0
 800a1b2:	bfb8      	it	lt
 800a1b4:	4249      	neglt	r1, r1
 800a1b6:	f803 2b02 	strb.w	r2, [r3], #2
 800a1ba:	bfb4      	ite	lt
 800a1bc:	222d      	movlt	r2, #45	; 0x2d
 800a1be:	222b      	movge	r2, #43	; 0x2b
 800a1c0:	2909      	cmp	r1, #9
 800a1c2:	7042      	strb	r2, [r0, #1]
 800a1c4:	dd2a      	ble.n	800a21c <__exponent+0x70>
 800a1c6:	f10d 0407 	add.w	r4, sp, #7
 800a1ca:	46a4      	mov	ip, r4
 800a1cc:	270a      	movs	r7, #10
 800a1ce:	46a6      	mov	lr, r4
 800a1d0:	460a      	mov	r2, r1
 800a1d2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a1d6:	fb07 1516 	mls	r5, r7, r6, r1
 800a1da:	3530      	adds	r5, #48	; 0x30
 800a1dc:	2a63      	cmp	r2, #99	; 0x63
 800a1de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a1e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	dcf1      	bgt.n	800a1ce <__exponent+0x22>
 800a1ea:	3130      	adds	r1, #48	; 0x30
 800a1ec:	f1ae 0502 	sub.w	r5, lr, #2
 800a1f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a1f4:	1c44      	adds	r4, r0, #1
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	4561      	cmp	r1, ip
 800a1fa:	d30a      	bcc.n	800a212 <__exponent+0x66>
 800a1fc:	f10d 0209 	add.w	r2, sp, #9
 800a200:	eba2 020e 	sub.w	r2, r2, lr
 800a204:	4565      	cmp	r5, ip
 800a206:	bf88      	it	hi
 800a208:	2200      	movhi	r2, #0
 800a20a:	4413      	add	r3, r2
 800a20c:	1a18      	subs	r0, r3, r0
 800a20e:	b003      	add	sp, #12
 800a210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a212:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a216:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a21a:	e7ed      	b.n	800a1f8 <__exponent+0x4c>
 800a21c:	2330      	movs	r3, #48	; 0x30
 800a21e:	3130      	adds	r1, #48	; 0x30
 800a220:	7083      	strb	r3, [r0, #2]
 800a222:	70c1      	strb	r1, [r0, #3]
 800a224:	1d03      	adds	r3, r0, #4
 800a226:	e7f1      	b.n	800a20c <__exponent+0x60>

0800a228 <_printf_float>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	ed2d 8b02 	vpush	{d8}
 800a230:	b08d      	sub	sp, #52	; 0x34
 800a232:	460c      	mov	r4, r1
 800a234:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a238:	4616      	mov	r6, r2
 800a23a:	461f      	mov	r7, r3
 800a23c:	4605      	mov	r5, r0
 800a23e:	f001 fddb 	bl	800bdf8 <_localeconv_r>
 800a242:	f8d0 a000 	ldr.w	sl, [r0]
 800a246:	4650      	mov	r0, sl
 800a248:	f7f5 ffc2 	bl	80001d0 <strlen>
 800a24c:	2300      	movs	r3, #0
 800a24e:	930a      	str	r3, [sp, #40]	; 0x28
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	9305      	str	r3, [sp, #20]
 800a254:	f8d8 3000 	ldr.w	r3, [r8]
 800a258:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a25c:	3307      	adds	r3, #7
 800a25e:	f023 0307 	bic.w	r3, r3, #7
 800a262:	f103 0208 	add.w	r2, r3, #8
 800a266:	f8c8 2000 	str.w	r2, [r8]
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a272:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a276:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a27a:	9307      	str	r3, [sp, #28]
 800a27c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a280:	ee08 0a10 	vmov	s16, r0
 800a284:	4b9f      	ldr	r3, [pc, #636]	; (800a504 <_printf_float+0x2dc>)
 800a286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a28a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a28e:	f7f6 fc4d 	bl	8000b2c <__aeabi_dcmpun>
 800a292:	bb88      	cbnz	r0, 800a2f8 <_printf_float+0xd0>
 800a294:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a298:	4b9a      	ldr	r3, [pc, #616]	; (800a504 <_printf_float+0x2dc>)
 800a29a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a29e:	f7f6 fc27 	bl	8000af0 <__aeabi_dcmple>
 800a2a2:	bb48      	cbnz	r0, 800a2f8 <_printf_float+0xd0>
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	4649      	mov	r1, r9
 800a2ac:	f7f6 fc16 	bl	8000adc <__aeabi_dcmplt>
 800a2b0:	b110      	cbz	r0, 800a2b8 <_printf_float+0x90>
 800a2b2:	232d      	movs	r3, #45	; 0x2d
 800a2b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b8:	4b93      	ldr	r3, [pc, #588]	; (800a508 <_printf_float+0x2e0>)
 800a2ba:	4894      	ldr	r0, [pc, #592]	; (800a50c <_printf_float+0x2e4>)
 800a2bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a2c0:	bf94      	ite	ls
 800a2c2:	4698      	movls	r8, r3
 800a2c4:	4680      	movhi	r8, r0
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	6123      	str	r3, [r4, #16]
 800a2ca:	9b05      	ldr	r3, [sp, #20]
 800a2cc:	f023 0204 	bic.w	r2, r3, #4
 800a2d0:	6022      	str	r2, [r4, #0]
 800a2d2:	f04f 0900 	mov.w	r9, #0
 800a2d6:	9700      	str	r7, [sp, #0]
 800a2d8:	4633      	mov	r3, r6
 800a2da:	aa0b      	add	r2, sp, #44	; 0x2c
 800a2dc:	4621      	mov	r1, r4
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f000 f9d8 	bl	800a694 <_printf_common>
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	f040 8090 	bne.w	800a40a <_printf_float+0x1e2>
 800a2ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2ee:	b00d      	add	sp, #52	; 0x34
 800a2f0:	ecbd 8b02 	vpop	{d8}
 800a2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f8:	4642      	mov	r2, r8
 800a2fa:	464b      	mov	r3, r9
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	4649      	mov	r1, r9
 800a300:	f7f6 fc14 	bl	8000b2c <__aeabi_dcmpun>
 800a304:	b140      	cbz	r0, 800a318 <_printf_float+0xf0>
 800a306:	464b      	mov	r3, r9
 800a308:	2b00      	cmp	r3, #0
 800a30a:	bfbc      	itt	lt
 800a30c:	232d      	movlt	r3, #45	; 0x2d
 800a30e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a312:	487f      	ldr	r0, [pc, #508]	; (800a510 <_printf_float+0x2e8>)
 800a314:	4b7f      	ldr	r3, [pc, #508]	; (800a514 <_printf_float+0x2ec>)
 800a316:	e7d1      	b.n	800a2bc <_printf_float+0x94>
 800a318:	6863      	ldr	r3, [r4, #4]
 800a31a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a31e:	9206      	str	r2, [sp, #24]
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	d13f      	bne.n	800a3a4 <_printf_float+0x17c>
 800a324:	2306      	movs	r3, #6
 800a326:	6063      	str	r3, [r4, #4]
 800a328:	9b05      	ldr	r3, [sp, #20]
 800a32a:	6861      	ldr	r1, [r4, #4]
 800a32c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a330:	2300      	movs	r3, #0
 800a332:	9303      	str	r3, [sp, #12]
 800a334:	ab0a      	add	r3, sp, #40	; 0x28
 800a336:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a33a:	ab09      	add	r3, sp, #36	; 0x24
 800a33c:	ec49 8b10 	vmov	d0, r8, r9
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	6022      	str	r2, [r4, #0]
 800a344:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a348:	4628      	mov	r0, r5
 800a34a:	f7ff fecd 	bl	800a0e8 <__cvt>
 800a34e:	9b06      	ldr	r3, [sp, #24]
 800a350:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a352:	2b47      	cmp	r3, #71	; 0x47
 800a354:	4680      	mov	r8, r0
 800a356:	d108      	bne.n	800a36a <_printf_float+0x142>
 800a358:	1cc8      	adds	r0, r1, #3
 800a35a:	db02      	blt.n	800a362 <_printf_float+0x13a>
 800a35c:	6863      	ldr	r3, [r4, #4]
 800a35e:	4299      	cmp	r1, r3
 800a360:	dd41      	ble.n	800a3e6 <_printf_float+0x1be>
 800a362:	f1ab 0b02 	sub.w	fp, fp, #2
 800a366:	fa5f fb8b 	uxtb.w	fp, fp
 800a36a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a36e:	d820      	bhi.n	800a3b2 <_printf_float+0x18a>
 800a370:	3901      	subs	r1, #1
 800a372:	465a      	mov	r2, fp
 800a374:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a378:	9109      	str	r1, [sp, #36]	; 0x24
 800a37a:	f7ff ff17 	bl	800a1ac <__exponent>
 800a37e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a380:	1813      	adds	r3, r2, r0
 800a382:	2a01      	cmp	r2, #1
 800a384:	4681      	mov	r9, r0
 800a386:	6123      	str	r3, [r4, #16]
 800a388:	dc02      	bgt.n	800a390 <_printf_float+0x168>
 800a38a:	6822      	ldr	r2, [r4, #0]
 800a38c:	07d2      	lsls	r2, r2, #31
 800a38e:	d501      	bpl.n	800a394 <_printf_float+0x16c>
 800a390:	3301      	adds	r3, #1
 800a392:	6123      	str	r3, [r4, #16]
 800a394:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d09c      	beq.n	800a2d6 <_printf_float+0xae>
 800a39c:	232d      	movs	r3, #45	; 0x2d
 800a39e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a2:	e798      	b.n	800a2d6 <_printf_float+0xae>
 800a3a4:	9a06      	ldr	r2, [sp, #24]
 800a3a6:	2a47      	cmp	r2, #71	; 0x47
 800a3a8:	d1be      	bne.n	800a328 <_printf_float+0x100>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1bc      	bne.n	800a328 <_printf_float+0x100>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e7b9      	b.n	800a326 <_printf_float+0xfe>
 800a3b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a3b6:	d118      	bne.n	800a3ea <_printf_float+0x1c2>
 800a3b8:	2900      	cmp	r1, #0
 800a3ba:	6863      	ldr	r3, [r4, #4]
 800a3bc:	dd0b      	ble.n	800a3d6 <_printf_float+0x1ae>
 800a3be:	6121      	str	r1, [r4, #16]
 800a3c0:	b913      	cbnz	r3, 800a3c8 <_printf_float+0x1a0>
 800a3c2:	6822      	ldr	r2, [r4, #0]
 800a3c4:	07d0      	lsls	r0, r2, #31
 800a3c6:	d502      	bpl.n	800a3ce <_printf_float+0x1a6>
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	440b      	add	r3, r1
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3d0:	f04f 0900 	mov.w	r9, #0
 800a3d4:	e7de      	b.n	800a394 <_printf_float+0x16c>
 800a3d6:	b913      	cbnz	r3, 800a3de <_printf_float+0x1b6>
 800a3d8:	6822      	ldr	r2, [r4, #0]
 800a3da:	07d2      	lsls	r2, r2, #31
 800a3dc:	d501      	bpl.n	800a3e2 <_printf_float+0x1ba>
 800a3de:	3302      	adds	r3, #2
 800a3e0:	e7f4      	b.n	800a3cc <_printf_float+0x1a4>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e7f2      	b.n	800a3cc <_printf_float+0x1a4>
 800a3e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ec:	4299      	cmp	r1, r3
 800a3ee:	db05      	blt.n	800a3fc <_printf_float+0x1d4>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	6121      	str	r1, [r4, #16]
 800a3f4:	07d8      	lsls	r0, r3, #31
 800a3f6:	d5ea      	bpl.n	800a3ce <_printf_float+0x1a6>
 800a3f8:	1c4b      	adds	r3, r1, #1
 800a3fa:	e7e7      	b.n	800a3cc <_printf_float+0x1a4>
 800a3fc:	2900      	cmp	r1, #0
 800a3fe:	bfd4      	ite	le
 800a400:	f1c1 0202 	rsble	r2, r1, #2
 800a404:	2201      	movgt	r2, #1
 800a406:	4413      	add	r3, r2
 800a408:	e7e0      	b.n	800a3cc <_printf_float+0x1a4>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	055a      	lsls	r2, r3, #21
 800a40e:	d407      	bmi.n	800a420 <_printf_float+0x1f8>
 800a410:	6923      	ldr	r3, [r4, #16]
 800a412:	4642      	mov	r2, r8
 800a414:	4631      	mov	r1, r6
 800a416:	4628      	mov	r0, r5
 800a418:	47b8      	blx	r7
 800a41a:	3001      	adds	r0, #1
 800a41c:	d12c      	bne.n	800a478 <_printf_float+0x250>
 800a41e:	e764      	b.n	800a2ea <_printf_float+0xc2>
 800a420:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a424:	f240 80e0 	bls.w	800a5e8 <_printf_float+0x3c0>
 800a428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a42c:	2200      	movs	r2, #0
 800a42e:	2300      	movs	r3, #0
 800a430:	f7f6 fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a434:	2800      	cmp	r0, #0
 800a436:	d034      	beq.n	800a4a2 <_printf_float+0x27a>
 800a438:	4a37      	ldr	r2, [pc, #220]	; (800a518 <_printf_float+0x2f0>)
 800a43a:	2301      	movs	r3, #1
 800a43c:	4631      	mov	r1, r6
 800a43e:	4628      	mov	r0, r5
 800a440:	47b8      	blx	r7
 800a442:	3001      	adds	r0, #1
 800a444:	f43f af51 	beq.w	800a2ea <_printf_float+0xc2>
 800a448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a44c:	429a      	cmp	r2, r3
 800a44e:	db02      	blt.n	800a456 <_printf_float+0x22e>
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	07d8      	lsls	r0, r3, #31
 800a454:	d510      	bpl.n	800a478 <_printf_float+0x250>
 800a456:	ee18 3a10 	vmov	r3, s16
 800a45a:	4652      	mov	r2, sl
 800a45c:	4631      	mov	r1, r6
 800a45e:	4628      	mov	r0, r5
 800a460:	47b8      	blx	r7
 800a462:	3001      	adds	r0, #1
 800a464:	f43f af41 	beq.w	800a2ea <_printf_float+0xc2>
 800a468:	f04f 0800 	mov.w	r8, #0
 800a46c:	f104 091a 	add.w	r9, r4, #26
 800a470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a472:	3b01      	subs	r3, #1
 800a474:	4543      	cmp	r3, r8
 800a476:	dc09      	bgt.n	800a48c <_printf_float+0x264>
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	079b      	lsls	r3, r3, #30
 800a47c:	f100 8105 	bmi.w	800a68a <_printf_float+0x462>
 800a480:	68e0      	ldr	r0, [r4, #12]
 800a482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a484:	4298      	cmp	r0, r3
 800a486:	bfb8      	it	lt
 800a488:	4618      	movlt	r0, r3
 800a48a:	e730      	b.n	800a2ee <_printf_float+0xc6>
 800a48c:	2301      	movs	r3, #1
 800a48e:	464a      	mov	r2, r9
 800a490:	4631      	mov	r1, r6
 800a492:	4628      	mov	r0, r5
 800a494:	47b8      	blx	r7
 800a496:	3001      	adds	r0, #1
 800a498:	f43f af27 	beq.w	800a2ea <_printf_float+0xc2>
 800a49c:	f108 0801 	add.w	r8, r8, #1
 800a4a0:	e7e6      	b.n	800a470 <_printf_float+0x248>
 800a4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	dc39      	bgt.n	800a51c <_printf_float+0x2f4>
 800a4a8:	4a1b      	ldr	r2, [pc, #108]	; (800a518 <_printf_float+0x2f0>)
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	4631      	mov	r1, r6
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	47b8      	blx	r7
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	f43f af19 	beq.w	800a2ea <_printf_float+0xc2>
 800a4b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	d102      	bne.n	800a4c6 <_printf_float+0x29e>
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	07d9      	lsls	r1, r3, #31
 800a4c4:	d5d8      	bpl.n	800a478 <_printf_float+0x250>
 800a4c6:	ee18 3a10 	vmov	r3, s16
 800a4ca:	4652      	mov	r2, sl
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b8      	blx	r7
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	f43f af09 	beq.w	800a2ea <_printf_float+0xc2>
 800a4d8:	f04f 0900 	mov.w	r9, #0
 800a4dc:	f104 0a1a 	add.w	sl, r4, #26
 800a4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e2:	425b      	negs	r3, r3
 800a4e4:	454b      	cmp	r3, r9
 800a4e6:	dc01      	bgt.n	800a4ec <_printf_float+0x2c4>
 800a4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ea:	e792      	b.n	800a412 <_printf_float+0x1ea>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	4652      	mov	r2, sl
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47b8      	blx	r7
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	f43f aef7 	beq.w	800a2ea <_printf_float+0xc2>
 800a4fc:	f109 0901 	add.w	r9, r9, #1
 800a500:	e7ee      	b.n	800a4e0 <_printf_float+0x2b8>
 800a502:	bf00      	nop
 800a504:	7fefffff 	.word	0x7fefffff
 800a508:	0800d428 	.word	0x0800d428
 800a50c:	0800d42c 	.word	0x0800d42c
 800a510:	0800d434 	.word	0x0800d434
 800a514:	0800d430 	.word	0x0800d430
 800a518:	0800d438 	.word	0x0800d438
 800a51c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a51e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a520:	429a      	cmp	r2, r3
 800a522:	bfa8      	it	ge
 800a524:	461a      	movge	r2, r3
 800a526:	2a00      	cmp	r2, #0
 800a528:	4691      	mov	r9, r2
 800a52a:	dc37      	bgt.n	800a59c <_printf_float+0x374>
 800a52c:	f04f 0b00 	mov.w	fp, #0
 800a530:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a534:	f104 021a 	add.w	r2, r4, #26
 800a538:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a53a:	9305      	str	r3, [sp, #20]
 800a53c:	eba3 0309 	sub.w	r3, r3, r9
 800a540:	455b      	cmp	r3, fp
 800a542:	dc33      	bgt.n	800a5ac <_printf_float+0x384>
 800a544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a548:	429a      	cmp	r2, r3
 800a54a:	db3b      	blt.n	800a5c4 <_printf_float+0x39c>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	07da      	lsls	r2, r3, #31
 800a550:	d438      	bmi.n	800a5c4 <_printf_float+0x39c>
 800a552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a554:	9a05      	ldr	r2, [sp, #20]
 800a556:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a558:	1a9a      	subs	r2, r3, r2
 800a55a:	eba3 0901 	sub.w	r9, r3, r1
 800a55e:	4591      	cmp	r9, r2
 800a560:	bfa8      	it	ge
 800a562:	4691      	movge	r9, r2
 800a564:	f1b9 0f00 	cmp.w	r9, #0
 800a568:	dc35      	bgt.n	800a5d6 <_printf_float+0x3ae>
 800a56a:	f04f 0800 	mov.w	r8, #0
 800a56e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a572:	f104 0a1a 	add.w	sl, r4, #26
 800a576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a57a:	1a9b      	subs	r3, r3, r2
 800a57c:	eba3 0309 	sub.w	r3, r3, r9
 800a580:	4543      	cmp	r3, r8
 800a582:	f77f af79 	ble.w	800a478 <_printf_float+0x250>
 800a586:	2301      	movs	r3, #1
 800a588:	4652      	mov	r2, sl
 800a58a:	4631      	mov	r1, r6
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b8      	blx	r7
 800a590:	3001      	adds	r0, #1
 800a592:	f43f aeaa 	beq.w	800a2ea <_printf_float+0xc2>
 800a596:	f108 0801 	add.w	r8, r8, #1
 800a59a:	e7ec      	b.n	800a576 <_printf_float+0x34e>
 800a59c:	4613      	mov	r3, r2
 800a59e:	4631      	mov	r1, r6
 800a5a0:	4642      	mov	r2, r8
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	47b8      	blx	r7
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	d1c0      	bne.n	800a52c <_printf_float+0x304>
 800a5aa:	e69e      	b.n	800a2ea <_printf_float+0xc2>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	9205      	str	r2, [sp, #20]
 800a5b4:	47b8      	blx	r7
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	f43f ae97 	beq.w	800a2ea <_printf_float+0xc2>
 800a5bc:	9a05      	ldr	r2, [sp, #20]
 800a5be:	f10b 0b01 	add.w	fp, fp, #1
 800a5c2:	e7b9      	b.n	800a538 <_printf_float+0x310>
 800a5c4:	ee18 3a10 	vmov	r3, s16
 800a5c8:	4652      	mov	r2, sl
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	47b8      	blx	r7
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	d1be      	bne.n	800a552 <_printf_float+0x32a>
 800a5d4:	e689      	b.n	800a2ea <_printf_float+0xc2>
 800a5d6:	9a05      	ldr	r2, [sp, #20]
 800a5d8:	464b      	mov	r3, r9
 800a5da:	4442      	add	r2, r8
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d1c1      	bne.n	800a56a <_printf_float+0x342>
 800a5e6:	e680      	b.n	800a2ea <_printf_float+0xc2>
 800a5e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ea:	2a01      	cmp	r2, #1
 800a5ec:	dc01      	bgt.n	800a5f2 <_printf_float+0x3ca>
 800a5ee:	07db      	lsls	r3, r3, #31
 800a5f0:	d538      	bpl.n	800a664 <_printf_float+0x43c>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	4642      	mov	r2, r8
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	47b8      	blx	r7
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	f43f ae74 	beq.w	800a2ea <_printf_float+0xc2>
 800a602:	ee18 3a10 	vmov	r3, s16
 800a606:	4652      	mov	r2, sl
 800a608:	4631      	mov	r1, r6
 800a60a:	4628      	mov	r0, r5
 800a60c:	47b8      	blx	r7
 800a60e:	3001      	adds	r0, #1
 800a610:	f43f ae6b 	beq.w	800a2ea <_printf_float+0xc2>
 800a614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a618:	2200      	movs	r2, #0
 800a61a:	2300      	movs	r3, #0
 800a61c:	f7f6 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 800a620:	b9d8      	cbnz	r0, 800a65a <_printf_float+0x432>
 800a622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a624:	f108 0201 	add.w	r2, r8, #1
 800a628:	3b01      	subs	r3, #1
 800a62a:	4631      	mov	r1, r6
 800a62c:	4628      	mov	r0, r5
 800a62e:	47b8      	blx	r7
 800a630:	3001      	adds	r0, #1
 800a632:	d10e      	bne.n	800a652 <_printf_float+0x42a>
 800a634:	e659      	b.n	800a2ea <_printf_float+0xc2>
 800a636:	2301      	movs	r3, #1
 800a638:	4652      	mov	r2, sl
 800a63a:	4631      	mov	r1, r6
 800a63c:	4628      	mov	r0, r5
 800a63e:	47b8      	blx	r7
 800a640:	3001      	adds	r0, #1
 800a642:	f43f ae52 	beq.w	800a2ea <_printf_float+0xc2>
 800a646:	f108 0801 	add.w	r8, r8, #1
 800a64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a64c:	3b01      	subs	r3, #1
 800a64e:	4543      	cmp	r3, r8
 800a650:	dcf1      	bgt.n	800a636 <_printf_float+0x40e>
 800a652:	464b      	mov	r3, r9
 800a654:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a658:	e6dc      	b.n	800a414 <_printf_float+0x1ec>
 800a65a:	f04f 0800 	mov.w	r8, #0
 800a65e:	f104 0a1a 	add.w	sl, r4, #26
 800a662:	e7f2      	b.n	800a64a <_printf_float+0x422>
 800a664:	2301      	movs	r3, #1
 800a666:	4642      	mov	r2, r8
 800a668:	e7df      	b.n	800a62a <_printf_float+0x402>
 800a66a:	2301      	movs	r3, #1
 800a66c:	464a      	mov	r2, r9
 800a66e:	4631      	mov	r1, r6
 800a670:	4628      	mov	r0, r5
 800a672:	47b8      	blx	r7
 800a674:	3001      	adds	r0, #1
 800a676:	f43f ae38 	beq.w	800a2ea <_printf_float+0xc2>
 800a67a:	f108 0801 	add.w	r8, r8, #1
 800a67e:	68e3      	ldr	r3, [r4, #12]
 800a680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a682:	1a5b      	subs	r3, r3, r1
 800a684:	4543      	cmp	r3, r8
 800a686:	dcf0      	bgt.n	800a66a <_printf_float+0x442>
 800a688:	e6fa      	b.n	800a480 <_printf_float+0x258>
 800a68a:	f04f 0800 	mov.w	r8, #0
 800a68e:	f104 0919 	add.w	r9, r4, #25
 800a692:	e7f4      	b.n	800a67e <_printf_float+0x456>

0800a694 <_printf_common>:
 800a694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a698:	4616      	mov	r6, r2
 800a69a:	4699      	mov	r9, r3
 800a69c:	688a      	ldr	r2, [r1, #8]
 800a69e:	690b      	ldr	r3, [r1, #16]
 800a6a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	bfb8      	it	lt
 800a6a8:	4613      	movlt	r3, r2
 800a6aa:	6033      	str	r3, [r6, #0]
 800a6ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6b0:	4607      	mov	r7, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	b10a      	cbz	r2, 800a6ba <_printf_common+0x26>
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	6033      	str	r3, [r6, #0]
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	0699      	lsls	r1, r3, #26
 800a6be:	bf42      	ittt	mi
 800a6c0:	6833      	ldrmi	r3, [r6, #0]
 800a6c2:	3302      	addmi	r3, #2
 800a6c4:	6033      	strmi	r3, [r6, #0]
 800a6c6:	6825      	ldr	r5, [r4, #0]
 800a6c8:	f015 0506 	ands.w	r5, r5, #6
 800a6cc:	d106      	bne.n	800a6dc <_printf_common+0x48>
 800a6ce:	f104 0a19 	add.w	sl, r4, #25
 800a6d2:	68e3      	ldr	r3, [r4, #12]
 800a6d4:	6832      	ldr	r2, [r6, #0]
 800a6d6:	1a9b      	subs	r3, r3, r2
 800a6d8:	42ab      	cmp	r3, r5
 800a6da:	dc26      	bgt.n	800a72a <_printf_common+0x96>
 800a6dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6e0:	1e13      	subs	r3, r2, #0
 800a6e2:	6822      	ldr	r2, [r4, #0]
 800a6e4:	bf18      	it	ne
 800a6e6:	2301      	movne	r3, #1
 800a6e8:	0692      	lsls	r2, r2, #26
 800a6ea:	d42b      	bmi.n	800a744 <_printf_common+0xb0>
 800a6ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	47c0      	blx	r8
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	d01e      	beq.n	800a738 <_printf_common+0xa4>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	68e5      	ldr	r5, [r4, #12]
 800a6fe:	6832      	ldr	r2, [r6, #0]
 800a700:	f003 0306 	and.w	r3, r3, #6
 800a704:	2b04      	cmp	r3, #4
 800a706:	bf08      	it	eq
 800a708:	1aad      	subeq	r5, r5, r2
 800a70a:	68a3      	ldr	r3, [r4, #8]
 800a70c:	6922      	ldr	r2, [r4, #16]
 800a70e:	bf0c      	ite	eq
 800a710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a714:	2500      	movne	r5, #0
 800a716:	4293      	cmp	r3, r2
 800a718:	bfc4      	itt	gt
 800a71a:	1a9b      	subgt	r3, r3, r2
 800a71c:	18ed      	addgt	r5, r5, r3
 800a71e:	2600      	movs	r6, #0
 800a720:	341a      	adds	r4, #26
 800a722:	42b5      	cmp	r5, r6
 800a724:	d11a      	bne.n	800a75c <_printf_common+0xc8>
 800a726:	2000      	movs	r0, #0
 800a728:	e008      	b.n	800a73c <_printf_common+0xa8>
 800a72a:	2301      	movs	r3, #1
 800a72c:	4652      	mov	r2, sl
 800a72e:	4649      	mov	r1, r9
 800a730:	4638      	mov	r0, r7
 800a732:	47c0      	blx	r8
 800a734:	3001      	adds	r0, #1
 800a736:	d103      	bne.n	800a740 <_printf_common+0xac>
 800a738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a740:	3501      	adds	r5, #1
 800a742:	e7c6      	b.n	800a6d2 <_printf_common+0x3e>
 800a744:	18e1      	adds	r1, r4, r3
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	2030      	movs	r0, #48	; 0x30
 800a74a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a74e:	4422      	add	r2, r4
 800a750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a758:	3302      	adds	r3, #2
 800a75a:	e7c7      	b.n	800a6ec <_printf_common+0x58>
 800a75c:	2301      	movs	r3, #1
 800a75e:	4622      	mov	r2, r4
 800a760:	4649      	mov	r1, r9
 800a762:	4638      	mov	r0, r7
 800a764:	47c0      	blx	r8
 800a766:	3001      	adds	r0, #1
 800a768:	d0e6      	beq.n	800a738 <_printf_common+0xa4>
 800a76a:	3601      	adds	r6, #1
 800a76c:	e7d9      	b.n	800a722 <_printf_common+0x8e>
	...

0800a770 <_printf_i>:
 800a770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a774:	7e0f      	ldrb	r7, [r1, #24]
 800a776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a778:	2f78      	cmp	r7, #120	; 0x78
 800a77a:	4691      	mov	r9, r2
 800a77c:	4680      	mov	r8, r0
 800a77e:	460c      	mov	r4, r1
 800a780:	469a      	mov	sl, r3
 800a782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a786:	d807      	bhi.n	800a798 <_printf_i+0x28>
 800a788:	2f62      	cmp	r7, #98	; 0x62
 800a78a:	d80a      	bhi.n	800a7a2 <_printf_i+0x32>
 800a78c:	2f00      	cmp	r7, #0
 800a78e:	f000 80d8 	beq.w	800a942 <_printf_i+0x1d2>
 800a792:	2f58      	cmp	r7, #88	; 0x58
 800a794:	f000 80a3 	beq.w	800a8de <_printf_i+0x16e>
 800a798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a79c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7a0:	e03a      	b.n	800a818 <_printf_i+0xa8>
 800a7a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7a6:	2b15      	cmp	r3, #21
 800a7a8:	d8f6      	bhi.n	800a798 <_printf_i+0x28>
 800a7aa:	a101      	add	r1, pc, #4	; (adr r1, 800a7b0 <_printf_i+0x40>)
 800a7ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7b0:	0800a809 	.word	0x0800a809
 800a7b4:	0800a81d 	.word	0x0800a81d
 800a7b8:	0800a799 	.word	0x0800a799
 800a7bc:	0800a799 	.word	0x0800a799
 800a7c0:	0800a799 	.word	0x0800a799
 800a7c4:	0800a799 	.word	0x0800a799
 800a7c8:	0800a81d 	.word	0x0800a81d
 800a7cc:	0800a799 	.word	0x0800a799
 800a7d0:	0800a799 	.word	0x0800a799
 800a7d4:	0800a799 	.word	0x0800a799
 800a7d8:	0800a799 	.word	0x0800a799
 800a7dc:	0800a929 	.word	0x0800a929
 800a7e0:	0800a84d 	.word	0x0800a84d
 800a7e4:	0800a90b 	.word	0x0800a90b
 800a7e8:	0800a799 	.word	0x0800a799
 800a7ec:	0800a799 	.word	0x0800a799
 800a7f0:	0800a94b 	.word	0x0800a94b
 800a7f4:	0800a799 	.word	0x0800a799
 800a7f8:	0800a84d 	.word	0x0800a84d
 800a7fc:	0800a799 	.word	0x0800a799
 800a800:	0800a799 	.word	0x0800a799
 800a804:	0800a913 	.word	0x0800a913
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	1d1a      	adds	r2, r3, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	602a      	str	r2, [r5, #0]
 800a810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a818:	2301      	movs	r3, #1
 800a81a:	e0a3      	b.n	800a964 <_printf_i+0x1f4>
 800a81c:	6820      	ldr	r0, [r4, #0]
 800a81e:	6829      	ldr	r1, [r5, #0]
 800a820:	0606      	lsls	r6, r0, #24
 800a822:	f101 0304 	add.w	r3, r1, #4
 800a826:	d50a      	bpl.n	800a83e <_printf_i+0xce>
 800a828:	680e      	ldr	r6, [r1, #0]
 800a82a:	602b      	str	r3, [r5, #0]
 800a82c:	2e00      	cmp	r6, #0
 800a82e:	da03      	bge.n	800a838 <_printf_i+0xc8>
 800a830:	232d      	movs	r3, #45	; 0x2d
 800a832:	4276      	negs	r6, r6
 800a834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a838:	485e      	ldr	r0, [pc, #376]	; (800a9b4 <_printf_i+0x244>)
 800a83a:	230a      	movs	r3, #10
 800a83c:	e019      	b.n	800a872 <_printf_i+0x102>
 800a83e:	680e      	ldr	r6, [r1, #0]
 800a840:	602b      	str	r3, [r5, #0]
 800a842:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a846:	bf18      	it	ne
 800a848:	b236      	sxthne	r6, r6
 800a84a:	e7ef      	b.n	800a82c <_printf_i+0xbc>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	6820      	ldr	r0, [r4, #0]
 800a850:	1d19      	adds	r1, r3, #4
 800a852:	6029      	str	r1, [r5, #0]
 800a854:	0601      	lsls	r1, r0, #24
 800a856:	d501      	bpl.n	800a85c <_printf_i+0xec>
 800a858:	681e      	ldr	r6, [r3, #0]
 800a85a:	e002      	b.n	800a862 <_printf_i+0xf2>
 800a85c:	0646      	lsls	r6, r0, #25
 800a85e:	d5fb      	bpl.n	800a858 <_printf_i+0xe8>
 800a860:	881e      	ldrh	r6, [r3, #0]
 800a862:	4854      	ldr	r0, [pc, #336]	; (800a9b4 <_printf_i+0x244>)
 800a864:	2f6f      	cmp	r7, #111	; 0x6f
 800a866:	bf0c      	ite	eq
 800a868:	2308      	moveq	r3, #8
 800a86a:	230a      	movne	r3, #10
 800a86c:	2100      	movs	r1, #0
 800a86e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a872:	6865      	ldr	r5, [r4, #4]
 800a874:	60a5      	str	r5, [r4, #8]
 800a876:	2d00      	cmp	r5, #0
 800a878:	bfa2      	ittt	ge
 800a87a:	6821      	ldrge	r1, [r4, #0]
 800a87c:	f021 0104 	bicge.w	r1, r1, #4
 800a880:	6021      	strge	r1, [r4, #0]
 800a882:	b90e      	cbnz	r6, 800a888 <_printf_i+0x118>
 800a884:	2d00      	cmp	r5, #0
 800a886:	d04d      	beq.n	800a924 <_printf_i+0x1b4>
 800a888:	4615      	mov	r5, r2
 800a88a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a88e:	fb03 6711 	mls	r7, r3, r1, r6
 800a892:	5dc7      	ldrb	r7, [r0, r7]
 800a894:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a898:	4637      	mov	r7, r6
 800a89a:	42bb      	cmp	r3, r7
 800a89c:	460e      	mov	r6, r1
 800a89e:	d9f4      	bls.n	800a88a <_printf_i+0x11a>
 800a8a0:	2b08      	cmp	r3, #8
 800a8a2:	d10b      	bne.n	800a8bc <_printf_i+0x14c>
 800a8a4:	6823      	ldr	r3, [r4, #0]
 800a8a6:	07de      	lsls	r6, r3, #31
 800a8a8:	d508      	bpl.n	800a8bc <_printf_i+0x14c>
 800a8aa:	6923      	ldr	r3, [r4, #16]
 800a8ac:	6861      	ldr	r1, [r4, #4]
 800a8ae:	4299      	cmp	r1, r3
 800a8b0:	bfde      	ittt	le
 800a8b2:	2330      	movle	r3, #48	; 0x30
 800a8b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a8bc:	1b52      	subs	r2, r2, r5
 800a8be:	6122      	str	r2, [r4, #16]
 800a8c0:	f8cd a000 	str.w	sl, [sp]
 800a8c4:	464b      	mov	r3, r9
 800a8c6:	aa03      	add	r2, sp, #12
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	f7ff fee2 	bl	800a694 <_printf_common>
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	d14c      	bne.n	800a96e <_printf_i+0x1fe>
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8d8:	b004      	add	sp, #16
 800a8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8de:	4835      	ldr	r0, [pc, #212]	; (800a9b4 <_printf_i+0x244>)
 800a8e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a8e4:	6829      	ldr	r1, [r5, #0]
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8ec:	6029      	str	r1, [r5, #0]
 800a8ee:	061d      	lsls	r5, r3, #24
 800a8f0:	d514      	bpl.n	800a91c <_printf_i+0x1ac>
 800a8f2:	07df      	lsls	r7, r3, #31
 800a8f4:	bf44      	itt	mi
 800a8f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a8fa:	6023      	strmi	r3, [r4, #0]
 800a8fc:	b91e      	cbnz	r6, 800a906 <_printf_i+0x196>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	f023 0320 	bic.w	r3, r3, #32
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	2310      	movs	r3, #16
 800a908:	e7b0      	b.n	800a86c <_printf_i+0xfc>
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	f043 0320 	orr.w	r3, r3, #32
 800a910:	6023      	str	r3, [r4, #0]
 800a912:	2378      	movs	r3, #120	; 0x78
 800a914:	4828      	ldr	r0, [pc, #160]	; (800a9b8 <_printf_i+0x248>)
 800a916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a91a:	e7e3      	b.n	800a8e4 <_printf_i+0x174>
 800a91c:	0659      	lsls	r1, r3, #25
 800a91e:	bf48      	it	mi
 800a920:	b2b6      	uxthmi	r6, r6
 800a922:	e7e6      	b.n	800a8f2 <_printf_i+0x182>
 800a924:	4615      	mov	r5, r2
 800a926:	e7bb      	b.n	800a8a0 <_printf_i+0x130>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	6826      	ldr	r6, [r4, #0]
 800a92c:	6961      	ldr	r1, [r4, #20]
 800a92e:	1d18      	adds	r0, r3, #4
 800a930:	6028      	str	r0, [r5, #0]
 800a932:	0635      	lsls	r5, r6, #24
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	d501      	bpl.n	800a93c <_printf_i+0x1cc>
 800a938:	6019      	str	r1, [r3, #0]
 800a93a:	e002      	b.n	800a942 <_printf_i+0x1d2>
 800a93c:	0670      	lsls	r0, r6, #25
 800a93e:	d5fb      	bpl.n	800a938 <_printf_i+0x1c8>
 800a940:	8019      	strh	r1, [r3, #0]
 800a942:	2300      	movs	r3, #0
 800a944:	6123      	str	r3, [r4, #16]
 800a946:	4615      	mov	r5, r2
 800a948:	e7ba      	b.n	800a8c0 <_printf_i+0x150>
 800a94a:	682b      	ldr	r3, [r5, #0]
 800a94c:	1d1a      	adds	r2, r3, #4
 800a94e:	602a      	str	r2, [r5, #0]
 800a950:	681d      	ldr	r5, [r3, #0]
 800a952:	6862      	ldr	r2, [r4, #4]
 800a954:	2100      	movs	r1, #0
 800a956:	4628      	mov	r0, r5
 800a958:	f7f5 fc42 	bl	80001e0 <memchr>
 800a95c:	b108      	cbz	r0, 800a962 <_printf_i+0x1f2>
 800a95e:	1b40      	subs	r0, r0, r5
 800a960:	6060      	str	r0, [r4, #4]
 800a962:	6863      	ldr	r3, [r4, #4]
 800a964:	6123      	str	r3, [r4, #16]
 800a966:	2300      	movs	r3, #0
 800a968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a96c:	e7a8      	b.n	800a8c0 <_printf_i+0x150>
 800a96e:	6923      	ldr	r3, [r4, #16]
 800a970:	462a      	mov	r2, r5
 800a972:	4649      	mov	r1, r9
 800a974:	4640      	mov	r0, r8
 800a976:	47d0      	blx	sl
 800a978:	3001      	adds	r0, #1
 800a97a:	d0ab      	beq.n	800a8d4 <_printf_i+0x164>
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	079b      	lsls	r3, r3, #30
 800a980:	d413      	bmi.n	800a9aa <_printf_i+0x23a>
 800a982:	68e0      	ldr	r0, [r4, #12]
 800a984:	9b03      	ldr	r3, [sp, #12]
 800a986:	4298      	cmp	r0, r3
 800a988:	bfb8      	it	lt
 800a98a:	4618      	movlt	r0, r3
 800a98c:	e7a4      	b.n	800a8d8 <_printf_i+0x168>
 800a98e:	2301      	movs	r3, #1
 800a990:	4632      	mov	r2, r6
 800a992:	4649      	mov	r1, r9
 800a994:	4640      	mov	r0, r8
 800a996:	47d0      	blx	sl
 800a998:	3001      	adds	r0, #1
 800a99a:	d09b      	beq.n	800a8d4 <_printf_i+0x164>
 800a99c:	3501      	adds	r5, #1
 800a99e:	68e3      	ldr	r3, [r4, #12]
 800a9a0:	9903      	ldr	r1, [sp, #12]
 800a9a2:	1a5b      	subs	r3, r3, r1
 800a9a4:	42ab      	cmp	r3, r5
 800a9a6:	dcf2      	bgt.n	800a98e <_printf_i+0x21e>
 800a9a8:	e7eb      	b.n	800a982 <_printf_i+0x212>
 800a9aa:	2500      	movs	r5, #0
 800a9ac:	f104 0619 	add.w	r6, r4, #25
 800a9b0:	e7f5      	b.n	800a99e <_printf_i+0x22e>
 800a9b2:	bf00      	nop
 800a9b4:	0800d43a 	.word	0x0800d43a
 800a9b8:	0800d44b 	.word	0x0800d44b

0800a9bc <iprintf>:
 800a9bc:	b40f      	push	{r0, r1, r2, r3}
 800a9be:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <iprintf+0x2c>)
 800a9c0:	b513      	push	{r0, r1, r4, lr}
 800a9c2:	681c      	ldr	r4, [r3, #0]
 800a9c4:	b124      	cbz	r4, 800a9d0 <iprintf+0x14>
 800a9c6:	69a3      	ldr	r3, [r4, #24]
 800a9c8:	b913      	cbnz	r3, 800a9d0 <iprintf+0x14>
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f001 f964 	bl	800bc98 <__sinit>
 800a9d0:	ab05      	add	r3, sp, #20
 800a9d2:	9a04      	ldr	r2, [sp, #16]
 800a9d4:	68a1      	ldr	r1, [r4, #8]
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f001 ff25 	bl	800c828 <_vfiprintf_r>
 800a9de:	b002      	add	sp, #8
 800a9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9e4:	b004      	add	sp, #16
 800a9e6:	4770      	bx	lr
 800a9e8:	20000024 	.word	0x20000024

0800a9ec <_puts_r>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	460e      	mov	r6, r1
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	b118      	cbz	r0, 800a9fc <_puts_r+0x10>
 800a9f4:	6983      	ldr	r3, [r0, #24]
 800a9f6:	b90b      	cbnz	r3, 800a9fc <_puts_r+0x10>
 800a9f8:	f001 f94e 	bl	800bc98 <__sinit>
 800a9fc:	69ab      	ldr	r3, [r5, #24]
 800a9fe:	68ac      	ldr	r4, [r5, #8]
 800aa00:	b913      	cbnz	r3, 800aa08 <_puts_r+0x1c>
 800aa02:	4628      	mov	r0, r5
 800aa04:	f001 f948 	bl	800bc98 <__sinit>
 800aa08:	4b2c      	ldr	r3, [pc, #176]	; (800aabc <_puts_r+0xd0>)
 800aa0a:	429c      	cmp	r4, r3
 800aa0c:	d120      	bne.n	800aa50 <_puts_r+0x64>
 800aa0e:	686c      	ldr	r4, [r5, #4]
 800aa10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa12:	07db      	lsls	r3, r3, #31
 800aa14:	d405      	bmi.n	800aa22 <_puts_r+0x36>
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	0598      	lsls	r0, r3, #22
 800aa1a:	d402      	bmi.n	800aa22 <_puts_r+0x36>
 800aa1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa1e:	f001 f9f0 	bl	800be02 <__retarget_lock_acquire_recursive>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	0719      	lsls	r1, r3, #28
 800aa26:	d51d      	bpl.n	800aa64 <_puts_r+0x78>
 800aa28:	6923      	ldr	r3, [r4, #16]
 800aa2a:	b1db      	cbz	r3, 800aa64 <_puts_r+0x78>
 800aa2c:	3e01      	subs	r6, #1
 800aa2e:	68a3      	ldr	r3, [r4, #8]
 800aa30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa34:	3b01      	subs	r3, #1
 800aa36:	60a3      	str	r3, [r4, #8]
 800aa38:	bb39      	cbnz	r1, 800aa8a <_puts_r+0x9e>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	da38      	bge.n	800aab0 <_puts_r+0xc4>
 800aa3e:	4622      	mov	r2, r4
 800aa40:	210a      	movs	r1, #10
 800aa42:	4628      	mov	r0, r5
 800aa44:	f000 f8b4 	bl	800abb0 <__swbuf_r>
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d011      	beq.n	800aa70 <_puts_r+0x84>
 800aa4c:	250a      	movs	r5, #10
 800aa4e:	e011      	b.n	800aa74 <_puts_r+0x88>
 800aa50:	4b1b      	ldr	r3, [pc, #108]	; (800aac0 <_puts_r+0xd4>)
 800aa52:	429c      	cmp	r4, r3
 800aa54:	d101      	bne.n	800aa5a <_puts_r+0x6e>
 800aa56:	68ac      	ldr	r4, [r5, #8]
 800aa58:	e7da      	b.n	800aa10 <_puts_r+0x24>
 800aa5a:	4b1a      	ldr	r3, [pc, #104]	; (800aac4 <_puts_r+0xd8>)
 800aa5c:	429c      	cmp	r4, r3
 800aa5e:	bf08      	it	eq
 800aa60:	68ec      	ldreq	r4, [r5, #12]
 800aa62:	e7d5      	b.n	800aa10 <_puts_r+0x24>
 800aa64:	4621      	mov	r1, r4
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 f8f4 	bl	800ac54 <__swsetup_r>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d0dd      	beq.n	800aa2c <_puts_r+0x40>
 800aa70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aa74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa76:	07da      	lsls	r2, r3, #31
 800aa78:	d405      	bmi.n	800aa86 <_puts_r+0x9a>
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	059b      	lsls	r3, r3, #22
 800aa7e:	d402      	bmi.n	800aa86 <_puts_r+0x9a>
 800aa80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa82:	f001 f9bf 	bl	800be04 <__retarget_lock_release_recursive>
 800aa86:	4628      	mov	r0, r5
 800aa88:	bd70      	pop	{r4, r5, r6, pc}
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	da04      	bge.n	800aa98 <_puts_r+0xac>
 800aa8e:	69a2      	ldr	r2, [r4, #24]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	dc06      	bgt.n	800aaa2 <_puts_r+0xb6>
 800aa94:	290a      	cmp	r1, #10
 800aa96:	d004      	beq.n	800aaa2 <_puts_r+0xb6>
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	6022      	str	r2, [r4, #0]
 800aa9e:	7019      	strb	r1, [r3, #0]
 800aaa0:	e7c5      	b.n	800aa2e <_puts_r+0x42>
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	f000 f883 	bl	800abb0 <__swbuf_r>
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d1bf      	bne.n	800aa2e <_puts_r+0x42>
 800aaae:	e7df      	b.n	800aa70 <_puts_r+0x84>
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	250a      	movs	r5, #10
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	6022      	str	r2, [r4, #0]
 800aab8:	701d      	strb	r5, [r3, #0]
 800aaba:	e7db      	b.n	800aa74 <_puts_r+0x88>
 800aabc:	0800d5a4 	.word	0x0800d5a4
 800aac0:	0800d5c4 	.word	0x0800d5c4
 800aac4:	0800d584 	.word	0x0800d584

0800aac8 <puts>:
 800aac8:	4b02      	ldr	r3, [pc, #8]	; (800aad4 <puts+0xc>)
 800aaca:	4601      	mov	r1, r0
 800aacc:	6818      	ldr	r0, [r3, #0]
 800aace:	f7ff bf8d 	b.w	800a9ec <_puts_r>
 800aad2:	bf00      	nop
 800aad4:	20000024 	.word	0x20000024

0800aad8 <srand>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	4b10      	ldr	r3, [pc, #64]	; (800ab1c <srand+0x44>)
 800aadc:	681d      	ldr	r5, [r3, #0]
 800aade:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800aae0:	4604      	mov	r4, r0
 800aae2:	b9b3      	cbnz	r3, 800ab12 <srand+0x3a>
 800aae4:	2018      	movs	r0, #24
 800aae6:	f001 f9f3 	bl	800bed0 <malloc>
 800aaea:	4602      	mov	r2, r0
 800aaec:	63a8      	str	r0, [r5, #56]	; 0x38
 800aaee:	b920      	cbnz	r0, 800aafa <srand+0x22>
 800aaf0:	4b0b      	ldr	r3, [pc, #44]	; (800ab20 <srand+0x48>)
 800aaf2:	480c      	ldr	r0, [pc, #48]	; (800ab24 <srand+0x4c>)
 800aaf4:	2142      	movs	r1, #66	; 0x42
 800aaf6:	f000 f91b 	bl	800ad30 <__assert_func>
 800aafa:	490b      	ldr	r1, [pc, #44]	; (800ab28 <srand+0x50>)
 800aafc:	4b0b      	ldr	r3, [pc, #44]	; (800ab2c <srand+0x54>)
 800aafe:	e9c0 1300 	strd	r1, r3, [r0]
 800ab02:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <srand+0x58>)
 800ab04:	6083      	str	r3, [r0, #8]
 800ab06:	230b      	movs	r3, #11
 800ab08:	8183      	strh	r3, [r0, #12]
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	2001      	movs	r0, #1
 800ab0e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ab12:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ab14:	2200      	movs	r2, #0
 800ab16:	611c      	str	r4, [r3, #16]
 800ab18:	615a      	str	r2, [r3, #20]
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
 800ab1c:	20000024 	.word	0x20000024
 800ab20:	0800d45c 	.word	0x0800d45c
 800ab24:	0800d473 	.word	0x0800d473
 800ab28:	abcd330e 	.word	0xabcd330e
 800ab2c:	e66d1234 	.word	0xe66d1234
 800ab30:	0005deec 	.word	0x0005deec

0800ab34 <rand>:
 800ab34:	4b16      	ldr	r3, [pc, #88]	; (800ab90 <rand+0x5c>)
 800ab36:	b510      	push	{r4, lr}
 800ab38:	681c      	ldr	r4, [r3, #0]
 800ab3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab3c:	b9b3      	cbnz	r3, 800ab6c <rand+0x38>
 800ab3e:	2018      	movs	r0, #24
 800ab40:	f001 f9c6 	bl	800bed0 <malloc>
 800ab44:	63a0      	str	r0, [r4, #56]	; 0x38
 800ab46:	b928      	cbnz	r0, 800ab54 <rand+0x20>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	4b12      	ldr	r3, [pc, #72]	; (800ab94 <rand+0x60>)
 800ab4c:	4812      	ldr	r0, [pc, #72]	; (800ab98 <rand+0x64>)
 800ab4e:	214e      	movs	r1, #78	; 0x4e
 800ab50:	f000 f8ee 	bl	800ad30 <__assert_func>
 800ab54:	4a11      	ldr	r2, [pc, #68]	; (800ab9c <rand+0x68>)
 800ab56:	4b12      	ldr	r3, [pc, #72]	; (800aba0 <rand+0x6c>)
 800ab58:	e9c0 2300 	strd	r2, r3, [r0]
 800ab5c:	4b11      	ldr	r3, [pc, #68]	; (800aba4 <rand+0x70>)
 800ab5e:	6083      	str	r3, [r0, #8]
 800ab60:	230b      	movs	r3, #11
 800ab62:	8183      	strh	r3, [r0, #12]
 800ab64:	2201      	movs	r2, #1
 800ab66:	2300      	movs	r3, #0
 800ab68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ab6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ab6e:	4a0e      	ldr	r2, [pc, #56]	; (800aba8 <rand+0x74>)
 800ab70:	6920      	ldr	r0, [r4, #16]
 800ab72:	6963      	ldr	r3, [r4, #20]
 800ab74:	490d      	ldr	r1, [pc, #52]	; (800abac <rand+0x78>)
 800ab76:	4342      	muls	r2, r0
 800ab78:	fb01 2203 	mla	r2, r1, r3, r2
 800ab7c:	fba0 0101 	umull	r0, r1, r0, r1
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	eb42 0001 	adc.w	r0, r2, r1
 800ab86:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ab8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ab8e:	bd10      	pop	{r4, pc}
 800ab90:	20000024 	.word	0x20000024
 800ab94:	0800d45c 	.word	0x0800d45c
 800ab98:	0800d473 	.word	0x0800d473
 800ab9c:	abcd330e 	.word	0xabcd330e
 800aba0:	e66d1234 	.word	0xe66d1234
 800aba4:	0005deec 	.word	0x0005deec
 800aba8:	5851f42d 	.word	0x5851f42d
 800abac:	4c957f2d 	.word	0x4c957f2d

0800abb0 <__swbuf_r>:
 800abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb2:	460e      	mov	r6, r1
 800abb4:	4614      	mov	r4, r2
 800abb6:	4605      	mov	r5, r0
 800abb8:	b118      	cbz	r0, 800abc2 <__swbuf_r+0x12>
 800abba:	6983      	ldr	r3, [r0, #24]
 800abbc:	b90b      	cbnz	r3, 800abc2 <__swbuf_r+0x12>
 800abbe:	f001 f86b 	bl	800bc98 <__sinit>
 800abc2:	4b21      	ldr	r3, [pc, #132]	; (800ac48 <__swbuf_r+0x98>)
 800abc4:	429c      	cmp	r4, r3
 800abc6:	d12b      	bne.n	800ac20 <__swbuf_r+0x70>
 800abc8:	686c      	ldr	r4, [r5, #4]
 800abca:	69a3      	ldr	r3, [r4, #24]
 800abcc:	60a3      	str	r3, [r4, #8]
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	071a      	lsls	r2, r3, #28
 800abd2:	d52f      	bpl.n	800ac34 <__swbuf_r+0x84>
 800abd4:	6923      	ldr	r3, [r4, #16]
 800abd6:	b36b      	cbz	r3, 800ac34 <__swbuf_r+0x84>
 800abd8:	6923      	ldr	r3, [r4, #16]
 800abda:	6820      	ldr	r0, [r4, #0]
 800abdc:	1ac0      	subs	r0, r0, r3
 800abde:	6963      	ldr	r3, [r4, #20]
 800abe0:	b2f6      	uxtb	r6, r6
 800abe2:	4283      	cmp	r3, r0
 800abe4:	4637      	mov	r7, r6
 800abe6:	dc04      	bgt.n	800abf2 <__swbuf_r+0x42>
 800abe8:	4621      	mov	r1, r4
 800abea:	4628      	mov	r0, r5
 800abec:	f000 ffc0 	bl	800bb70 <_fflush_r>
 800abf0:	bb30      	cbnz	r0, 800ac40 <__swbuf_r+0x90>
 800abf2:	68a3      	ldr	r3, [r4, #8]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	60a3      	str	r3, [r4, #8]
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	6022      	str	r2, [r4, #0]
 800abfe:	701e      	strb	r6, [r3, #0]
 800ac00:	6963      	ldr	r3, [r4, #20]
 800ac02:	3001      	adds	r0, #1
 800ac04:	4283      	cmp	r3, r0
 800ac06:	d004      	beq.n	800ac12 <__swbuf_r+0x62>
 800ac08:	89a3      	ldrh	r3, [r4, #12]
 800ac0a:	07db      	lsls	r3, r3, #31
 800ac0c:	d506      	bpl.n	800ac1c <__swbuf_r+0x6c>
 800ac0e:	2e0a      	cmp	r6, #10
 800ac10:	d104      	bne.n	800ac1c <__swbuf_r+0x6c>
 800ac12:	4621      	mov	r1, r4
 800ac14:	4628      	mov	r0, r5
 800ac16:	f000 ffab 	bl	800bb70 <_fflush_r>
 800ac1a:	b988      	cbnz	r0, 800ac40 <__swbuf_r+0x90>
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac20:	4b0a      	ldr	r3, [pc, #40]	; (800ac4c <__swbuf_r+0x9c>)
 800ac22:	429c      	cmp	r4, r3
 800ac24:	d101      	bne.n	800ac2a <__swbuf_r+0x7a>
 800ac26:	68ac      	ldr	r4, [r5, #8]
 800ac28:	e7cf      	b.n	800abca <__swbuf_r+0x1a>
 800ac2a:	4b09      	ldr	r3, [pc, #36]	; (800ac50 <__swbuf_r+0xa0>)
 800ac2c:	429c      	cmp	r4, r3
 800ac2e:	bf08      	it	eq
 800ac30:	68ec      	ldreq	r4, [r5, #12]
 800ac32:	e7ca      	b.n	800abca <__swbuf_r+0x1a>
 800ac34:	4621      	mov	r1, r4
 800ac36:	4628      	mov	r0, r5
 800ac38:	f000 f80c 	bl	800ac54 <__swsetup_r>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d0cb      	beq.n	800abd8 <__swbuf_r+0x28>
 800ac40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac44:	e7ea      	b.n	800ac1c <__swbuf_r+0x6c>
 800ac46:	bf00      	nop
 800ac48:	0800d5a4 	.word	0x0800d5a4
 800ac4c:	0800d5c4 	.word	0x0800d5c4
 800ac50:	0800d584 	.word	0x0800d584

0800ac54 <__swsetup_r>:
 800ac54:	4b32      	ldr	r3, [pc, #200]	; (800ad20 <__swsetup_r+0xcc>)
 800ac56:	b570      	push	{r4, r5, r6, lr}
 800ac58:	681d      	ldr	r5, [r3, #0]
 800ac5a:	4606      	mov	r6, r0
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	b125      	cbz	r5, 800ac6a <__swsetup_r+0x16>
 800ac60:	69ab      	ldr	r3, [r5, #24]
 800ac62:	b913      	cbnz	r3, 800ac6a <__swsetup_r+0x16>
 800ac64:	4628      	mov	r0, r5
 800ac66:	f001 f817 	bl	800bc98 <__sinit>
 800ac6a:	4b2e      	ldr	r3, [pc, #184]	; (800ad24 <__swsetup_r+0xd0>)
 800ac6c:	429c      	cmp	r4, r3
 800ac6e:	d10f      	bne.n	800ac90 <__swsetup_r+0x3c>
 800ac70:	686c      	ldr	r4, [r5, #4]
 800ac72:	89a3      	ldrh	r3, [r4, #12]
 800ac74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac78:	0719      	lsls	r1, r3, #28
 800ac7a:	d42c      	bmi.n	800acd6 <__swsetup_r+0x82>
 800ac7c:	06dd      	lsls	r5, r3, #27
 800ac7e:	d411      	bmi.n	800aca4 <__swsetup_r+0x50>
 800ac80:	2309      	movs	r3, #9
 800ac82:	6033      	str	r3, [r6, #0]
 800ac84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac8e:	e03e      	b.n	800ad0e <__swsetup_r+0xba>
 800ac90:	4b25      	ldr	r3, [pc, #148]	; (800ad28 <__swsetup_r+0xd4>)
 800ac92:	429c      	cmp	r4, r3
 800ac94:	d101      	bne.n	800ac9a <__swsetup_r+0x46>
 800ac96:	68ac      	ldr	r4, [r5, #8]
 800ac98:	e7eb      	b.n	800ac72 <__swsetup_r+0x1e>
 800ac9a:	4b24      	ldr	r3, [pc, #144]	; (800ad2c <__swsetup_r+0xd8>)
 800ac9c:	429c      	cmp	r4, r3
 800ac9e:	bf08      	it	eq
 800aca0:	68ec      	ldreq	r4, [r5, #12]
 800aca2:	e7e6      	b.n	800ac72 <__swsetup_r+0x1e>
 800aca4:	0758      	lsls	r0, r3, #29
 800aca6:	d512      	bpl.n	800acce <__swsetup_r+0x7a>
 800aca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acaa:	b141      	cbz	r1, 800acbe <__swsetup_r+0x6a>
 800acac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acb0:	4299      	cmp	r1, r3
 800acb2:	d002      	beq.n	800acba <__swsetup_r+0x66>
 800acb4:	4630      	mov	r0, r6
 800acb6:	f001 fcad 	bl	800c614 <_free_r>
 800acba:	2300      	movs	r3, #0
 800acbc:	6363      	str	r3, [r4, #52]	; 0x34
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acc4:	81a3      	strh	r3, [r4, #12]
 800acc6:	2300      	movs	r3, #0
 800acc8:	6063      	str	r3, [r4, #4]
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	f043 0308 	orr.w	r3, r3, #8
 800acd4:	81a3      	strh	r3, [r4, #12]
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	b94b      	cbnz	r3, 800acee <__swsetup_r+0x9a>
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ace0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ace4:	d003      	beq.n	800acee <__swsetup_r+0x9a>
 800ace6:	4621      	mov	r1, r4
 800ace8:	4630      	mov	r0, r6
 800acea:	f001 f8b1 	bl	800be50 <__smakebuf_r>
 800acee:	89a0      	ldrh	r0, [r4, #12]
 800acf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acf4:	f010 0301 	ands.w	r3, r0, #1
 800acf8:	d00a      	beq.n	800ad10 <__swsetup_r+0xbc>
 800acfa:	2300      	movs	r3, #0
 800acfc:	60a3      	str	r3, [r4, #8]
 800acfe:	6963      	ldr	r3, [r4, #20]
 800ad00:	425b      	negs	r3, r3
 800ad02:	61a3      	str	r3, [r4, #24]
 800ad04:	6923      	ldr	r3, [r4, #16]
 800ad06:	b943      	cbnz	r3, 800ad1a <__swsetup_r+0xc6>
 800ad08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad0c:	d1ba      	bne.n	800ac84 <__swsetup_r+0x30>
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	0781      	lsls	r1, r0, #30
 800ad12:	bf58      	it	pl
 800ad14:	6963      	ldrpl	r3, [r4, #20]
 800ad16:	60a3      	str	r3, [r4, #8]
 800ad18:	e7f4      	b.n	800ad04 <__swsetup_r+0xb0>
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	e7f7      	b.n	800ad0e <__swsetup_r+0xba>
 800ad1e:	bf00      	nop
 800ad20:	20000024 	.word	0x20000024
 800ad24:	0800d5a4 	.word	0x0800d5a4
 800ad28:	0800d5c4 	.word	0x0800d5c4
 800ad2c:	0800d584 	.word	0x0800d584

0800ad30 <__assert_func>:
 800ad30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad32:	4614      	mov	r4, r2
 800ad34:	461a      	mov	r2, r3
 800ad36:	4b09      	ldr	r3, [pc, #36]	; (800ad5c <__assert_func+0x2c>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	68d8      	ldr	r0, [r3, #12]
 800ad3e:	b14c      	cbz	r4, 800ad54 <__assert_func+0x24>
 800ad40:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <__assert_func+0x30>)
 800ad42:	9100      	str	r1, [sp, #0]
 800ad44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad48:	4906      	ldr	r1, [pc, #24]	; (800ad64 <__assert_func+0x34>)
 800ad4a:	462b      	mov	r3, r5
 800ad4c:	f001 f822 	bl	800bd94 <fiprintf>
 800ad50:	f001 ff00 	bl	800cb54 <abort>
 800ad54:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <__assert_func+0x38>)
 800ad56:	461c      	mov	r4, r3
 800ad58:	e7f3      	b.n	800ad42 <__assert_func+0x12>
 800ad5a:	bf00      	nop
 800ad5c:	20000024 	.word	0x20000024
 800ad60:	0800d4ce 	.word	0x0800d4ce
 800ad64:	0800d4db 	.word	0x0800d4db
 800ad68:	0800d509 	.word	0x0800d509

0800ad6c <quorem>:
 800ad6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	6903      	ldr	r3, [r0, #16]
 800ad72:	690c      	ldr	r4, [r1, #16]
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	4607      	mov	r7, r0
 800ad78:	f2c0 8081 	blt.w	800ae7e <quorem+0x112>
 800ad7c:	3c01      	subs	r4, #1
 800ad7e:	f101 0814 	add.w	r8, r1, #20
 800ad82:	f100 0514 	add.w	r5, r0, #20
 800ad86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad94:	3301      	adds	r3, #1
 800ad96:	429a      	cmp	r2, r3
 800ad98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ada0:	fbb2 f6f3 	udiv	r6, r2, r3
 800ada4:	d331      	bcc.n	800ae0a <quorem+0x9e>
 800ada6:	f04f 0e00 	mov.w	lr, #0
 800adaa:	4640      	mov	r0, r8
 800adac:	46ac      	mov	ip, r5
 800adae:	46f2      	mov	sl, lr
 800adb0:	f850 2b04 	ldr.w	r2, [r0], #4
 800adb4:	b293      	uxth	r3, r2
 800adb6:	fb06 e303 	mla	r3, r6, r3, lr
 800adba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	ebaa 0303 	sub.w	r3, sl, r3
 800adc4:	f8dc a000 	ldr.w	sl, [ip]
 800adc8:	0c12      	lsrs	r2, r2, #16
 800adca:	fa13 f38a 	uxtah	r3, r3, sl
 800adce:	fb06 e202 	mla	r2, r6, r2, lr
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	9b00      	ldr	r3, [sp, #0]
 800add6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800adda:	b292      	uxth	r2, r2
 800addc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ade0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ade4:	f8bd 3000 	ldrh.w	r3, [sp]
 800ade8:	4581      	cmp	r9, r0
 800adea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adee:	f84c 3b04 	str.w	r3, [ip], #4
 800adf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800adf6:	d2db      	bcs.n	800adb0 <quorem+0x44>
 800adf8:	f855 300b 	ldr.w	r3, [r5, fp]
 800adfc:	b92b      	cbnz	r3, 800ae0a <quorem+0x9e>
 800adfe:	9b01      	ldr	r3, [sp, #4]
 800ae00:	3b04      	subs	r3, #4
 800ae02:	429d      	cmp	r5, r3
 800ae04:	461a      	mov	r2, r3
 800ae06:	d32e      	bcc.n	800ae66 <quorem+0xfa>
 800ae08:	613c      	str	r4, [r7, #16]
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	f001 faea 	bl	800c3e4 <__mcmp>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	db24      	blt.n	800ae5e <quorem+0xf2>
 800ae14:	3601      	adds	r6, #1
 800ae16:	4628      	mov	r0, r5
 800ae18:	f04f 0c00 	mov.w	ip, #0
 800ae1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae20:	f8d0 e000 	ldr.w	lr, [r0]
 800ae24:	b293      	uxth	r3, r2
 800ae26:	ebac 0303 	sub.w	r3, ip, r3
 800ae2a:	0c12      	lsrs	r2, r2, #16
 800ae2c:	fa13 f38e 	uxtah	r3, r3, lr
 800ae30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae3e:	45c1      	cmp	r9, r8
 800ae40:	f840 3b04 	str.w	r3, [r0], #4
 800ae44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae48:	d2e8      	bcs.n	800ae1c <quorem+0xb0>
 800ae4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae52:	b922      	cbnz	r2, 800ae5e <quorem+0xf2>
 800ae54:	3b04      	subs	r3, #4
 800ae56:	429d      	cmp	r5, r3
 800ae58:	461a      	mov	r2, r3
 800ae5a:	d30a      	bcc.n	800ae72 <quorem+0x106>
 800ae5c:	613c      	str	r4, [r7, #16]
 800ae5e:	4630      	mov	r0, r6
 800ae60:	b003      	add	sp, #12
 800ae62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae66:	6812      	ldr	r2, [r2, #0]
 800ae68:	3b04      	subs	r3, #4
 800ae6a:	2a00      	cmp	r2, #0
 800ae6c:	d1cc      	bne.n	800ae08 <quorem+0x9c>
 800ae6e:	3c01      	subs	r4, #1
 800ae70:	e7c7      	b.n	800ae02 <quorem+0x96>
 800ae72:	6812      	ldr	r2, [r2, #0]
 800ae74:	3b04      	subs	r3, #4
 800ae76:	2a00      	cmp	r2, #0
 800ae78:	d1f0      	bne.n	800ae5c <quorem+0xf0>
 800ae7a:	3c01      	subs	r4, #1
 800ae7c:	e7eb      	b.n	800ae56 <quorem+0xea>
 800ae7e:	2000      	movs	r0, #0
 800ae80:	e7ee      	b.n	800ae60 <quorem+0xf4>
 800ae82:	0000      	movs	r0, r0
 800ae84:	0000      	movs	r0, r0
	...

0800ae88 <_dtoa_r>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	ed2d 8b04 	vpush	{d8-d9}
 800ae90:	ec57 6b10 	vmov	r6, r7, d0
 800ae94:	b093      	sub	sp, #76	; 0x4c
 800ae96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae9c:	9106      	str	r1, [sp, #24]
 800ae9e:	ee10 aa10 	vmov	sl, s0
 800aea2:	4604      	mov	r4, r0
 800aea4:	9209      	str	r2, [sp, #36]	; 0x24
 800aea6:	930c      	str	r3, [sp, #48]	; 0x30
 800aea8:	46bb      	mov	fp, r7
 800aeaa:	b975      	cbnz	r5, 800aeca <_dtoa_r+0x42>
 800aeac:	2010      	movs	r0, #16
 800aeae:	f001 f80f 	bl	800bed0 <malloc>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	6260      	str	r0, [r4, #36]	; 0x24
 800aeb6:	b920      	cbnz	r0, 800aec2 <_dtoa_r+0x3a>
 800aeb8:	4ba7      	ldr	r3, [pc, #668]	; (800b158 <_dtoa_r+0x2d0>)
 800aeba:	21ea      	movs	r1, #234	; 0xea
 800aebc:	48a7      	ldr	r0, [pc, #668]	; (800b15c <_dtoa_r+0x2d4>)
 800aebe:	f7ff ff37 	bl	800ad30 <__assert_func>
 800aec2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aec6:	6005      	str	r5, [r0, #0]
 800aec8:	60c5      	str	r5, [r0, #12]
 800aeca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aecc:	6819      	ldr	r1, [r3, #0]
 800aece:	b151      	cbz	r1, 800aee6 <_dtoa_r+0x5e>
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	604a      	str	r2, [r1, #4]
 800aed4:	2301      	movs	r3, #1
 800aed6:	4093      	lsls	r3, r2
 800aed8:	608b      	str	r3, [r1, #8]
 800aeda:	4620      	mov	r0, r4
 800aedc:	f001 f840 	bl	800bf60 <_Bfree>
 800aee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aee2:	2200      	movs	r2, #0
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	1e3b      	subs	r3, r7, #0
 800aee8:	bfaa      	itet	ge
 800aeea:	2300      	movge	r3, #0
 800aeec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aef0:	f8c8 3000 	strge.w	r3, [r8]
 800aef4:	4b9a      	ldr	r3, [pc, #616]	; (800b160 <_dtoa_r+0x2d8>)
 800aef6:	bfbc      	itt	lt
 800aef8:	2201      	movlt	r2, #1
 800aefa:	f8c8 2000 	strlt.w	r2, [r8]
 800aefe:	ea33 030b 	bics.w	r3, r3, fp
 800af02:	d11b      	bne.n	800af3c <_dtoa_r+0xb4>
 800af04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af06:	f242 730f 	movw	r3, #9999	; 0x270f
 800af0a:	6013      	str	r3, [r2, #0]
 800af0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af10:	4333      	orrs	r3, r6
 800af12:	f000 8592 	beq.w	800ba3a <_dtoa_r+0xbb2>
 800af16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af18:	b963      	cbnz	r3, 800af34 <_dtoa_r+0xac>
 800af1a:	4b92      	ldr	r3, [pc, #584]	; (800b164 <_dtoa_r+0x2dc>)
 800af1c:	e022      	b.n	800af64 <_dtoa_r+0xdc>
 800af1e:	4b92      	ldr	r3, [pc, #584]	; (800b168 <_dtoa_r+0x2e0>)
 800af20:	9301      	str	r3, [sp, #4]
 800af22:	3308      	adds	r3, #8
 800af24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af26:	6013      	str	r3, [r2, #0]
 800af28:	9801      	ldr	r0, [sp, #4]
 800af2a:	b013      	add	sp, #76	; 0x4c
 800af2c:	ecbd 8b04 	vpop	{d8-d9}
 800af30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af34:	4b8b      	ldr	r3, [pc, #556]	; (800b164 <_dtoa_r+0x2dc>)
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	3303      	adds	r3, #3
 800af3a:	e7f3      	b.n	800af24 <_dtoa_r+0x9c>
 800af3c:	2200      	movs	r2, #0
 800af3e:	2300      	movs	r3, #0
 800af40:	4650      	mov	r0, sl
 800af42:	4659      	mov	r1, fp
 800af44:	f7f5 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800af48:	ec4b ab19 	vmov	d9, sl, fp
 800af4c:	4680      	mov	r8, r0
 800af4e:	b158      	cbz	r0, 800af68 <_dtoa_r+0xe0>
 800af50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af52:	2301      	movs	r3, #1
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f000 856b 	beq.w	800ba34 <_dtoa_r+0xbac>
 800af5e:	4883      	ldr	r0, [pc, #524]	; (800b16c <_dtoa_r+0x2e4>)
 800af60:	6018      	str	r0, [r3, #0]
 800af62:	1e43      	subs	r3, r0, #1
 800af64:	9301      	str	r3, [sp, #4]
 800af66:	e7df      	b.n	800af28 <_dtoa_r+0xa0>
 800af68:	ec4b ab10 	vmov	d0, sl, fp
 800af6c:	aa10      	add	r2, sp, #64	; 0x40
 800af6e:	a911      	add	r1, sp, #68	; 0x44
 800af70:	4620      	mov	r0, r4
 800af72:	f001 fadd 	bl	800c530 <__d2b>
 800af76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800af7a:	ee08 0a10 	vmov	s16, r0
 800af7e:	2d00      	cmp	r5, #0
 800af80:	f000 8084 	beq.w	800b08c <_dtoa_r+0x204>
 800af84:	ee19 3a90 	vmov	r3, s19
 800af88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800af90:	4656      	mov	r6, sl
 800af92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800af96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800af9e:	4b74      	ldr	r3, [pc, #464]	; (800b170 <_dtoa_r+0x2e8>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	4630      	mov	r0, r6
 800afa4:	4639      	mov	r1, r7
 800afa6:	f7f5 f96f 	bl	8000288 <__aeabi_dsub>
 800afaa:	a365      	add	r3, pc, #404	; (adr r3, 800b140 <_dtoa_r+0x2b8>)
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	f7f5 fb22 	bl	80005f8 <__aeabi_dmul>
 800afb4:	a364      	add	r3, pc, #400	; (adr r3, 800b148 <_dtoa_r+0x2c0>)
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	f7f5 f967 	bl	800028c <__adddf3>
 800afbe:	4606      	mov	r6, r0
 800afc0:	4628      	mov	r0, r5
 800afc2:	460f      	mov	r7, r1
 800afc4:	f7f5 faae 	bl	8000524 <__aeabi_i2d>
 800afc8:	a361      	add	r3, pc, #388	; (adr r3, 800b150 <_dtoa_r+0x2c8>)
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f7f5 fb13 	bl	80005f8 <__aeabi_dmul>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4630      	mov	r0, r6
 800afd8:	4639      	mov	r1, r7
 800afda:	f7f5 f957 	bl	800028c <__adddf3>
 800afde:	4606      	mov	r6, r0
 800afe0:	460f      	mov	r7, r1
 800afe2:	f7f5 fdb9 	bl	8000b58 <__aeabi_d2iz>
 800afe6:	2200      	movs	r2, #0
 800afe8:	9000      	str	r0, [sp, #0]
 800afea:	2300      	movs	r3, #0
 800afec:	4630      	mov	r0, r6
 800afee:	4639      	mov	r1, r7
 800aff0:	f7f5 fd74 	bl	8000adc <__aeabi_dcmplt>
 800aff4:	b150      	cbz	r0, 800b00c <_dtoa_r+0x184>
 800aff6:	9800      	ldr	r0, [sp, #0]
 800aff8:	f7f5 fa94 	bl	8000524 <__aeabi_i2d>
 800affc:	4632      	mov	r2, r6
 800affe:	463b      	mov	r3, r7
 800b000:	f7f5 fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 800b004:	b910      	cbnz	r0, 800b00c <_dtoa_r+0x184>
 800b006:	9b00      	ldr	r3, [sp, #0]
 800b008:	3b01      	subs	r3, #1
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	9b00      	ldr	r3, [sp, #0]
 800b00e:	2b16      	cmp	r3, #22
 800b010:	d85a      	bhi.n	800b0c8 <_dtoa_r+0x240>
 800b012:	9a00      	ldr	r2, [sp, #0]
 800b014:	4b57      	ldr	r3, [pc, #348]	; (800b174 <_dtoa_r+0x2ec>)
 800b016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	ec51 0b19 	vmov	r0, r1, d9
 800b022:	f7f5 fd5b 	bl	8000adc <__aeabi_dcmplt>
 800b026:	2800      	cmp	r0, #0
 800b028:	d050      	beq.n	800b0cc <_dtoa_r+0x244>
 800b02a:	9b00      	ldr	r3, [sp, #0]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	2300      	movs	r3, #0
 800b032:	930b      	str	r3, [sp, #44]	; 0x2c
 800b034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b036:	1b5d      	subs	r5, r3, r5
 800b038:	1e6b      	subs	r3, r5, #1
 800b03a:	9305      	str	r3, [sp, #20]
 800b03c:	bf45      	ittet	mi
 800b03e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b042:	9304      	strmi	r3, [sp, #16]
 800b044:	2300      	movpl	r3, #0
 800b046:	2300      	movmi	r3, #0
 800b048:	bf4c      	ite	mi
 800b04a:	9305      	strmi	r3, [sp, #20]
 800b04c:	9304      	strpl	r3, [sp, #16]
 800b04e:	9b00      	ldr	r3, [sp, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	db3d      	blt.n	800b0d0 <_dtoa_r+0x248>
 800b054:	9b05      	ldr	r3, [sp, #20]
 800b056:	9a00      	ldr	r2, [sp, #0]
 800b058:	920a      	str	r2, [sp, #40]	; 0x28
 800b05a:	4413      	add	r3, r2
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	2300      	movs	r3, #0
 800b060:	9307      	str	r3, [sp, #28]
 800b062:	9b06      	ldr	r3, [sp, #24]
 800b064:	2b09      	cmp	r3, #9
 800b066:	f200 8089 	bhi.w	800b17c <_dtoa_r+0x2f4>
 800b06a:	2b05      	cmp	r3, #5
 800b06c:	bfc4      	itt	gt
 800b06e:	3b04      	subgt	r3, #4
 800b070:	9306      	strgt	r3, [sp, #24]
 800b072:	9b06      	ldr	r3, [sp, #24]
 800b074:	f1a3 0302 	sub.w	r3, r3, #2
 800b078:	bfcc      	ite	gt
 800b07a:	2500      	movgt	r5, #0
 800b07c:	2501      	movle	r5, #1
 800b07e:	2b03      	cmp	r3, #3
 800b080:	f200 8087 	bhi.w	800b192 <_dtoa_r+0x30a>
 800b084:	e8df f003 	tbb	[pc, r3]
 800b088:	59383a2d 	.word	0x59383a2d
 800b08c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b090:	441d      	add	r5, r3
 800b092:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b096:	2b20      	cmp	r3, #32
 800b098:	bfc1      	itttt	gt
 800b09a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b09e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b0a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b0a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b0aa:	bfda      	itte	le
 800b0ac:	f1c3 0320 	rsble	r3, r3, #32
 800b0b0:	fa06 f003 	lslle.w	r0, r6, r3
 800b0b4:	4318      	orrgt	r0, r3
 800b0b6:	f7f5 fa25 	bl	8000504 <__aeabi_ui2d>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	4606      	mov	r6, r0
 800b0be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b0c2:	3d01      	subs	r5, #1
 800b0c4:	930e      	str	r3, [sp, #56]	; 0x38
 800b0c6:	e76a      	b.n	800af9e <_dtoa_r+0x116>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e7b2      	b.n	800b032 <_dtoa_r+0x1aa>
 800b0cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0ce:	e7b1      	b.n	800b034 <_dtoa_r+0x1ac>
 800b0d0:	9b04      	ldr	r3, [sp, #16]
 800b0d2:	9a00      	ldr	r2, [sp, #0]
 800b0d4:	1a9b      	subs	r3, r3, r2
 800b0d6:	9304      	str	r3, [sp, #16]
 800b0d8:	4253      	negs	r3, r2
 800b0da:	9307      	str	r3, [sp, #28]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	930a      	str	r3, [sp, #40]	; 0x28
 800b0e0:	e7bf      	b.n	800b062 <_dtoa_r+0x1da>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	9308      	str	r3, [sp, #32]
 800b0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dc55      	bgt.n	800b198 <_dtoa_r+0x310>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b0f6:	e00c      	b.n	800b112 <_dtoa_r+0x28a>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e7f3      	b.n	800b0e4 <_dtoa_r+0x25c>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b100:	9308      	str	r3, [sp, #32]
 800b102:	9b00      	ldr	r3, [sp, #0]
 800b104:	4413      	add	r3, r2
 800b106:	9302      	str	r3, [sp, #8]
 800b108:	3301      	adds	r3, #1
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	9303      	str	r3, [sp, #12]
 800b10e:	bfb8      	it	lt
 800b110:	2301      	movlt	r3, #1
 800b112:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b114:	2200      	movs	r2, #0
 800b116:	6042      	str	r2, [r0, #4]
 800b118:	2204      	movs	r2, #4
 800b11a:	f102 0614 	add.w	r6, r2, #20
 800b11e:	429e      	cmp	r6, r3
 800b120:	6841      	ldr	r1, [r0, #4]
 800b122:	d93d      	bls.n	800b1a0 <_dtoa_r+0x318>
 800b124:	4620      	mov	r0, r4
 800b126:	f000 fedb 	bl	800bee0 <_Balloc>
 800b12a:	9001      	str	r0, [sp, #4]
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d13b      	bne.n	800b1a8 <_dtoa_r+0x320>
 800b130:	4b11      	ldr	r3, [pc, #68]	; (800b178 <_dtoa_r+0x2f0>)
 800b132:	4602      	mov	r2, r0
 800b134:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b138:	e6c0      	b.n	800aebc <_dtoa_r+0x34>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e7df      	b.n	800b0fe <_dtoa_r+0x276>
 800b13e:	bf00      	nop
 800b140:	636f4361 	.word	0x636f4361
 800b144:	3fd287a7 	.word	0x3fd287a7
 800b148:	8b60c8b3 	.word	0x8b60c8b3
 800b14c:	3fc68a28 	.word	0x3fc68a28
 800b150:	509f79fb 	.word	0x509f79fb
 800b154:	3fd34413 	.word	0x3fd34413
 800b158:	0800d45c 	.word	0x0800d45c
 800b15c:	0800d517 	.word	0x0800d517
 800b160:	7ff00000 	.word	0x7ff00000
 800b164:	0800d513 	.word	0x0800d513
 800b168:	0800d50a 	.word	0x0800d50a
 800b16c:	0800d439 	.word	0x0800d439
 800b170:	3ff80000 	.word	0x3ff80000
 800b174:	0800d668 	.word	0x0800d668
 800b178:	0800d572 	.word	0x0800d572
 800b17c:	2501      	movs	r5, #1
 800b17e:	2300      	movs	r3, #0
 800b180:	9306      	str	r3, [sp, #24]
 800b182:	9508      	str	r5, [sp, #32]
 800b184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b188:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b18c:	2200      	movs	r2, #0
 800b18e:	2312      	movs	r3, #18
 800b190:	e7b0      	b.n	800b0f4 <_dtoa_r+0x26c>
 800b192:	2301      	movs	r3, #1
 800b194:	9308      	str	r3, [sp, #32]
 800b196:	e7f5      	b.n	800b184 <_dtoa_r+0x2fc>
 800b198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b19a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b19e:	e7b8      	b.n	800b112 <_dtoa_r+0x28a>
 800b1a0:	3101      	adds	r1, #1
 800b1a2:	6041      	str	r1, [r0, #4]
 800b1a4:	0052      	lsls	r2, r2, #1
 800b1a6:	e7b8      	b.n	800b11a <_dtoa_r+0x292>
 800b1a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1aa:	9a01      	ldr	r2, [sp, #4]
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	2b0e      	cmp	r3, #14
 800b1b2:	f200 809d 	bhi.w	800b2f0 <_dtoa_r+0x468>
 800b1b6:	2d00      	cmp	r5, #0
 800b1b8:	f000 809a 	beq.w	800b2f0 <_dtoa_r+0x468>
 800b1bc:	9b00      	ldr	r3, [sp, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	dd32      	ble.n	800b228 <_dtoa_r+0x3a0>
 800b1c2:	4ab7      	ldr	r2, [pc, #732]	; (800b4a0 <_dtoa_r+0x618>)
 800b1c4:	f003 030f 	and.w	r3, r3, #15
 800b1c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1d0:	9b00      	ldr	r3, [sp, #0]
 800b1d2:	05d8      	lsls	r0, r3, #23
 800b1d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b1d8:	d516      	bpl.n	800b208 <_dtoa_r+0x380>
 800b1da:	4bb2      	ldr	r3, [pc, #712]	; (800b4a4 <_dtoa_r+0x61c>)
 800b1dc:	ec51 0b19 	vmov	r0, r1, d9
 800b1e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1e4:	f7f5 fb32 	bl	800084c <__aeabi_ddiv>
 800b1e8:	f007 070f 	and.w	r7, r7, #15
 800b1ec:	4682      	mov	sl, r0
 800b1ee:	468b      	mov	fp, r1
 800b1f0:	2503      	movs	r5, #3
 800b1f2:	4eac      	ldr	r6, [pc, #688]	; (800b4a4 <_dtoa_r+0x61c>)
 800b1f4:	b957      	cbnz	r7, 800b20c <_dtoa_r+0x384>
 800b1f6:	4642      	mov	r2, r8
 800b1f8:	464b      	mov	r3, r9
 800b1fa:	4650      	mov	r0, sl
 800b1fc:	4659      	mov	r1, fp
 800b1fe:	f7f5 fb25 	bl	800084c <__aeabi_ddiv>
 800b202:	4682      	mov	sl, r0
 800b204:	468b      	mov	fp, r1
 800b206:	e028      	b.n	800b25a <_dtoa_r+0x3d2>
 800b208:	2502      	movs	r5, #2
 800b20a:	e7f2      	b.n	800b1f2 <_dtoa_r+0x36a>
 800b20c:	07f9      	lsls	r1, r7, #31
 800b20e:	d508      	bpl.n	800b222 <_dtoa_r+0x39a>
 800b210:	4640      	mov	r0, r8
 800b212:	4649      	mov	r1, r9
 800b214:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b218:	f7f5 f9ee 	bl	80005f8 <__aeabi_dmul>
 800b21c:	3501      	adds	r5, #1
 800b21e:	4680      	mov	r8, r0
 800b220:	4689      	mov	r9, r1
 800b222:	107f      	asrs	r7, r7, #1
 800b224:	3608      	adds	r6, #8
 800b226:	e7e5      	b.n	800b1f4 <_dtoa_r+0x36c>
 800b228:	f000 809b 	beq.w	800b362 <_dtoa_r+0x4da>
 800b22c:	9b00      	ldr	r3, [sp, #0]
 800b22e:	4f9d      	ldr	r7, [pc, #628]	; (800b4a4 <_dtoa_r+0x61c>)
 800b230:	425e      	negs	r6, r3
 800b232:	4b9b      	ldr	r3, [pc, #620]	; (800b4a0 <_dtoa_r+0x618>)
 800b234:	f006 020f 	and.w	r2, r6, #15
 800b238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b240:	ec51 0b19 	vmov	r0, r1, d9
 800b244:	f7f5 f9d8 	bl	80005f8 <__aeabi_dmul>
 800b248:	1136      	asrs	r6, r6, #4
 800b24a:	4682      	mov	sl, r0
 800b24c:	468b      	mov	fp, r1
 800b24e:	2300      	movs	r3, #0
 800b250:	2502      	movs	r5, #2
 800b252:	2e00      	cmp	r6, #0
 800b254:	d17a      	bne.n	800b34c <_dtoa_r+0x4c4>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1d3      	bne.n	800b202 <_dtoa_r+0x37a>
 800b25a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 8082 	beq.w	800b366 <_dtoa_r+0x4de>
 800b262:	4b91      	ldr	r3, [pc, #580]	; (800b4a8 <_dtoa_r+0x620>)
 800b264:	2200      	movs	r2, #0
 800b266:	4650      	mov	r0, sl
 800b268:	4659      	mov	r1, fp
 800b26a:	f7f5 fc37 	bl	8000adc <__aeabi_dcmplt>
 800b26e:	2800      	cmp	r0, #0
 800b270:	d079      	beq.n	800b366 <_dtoa_r+0x4de>
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d076      	beq.n	800b366 <_dtoa_r+0x4de>
 800b278:	9b02      	ldr	r3, [sp, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	dd36      	ble.n	800b2ec <_dtoa_r+0x464>
 800b27e:	9b00      	ldr	r3, [sp, #0]
 800b280:	4650      	mov	r0, sl
 800b282:	4659      	mov	r1, fp
 800b284:	1e5f      	subs	r7, r3, #1
 800b286:	2200      	movs	r2, #0
 800b288:	4b88      	ldr	r3, [pc, #544]	; (800b4ac <_dtoa_r+0x624>)
 800b28a:	f7f5 f9b5 	bl	80005f8 <__aeabi_dmul>
 800b28e:	9e02      	ldr	r6, [sp, #8]
 800b290:	4682      	mov	sl, r0
 800b292:	468b      	mov	fp, r1
 800b294:	3501      	adds	r5, #1
 800b296:	4628      	mov	r0, r5
 800b298:	f7f5 f944 	bl	8000524 <__aeabi_i2d>
 800b29c:	4652      	mov	r2, sl
 800b29e:	465b      	mov	r3, fp
 800b2a0:	f7f5 f9aa 	bl	80005f8 <__aeabi_dmul>
 800b2a4:	4b82      	ldr	r3, [pc, #520]	; (800b4b0 <_dtoa_r+0x628>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f7f4 fff0 	bl	800028c <__adddf3>
 800b2ac:	46d0      	mov	r8, sl
 800b2ae:	46d9      	mov	r9, fp
 800b2b0:	4682      	mov	sl, r0
 800b2b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b2b6:	2e00      	cmp	r6, #0
 800b2b8:	d158      	bne.n	800b36c <_dtoa_r+0x4e4>
 800b2ba:	4b7e      	ldr	r3, [pc, #504]	; (800b4b4 <_dtoa_r+0x62c>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	4640      	mov	r0, r8
 800b2c0:	4649      	mov	r1, r9
 800b2c2:	f7f4 ffe1 	bl	8000288 <__aeabi_dsub>
 800b2c6:	4652      	mov	r2, sl
 800b2c8:	465b      	mov	r3, fp
 800b2ca:	4680      	mov	r8, r0
 800b2cc:	4689      	mov	r9, r1
 800b2ce:	f7f5 fc23 	bl	8000b18 <__aeabi_dcmpgt>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	f040 8295 	bne.w	800b802 <_dtoa_r+0x97a>
 800b2d8:	4652      	mov	r2, sl
 800b2da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b2de:	4640      	mov	r0, r8
 800b2e0:	4649      	mov	r1, r9
 800b2e2:	f7f5 fbfb 	bl	8000adc <__aeabi_dcmplt>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f040 8289 	bne.w	800b7fe <_dtoa_r+0x976>
 800b2ec:	ec5b ab19 	vmov	sl, fp, d9
 800b2f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f2c0 8148 	blt.w	800b588 <_dtoa_r+0x700>
 800b2f8:	9a00      	ldr	r2, [sp, #0]
 800b2fa:	2a0e      	cmp	r2, #14
 800b2fc:	f300 8144 	bgt.w	800b588 <_dtoa_r+0x700>
 800b300:	4b67      	ldr	r3, [pc, #412]	; (800b4a0 <_dtoa_r+0x618>)
 800b302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b306:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f280 80d5 	bge.w	800b4bc <_dtoa_r+0x634>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	f300 80d1 	bgt.w	800b4bc <_dtoa_r+0x634>
 800b31a:	f040 826f 	bne.w	800b7fc <_dtoa_r+0x974>
 800b31e:	4b65      	ldr	r3, [pc, #404]	; (800b4b4 <_dtoa_r+0x62c>)
 800b320:	2200      	movs	r2, #0
 800b322:	4640      	mov	r0, r8
 800b324:	4649      	mov	r1, r9
 800b326:	f7f5 f967 	bl	80005f8 <__aeabi_dmul>
 800b32a:	4652      	mov	r2, sl
 800b32c:	465b      	mov	r3, fp
 800b32e:	f7f5 fbe9 	bl	8000b04 <__aeabi_dcmpge>
 800b332:	9e03      	ldr	r6, [sp, #12]
 800b334:	4637      	mov	r7, r6
 800b336:	2800      	cmp	r0, #0
 800b338:	f040 8245 	bne.w	800b7c6 <_dtoa_r+0x93e>
 800b33c:	9d01      	ldr	r5, [sp, #4]
 800b33e:	2331      	movs	r3, #49	; 0x31
 800b340:	f805 3b01 	strb.w	r3, [r5], #1
 800b344:	9b00      	ldr	r3, [sp, #0]
 800b346:	3301      	adds	r3, #1
 800b348:	9300      	str	r3, [sp, #0]
 800b34a:	e240      	b.n	800b7ce <_dtoa_r+0x946>
 800b34c:	07f2      	lsls	r2, r6, #31
 800b34e:	d505      	bpl.n	800b35c <_dtoa_r+0x4d4>
 800b350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b354:	f7f5 f950 	bl	80005f8 <__aeabi_dmul>
 800b358:	3501      	adds	r5, #1
 800b35a:	2301      	movs	r3, #1
 800b35c:	1076      	asrs	r6, r6, #1
 800b35e:	3708      	adds	r7, #8
 800b360:	e777      	b.n	800b252 <_dtoa_r+0x3ca>
 800b362:	2502      	movs	r5, #2
 800b364:	e779      	b.n	800b25a <_dtoa_r+0x3d2>
 800b366:	9f00      	ldr	r7, [sp, #0]
 800b368:	9e03      	ldr	r6, [sp, #12]
 800b36a:	e794      	b.n	800b296 <_dtoa_r+0x40e>
 800b36c:	9901      	ldr	r1, [sp, #4]
 800b36e:	4b4c      	ldr	r3, [pc, #304]	; (800b4a0 <_dtoa_r+0x618>)
 800b370:	4431      	add	r1, r6
 800b372:	910d      	str	r1, [sp, #52]	; 0x34
 800b374:	9908      	ldr	r1, [sp, #32]
 800b376:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b37a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b37e:	2900      	cmp	r1, #0
 800b380:	d043      	beq.n	800b40a <_dtoa_r+0x582>
 800b382:	494d      	ldr	r1, [pc, #308]	; (800b4b8 <_dtoa_r+0x630>)
 800b384:	2000      	movs	r0, #0
 800b386:	f7f5 fa61 	bl	800084c <__aeabi_ddiv>
 800b38a:	4652      	mov	r2, sl
 800b38c:	465b      	mov	r3, fp
 800b38e:	f7f4 ff7b 	bl	8000288 <__aeabi_dsub>
 800b392:	9d01      	ldr	r5, [sp, #4]
 800b394:	4682      	mov	sl, r0
 800b396:	468b      	mov	fp, r1
 800b398:	4649      	mov	r1, r9
 800b39a:	4640      	mov	r0, r8
 800b39c:	f7f5 fbdc 	bl	8000b58 <__aeabi_d2iz>
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	f7f5 f8bf 	bl	8000524 <__aeabi_i2d>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	f7f4 ff6b 	bl	8000288 <__aeabi_dsub>
 800b3b2:	3630      	adds	r6, #48	; 0x30
 800b3b4:	f805 6b01 	strb.w	r6, [r5], #1
 800b3b8:	4652      	mov	r2, sl
 800b3ba:	465b      	mov	r3, fp
 800b3bc:	4680      	mov	r8, r0
 800b3be:	4689      	mov	r9, r1
 800b3c0:	f7f5 fb8c 	bl	8000adc <__aeabi_dcmplt>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d163      	bne.n	800b490 <_dtoa_r+0x608>
 800b3c8:	4642      	mov	r2, r8
 800b3ca:	464b      	mov	r3, r9
 800b3cc:	4936      	ldr	r1, [pc, #216]	; (800b4a8 <_dtoa_r+0x620>)
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	f7f4 ff5a 	bl	8000288 <__aeabi_dsub>
 800b3d4:	4652      	mov	r2, sl
 800b3d6:	465b      	mov	r3, fp
 800b3d8:	f7f5 fb80 	bl	8000adc <__aeabi_dcmplt>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	f040 80b5 	bne.w	800b54c <_dtoa_r+0x6c4>
 800b3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3e4:	429d      	cmp	r5, r3
 800b3e6:	d081      	beq.n	800b2ec <_dtoa_r+0x464>
 800b3e8:	4b30      	ldr	r3, [pc, #192]	; (800b4ac <_dtoa_r+0x624>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	4650      	mov	r0, sl
 800b3ee:	4659      	mov	r1, fp
 800b3f0:	f7f5 f902 	bl	80005f8 <__aeabi_dmul>
 800b3f4:	4b2d      	ldr	r3, [pc, #180]	; (800b4ac <_dtoa_r+0x624>)
 800b3f6:	4682      	mov	sl, r0
 800b3f8:	468b      	mov	fp, r1
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	4649      	mov	r1, r9
 800b3fe:	2200      	movs	r2, #0
 800b400:	f7f5 f8fa 	bl	80005f8 <__aeabi_dmul>
 800b404:	4680      	mov	r8, r0
 800b406:	4689      	mov	r9, r1
 800b408:	e7c6      	b.n	800b398 <_dtoa_r+0x510>
 800b40a:	4650      	mov	r0, sl
 800b40c:	4659      	mov	r1, fp
 800b40e:	f7f5 f8f3 	bl	80005f8 <__aeabi_dmul>
 800b412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b414:	9d01      	ldr	r5, [sp, #4]
 800b416:	930f      	str	r3, [sp, #60]	; 0x3c
 800b418:	4682      	mov	sl, r0
 800b41a:	468b      	mov	fp, r1
 800b41c:	4649      	mov	r1, r9
 800b41e:	4640      	mov	r0, r8
 800b420:	f7f5 fb9a 	bl	8000b58 <__aeabi_d2iz>
 800b424:	4606      	mov	r6, r0
 800b426:	f7f5 f87d 	bl	8000524 <__aeabi_i2d>
 800b42a:	3630      	adds	r6, #48	; 0x30
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4640      	mov	r0, r8
 800b432:	4649      	mov	r1, r9
 800b434:	f7f4 ff28 	bl	8000288 <__aeabi_dsub>
 800b438:	f805 6b01 	strb.w	r6, [r5], #1
 800b43c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b43e:	429d      	cmp	r5, r3
 800b440:	4680      	mov	r8, r0
 800b442:	4689      	mov	r9, r1
 800b444:	f04f 0200 	mov.w	r2, #0
 800b448:	d124      	bne.n	800b494 <_dtoa_r+0x60c>
 800b44a:	4b1b      	ldr	r3, [pc, #108]	; (800b4b8 <_dtoa_r+0x630>)
 800b44c:	4650      	mov	r0, sl
 800b44e:	4659      	mov	r1, fp
 800b450:	f7f4 ff1c 	bl	800028c <__adddf3>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	4640      	mov	r0, r8
 800b45a:	4649      	mov	r1, r9
 800b45c:	f7f5 fb5c 	bl	8000b18 <__aeabi_dcmpgt>
 800b460:	2800      	cmp	r0, #0
 800b462:	d173      	bne.n	800b54c <_dtoa_r+0x6c4>
 800b464:	4652      	mov	r2, sl
 800b466:	465b      	mov	r3, fp
 800b468:	4913      	ldr	r1, [pc, #76]	; (800b4b8 <_dtoa_r+0x630>)
 800b46a:	2000      	movs	r0, #0
 800b46c:	f7f4 ff0c 	bl	8000288 <__aeabi_dsub>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	4640      	mov	r0, r8
 800b476:	4649      	mov	r1, r9
 800b478:	f7f5 fb30 	bl	8000adc <__aeabi_dcmplt>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	f43f af35 	beq.w	800b2ec <_dtoa_r+0x464>
 800b482:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b484:	1e6b      	subs	r3, r5, #1
 800b486:	930f      	str	r3, [sp, #60]	; 0x3c
 800b488:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b48c:	2b30      	cmp	r3, #48	; 0x30
 800b48e:	d0f8      	beq.n	800b482 <_dtoa_r+0x5fa>
 800b490:	9700      	str	r7, [sp, #0]
 800b492:	e049      	b.n	800b528 <_dtoa_r+0x6a0>
 800b494:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <_dtoa_r+0x624>)
 800b496:	f7f5 f8af 	bl	80005f8 <__aeabi_dmul>
 800b49a:	4680      	mov	r8, r0
 800b49c:	4689      	mov	r9, r1
 800b49e:	e7bd      	b.n	800b41c <_dtoa_r+0x594>
 800b4a0:	0800d668 	.word	0x0800d668
 800b4a4:	0800d640 	.word	0x0800d640
 800b4a8:	3ff00000 	.word	0x3ff00000
 800b4ac:	40240000 	.word	0x40240000
 800b4b0:	401c0000 	.word	0x401c0000
 800b4b4:	40140000 	.word	0x40140000
 800b4b8:	3fe00000 	.word	0x3fe00000
 800b4bc:	9d01      	ldr	r5, [sp, #4]
 800b4be:	4656      	mov	r6, sl
 800b4c0:	465f      	mov	r7, fp
 800b4c2:	4642      	mov	r2, r8
 800b4c4:	464b      	mov	r3, r9
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	f7f5 f9bf 	bl	800084c <__aeabi_ddiv>
 800b4ce:	f7f5 fb43 	bl	8000b58 <__aeabi_d2iz>
 800b4d2:	4682      	mov	sl, r0
 800b4d4:	f7f5 f826 	bl	8000524 <__aeabi_i2d>
 800b4d8:	4642      	mov	r2, r8
 800b4da:	464b      	mov	r3, r9
 800b4dc:	f7f5 f88c 	bl	80005f8 <__aeabi_dmul>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b4ec:	f7f4 fecc 	bl	8000288 <__aeabi_dsub>
 800b4f0:	f805 6b01 	strb.w	r6, [r5], #1
 800b4f4:	9e01      	ldr	r6, [sp, #4]
 800b4f6:	9f03      	ldr	r7, [sp, #12]
 800b4f8:	1bae      	subs	r6, r5, r6
 800b4fa:	42b7      	cmp	r7, r6
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	d135      	bne.n	800b56e <_dtoa_r+0x6e6>
 800b502:	f7f4 fec3 	bl	800028c <__adddf3>
 800b506:	4642      	mov	r2, r8
 800b508:	464b      	mov	r3, r9
 800b50a:	4606      	mov	r6, r0
 800b50c:	460f      	mov	r7, r1
 800b50e:	f7f5 fb03 	bl	8000b18 <__aeabi_dcmpgt>
 800b512:	b9d0      	cbnz	r0, 800b54a <_dtoa_r+0x6c2>
 800b514:	4642      	mov	r2, r8
 800b516:	464b      	mov	r3, r9
 800b518:	4630      	mov	r0, r6
 800b51a:	4639      	mov	r1, r7
 800b51c:	f7f5 fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b520:	b110      	cbz	r0, 800b528 <_dtoa_r+0x6a0>
 800b522:	f01a 0f01 	tst.w	sl, #1
 800b526:	d110      	bne.n	800b54a <_dtoa_r+0x6c2>
 800b528:	4620      	mov	r0, r4
 800b52a:	ee18 1a10 	vmov	r1, s16
 800b52e:	f000 fd17 	bl	800bf60 <_Bfree>
 800b532:	2300      	movs	r3, #0
 800b534:	9800      	ldr	r0, [sp, #0]
 800b536:	702b      	strb	r3, [r5, #0]
 800b538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b53a:	3001      	adds	r0, #1
 800b53c:	6018      	str	r0, [r3, #0]
 800b53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b540:	2b00      	cmp	r3, #0
 800b542:	f43f acf1 	beq.w	800af28 <_dtoa_r+0xa0>
 800b546:	601d      	str	r5, [r3, #0]
 800b548:	e4ee      	b.n	800af28 <_dtoa_r+0xa0>
 800b54a:	9f00      	ldr	r7, [sp, #0]
 800b54c:	462b      	mov	r3, r5
 800b54e:	461d      	mov	r5, r3
 800b550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b554:	2a39      	cmp	r2, #57	; 0x39
 800b556:	d106      	bne.n	800b566 <_dtoa_r+0x6de>
 800b558:	9a01      	ldr	r2, [sp, #4]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d1f7      	bne.n	800b54e <_dtoa_r+0x6c6>
 800b55e:	9901      	ldr	r1, [sp, #4]
 800b560:	2230      	movs	r2, #48	; 0x30
 800b562:	3701      	adds	r7, #1
 800b564:	700a      	strb	r2, [r1, #0]
 800b566:	781a      	ldrb	r2, [r3, #0]
 800b568:	3201      	adds	r2, #1
 800b56a:	701a      	strb	r2, [r3, #0]
 800b56c:	e790      	b.n	800b490 <_dtoa_r+0x608>
 800b56e:	4ba6      	ldr	r3, [pc, #664]	; (800b808 <_dtoa_r+0x980>)
 800b570:	2200      	movs	r2, #0
 800b572:	f7f5 f841 	bl	80005f8 <__aeabi_dmul>
 800b576:	2200      	movs	r2, #0
 800b578:	2300      	movs	r3, #0
 800b57a:	4606      	mov	r6, r0
 800b57c:	460f      	mov	r7, r1
 800b57e:	f7f5 faa3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b582:	2800      	cmp	r0, #0
 800b584:	d09d      	beq.n	800b4c2 <_dtoa_r+0x63a>
 800b586:	e7cf      	b.n	800b528 <_dtoa_r+0x6a0>
 800b588:	9a08      	ldr	r2, [sp, #32]
 800b58a:	2a00      	cmp	r2, #0
 800b58c:	f000 80d7 	beq.w	800b73e <_dtoa_r+0x8b6>
 800b590:	9a06      	ldr	r2, [sp, #24]
 800b592:	2a01      	cmp	r2, #1
 800b594:	f300 80ba 	bgt.w	800b70c <_dtoa_r+0x884>
 800b598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b59a:	2a00      	cmp	r2, #0
 800b59c:	f000 80b2 	beq.w	800b704 <_dtoa_r+0x87c>
 800b5a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5a4:	9e07      	ldr	r6, [sp, #28]
 800b5a6:	9d04      	ldr	r5, [sp, #16]
 800b5a8:	9a04      	ldr	r2, [sp, #16]
 800b5aa:	441a      	add	r2, r3
 800b5ac:	9204      	str	r2, [sp, #16]
 800b5ae:	9a05      	ldr	r2, [sp, #20]
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	441a      	add	r2, r3
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	9205      	str	r2, [sp, #20]
 800b5b8:	f000 fd8a 	bl	800c0d0 <__i2b>
 800b5bc:	4607      	mov	r7, r0
 800b5be:	2d00      	cmp	r5, #0
 800b5c0:	dd0c      	ble.n	800b5dc <_dtoa_r+0x754>
 800b5c2:	9b05      	ldr	r3, [sp, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	dd09      	ble.n	800b5dc <_dtoa_r+0x754>
 800b5c8:	42ab      	cmp	r3, r5
 800b5ca:	9a04      	ldr	r2, [sp, #16]
 800b5cc:	bfa8      	it	ge
 800b5ce:	462b      	movge	r3, r5
 800b5d0:	1ad2      	subs	r2, r2, r3
 800b5d2:	9204      	str	r2, [sp, #16]
 800b5d4:	9a05      	ldr	r2, [sp, #20]
 800b5d6:	1aed      	subs	r5, r5, r3
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	9305      	str	r3, [sp, #20]
 800b5dc:	9b07      	ldr	r3, [sp, #28]
 800b5de:	b31b      	cbz	r3, 800b628 <_dtoa_r+0x7a0>
 800b5e0:	9b08      	ldr	r3, [sp, #32]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f000 80af 	beq.w	800b746 <_dtoa_r+0x8be>
 800b5e8:	2e00      	cmp	r6, #0
 800b5ea:	dd13      	ble.n	800b614 <_dtoa_r+0x78c>
 800b5ec:	4639      	mov	r1, r7
 800b5ee:	4632      	mov	r2, r6
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f000 fe2d 	bl	800c250 <__pow5mult>
 800b5f6:	ee18 2a10 	vmov	r2, s16
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	4607      	mov	r7, r0
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 fd7c 	bl	800c0fc <__multiply>
 800b604:	ee18 1a10 	vmov	r1, s16
 800b608:	4680      	mov	r8, r0
 800b60a:	4620      	mov	r0, r4
 800b60c:	f000 fca8 	bl	800bf60 <_Bfree>
 800b610:	ee08 8a10 	vmov	s16, r8
 800b614:	9b07      	ldr	r3, [sp, #28]
 800b616:	1b9a      	subs	r2, r3, r6
 800b618:	d006      	beq.n	800b628 <_dtoa_r+0x7a0>
 800b61a:	ee18 1a10 	vmov	r1, s16
 800b61e:	4620      	mov	r0, r4
 800b620:	f000 fe16 	bl	800c250 <__pow5mult>
 800b624:	ee08 0a10 	vmov	s16, r0
 800b628:	2101      	movs	r1, #1
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 fd50 	bl	800c0d0 <__i2b>
 800b630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b632:	2b00      	cmp	r3, #0
 800b634:	4606      	mov	r6, r0
 800b636:	f340 8088 	ble.w	800b74a <_dtoa_r+0x8c2>
 800b63a:	461a      	mov	r2, r3
 800b63c:	4601      	mov	r1, r0
 800b63e:	4620      	mov	r0, r4
 800b640:	f000 fe06 	bl	800c250 <__pow5mult>
 800b644:	9b06      	ldr	r3, [sp, #24]
 800b646:	2b01      	cmp	r3, #1
 800b648:	4606      	mov	r6, r0
 800b64a:	f340 8081 	ble.w	800b750 <_dtoa_r+0x8c8>
 800b64e:	f04f 0800 	mov.w	r8, #0
 800b652:	6933      	ldr	r3, [r6, #16]
 800b654:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b658:	6918      	ldr	r0, [r3, #16]
 800b65a:	f000 fce9 	bl	800c030 <__hi0bits>
 800b65e:	f1c0 0020 	rsb	r0, r0, #32
 800b662:	9b05      	ldr	r3, [sp, #20]
 800b664:	4418      	add	r0, r3
 800b666:	f010 001f 	ands.w	r0, r0, #31
 800b66a:	f000 8092 	beq.w	800b792 <_dtoa_r+0x90a>
 800b66e:	f1c0 0320 	rsb	r3, r0, #32
 800b672:	2b04      	cmp	r3, #4
 800b674:	f340 808a 	ble.w	800b78c <_dtoa_r+0x904>
 800b678:	f1c0 001c 	rsb	r0, r0, #28
 800b67c:	9b04      	ldr	r3, [sp, #16]
 800b67e:	4403      	add	r3, r0
 800b680:	9304      	str	r3, [sp, #16]
 800b682:	9b05      	ldr	r3, [sp, #20]
 800b684:	4403      	add	r3, r0
 800b686:	4405      	add	r5, r0
 800b688:	9305      	str	r3, [sp, #20]
 800b68a:	9b04      	ldr	r3, [sp, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	dd07      	ble.n	800b6a0 <_dtoa_r+0x818>
 800b690:	ee18 1a10 	vmov	r1, s16
 800b694:	461a      	mov	r2, r3
 800b696:	4620      	mov	r0, r4
 800b698:	f000 fe34 	bl	800c304 <__lshift>
 800b69c:	ee08 0a10 	vmov	s16, r0
 800b6a0:	9b05      	ldr	r3, [sp, #20]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	dd05      	ble.n	800b6b2 <_dtoa_r+0x82a>
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fe2a 	bl	800c304 <__lshift>
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d06e      	beq.n	800b796 <_dtoa_r+0x90e>
 800b6b8:	ee18 0a10 	vmov	r0, s16
 800b6bc:	4631      	mov	r1, r6
 800b6be:	f000 fe91 	bl	800c3e4 <__mcmp>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	da67      	bge.n	800b796 <_dtoa_r+0x90e>
 800b6c6:	9b00      	ldr	r3, [sp, #0]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	ee18 1a10 	vmov	r1, s16
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	220a      	movs	r2, #10
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f000 fc65 	bl	800bfa4 <__multadd>
 800b6da:	9b08      	ldr	r3, [sp, #32]
 800b6dc:	ee08 0a10 	vmov	s16, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 81b1 	beq.w	800ba48 <_dtoa_r+0xbc0>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	220a      	movs	r2, #10
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f000 fc59 	bl	800bfa4 <__multadd>
 800b6f2:	9b02      	ldr	r3, [sp, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	4607      	mov	r7, r0
 800b6f8:	f300 808e 	bgt.w	800b818 <_dtoa_r+0x990>
 800b6fc:	9b06      	ldr	r3, [sp, #24]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	dc51      	bgt.n	800b7a6 <_dtoa_r+0x91e>
 800b702:	e089      	b.n	800b818 <_dtoa_r+0x990>
 800b704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b70a:	e74b      	b.n	800b5a4 <_dtoa_r+0x71c>
 800b70c:	9b03      	ldr	r3, [sp, #12]
 800b70e:	1e5e      	subs	r6, r3, #1
 800b710:	9b07      	ldr	r3, [sp, #28]
 800b712:	42b3      	cmp	r3, r6
 800b714:	bfbf      	itttt	lt
 800b716:	9b07      	ldrlt	r3, [sp, #28]
 800b718:	9607      	strlt	r6, [sp, #28]
 800b71a:	1af2      	sublt	r2, r6, r3
 800b71c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b71e:	bfb6      	itet	lt
 800b720:	189b      	addlt	r3, r3, r2
 800b722:	1b9e      	subge	r6, r3, r6
 800b724:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b726:	9b03      	ldr	r3, [sp, #12]
 800b728:	bfb8      	it	lt
 800b72a:	2600      	movlt	r6, #0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	bfb7      	itett	lt
 800b730:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b734:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b738:	1a9d      	sublt	r5, r3, r2
 800b73a:	2300      	movlt	r3, #0
 800b73c:	e734      	b.n	800b5a8 <_dtoa_r+0x720>
 800b73e:	9e07      	ldr	r6, [sp, #28]
 800b740:	9d04      	ldr	r5, [sp, #16]
 800b742:	9f08      	ldr	r7, [sp, #32]
 800b744:	e73b      	b.n	800b5be <_dtoa_r+0x736>
 800b746:	9a07      	ldr	r2, [sp, #28]
 800b748:	e767      	b.n	800b61a <_dtoa_r+0x792>
 800b74a:	9b06      	ldr	r3, [sp, #24]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	dc18      	bgt.n	800b782 <_dtoa_r+0x8fa>
 800b750:	f1ba 0f00 	cmp.w	sl, #0
 800b754:	d115      	bne.n	800b782 <_dtoa_r+0x8fa>
 800b756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b75a:	b993      	cbnz	r3, 800b782 <_dtoa_r+0x8fa>
 800b75c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b760:	0d1b      	lsrs	r3, r3, #20
 800b762:	051b      	lsls	r3, r3, #20
 800b764:	b183      	cbz	r3, 800b788 <_dtoa_r+0x900>
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	3301      	adds	r3, #1
 800b76a:	9304      	str	r3, [sp, #16]
 800b76c:	9b05      	ldr	r3, [sp, #20]
 800b76e:	3301      	adds	r3, #1
 800b770:	9305      	str	r3, [sp, #20]
 800b772:	f04f 0801 	mov.w	r8, #1
 800b776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f47f af6a 	bne.w	800b652 <_dtoa_r+0x7ca>
 800b77e:	2001      	movs	r0, #1
 800b780:	e76f      	b.n	800b662 <_dtoa_r+0x7da>
 800b782:	f04f 0800 	mov.w	r8, #0
 800b786:	e7f6      	b.n	800b776 <_dtoa_r+0x8ee>
 800b788:	4698      	mov	r8, r3
 800b78a:	e7f4      	b.n	800b776 <_dtoa_r+0x8ee>
 800b78c:	f43f af7d 	beq.w	800b68a <_dtoa_r+0x802>
 800b790:	4618      	mov	r0, r3
 800b792:	301c      	adds	r0, #28
 800b794:	e772      	b.n	800b67c <_dtoa_r+0x7f4>
 800b796:	9b03      	ldr	r3, [sp, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	dc37      	bgt.n	800b80c <_dtoa_r+0x984>
 800b79c:	9b06      	ldr	r3, [sp, #24]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	dd34      	ble.n	800b80c <_dtoa_r+0x984>
 800b7a2:	9b03      	ldr	r3, [sp, #12]
 800b7a4:	9302      	str	r3, [sp, #8]
 800b7a6:	9b02      	ldr	r3, [sp, #8]
 800b7a8:	b96b      	cbnz	r3, 800b7c6 <_dtoa_r+0x93e>
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	2205      	movs	r2, #5
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f000 fbf8 	bl	800bfa4 <__multadd>
 800b7b4:	4601      	mov	r1, r0
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	ee18 0a10 	vmov	r0, s16
 800b7bc:	f000 fe12 	bl	800c3e4 <__mcmp>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	f73f adbb 	bgt.w	800b33c <_dtoa_r+0x4b4>
 800b7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c8:	9d01      	ldr	r5, [sp, #4]
 800b7ca:	43db      	mvns	r3, r3
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	f04f 0800 	mov.w	r8, #0
 800b7d2:	4631      	mov	r1, r6
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f000 fbc3 	bl	800bf60 <_Bfree>
 800b7da:	2f00      	cmp	r7, #0
 800b7dc:	f43f aea4 	beq.w	800b528 <_dtoa_r+0x6a0>
 800b7e0:	f1b8 0f00 	cmp.w	r8, #0
 800b7e4:	d005      	beq.n	800b7f2 <_dtoa_r+0x96a>
 800b7e6:	45b8      	cmp	r8, r7
 800b7e8:	d003      	beq.n	800b7f2 <_dtoa_r+0x96a>
 800b7ea:	4641      	mov	r1, r8
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fbb7 	bl	800bf60 <_Bfree>
 800b7f2:	4639      	mov	r1, r7
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f000 fbb3 	bl	800bf60 <_Bfree>
 800b7fa:	e695      	b.n	800b528 <_dtoa_r+0x6a0>
 800b7fc:	2600      	movs	r6, #0
 800b7fe:	4637      	mov	r7, r6
 800b800:	e7e1      	b.n	800b7c6 <_dtoa_r+0x93e>
 800b802:	9700      	str	r7, [sp, #0]
 800b804:	4637      	mov	r7, r6
 800b806:	e599      	b.n	800b33c <_dtoa_r+0x4b4>
 800b808:	40240000 	.word	0x40240000
 800b80c:	9b08      	ldr	r3, [sp, #32]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 80ca 	beq.w	800b9a8 <_dtoa_r+0xb20>
 800b814:	9b03      	ldr	r3, [sp, #12]
 800b816:	9302      	str	r3, [sp, #8]
 800b818:	2d00      	cmp	r5, #0
 800b81a:	dd05      	ble.n	800b828 <_dtoa_r+0x9a0>
 800b81c:	4639      	mov	r1, r7
 800b81e:	462a      	mov	r2, r5
 800b820:	4620      	mov	r0, r4
 800b822:	f000 fd6f 	bl	800c304 <__lshift>
 800b826:	4607      	mov	r7, r0
 800b828:	f1b8 0f00 	cmp.w	r8, #0
 800b82c:	d05b      	beq.n	800b8e6 <_dtoa_r+0xa5e>
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	4620      	mov	r0, r4
 800b832:	f000 fb55 	bl	800bee0 <_Balloc>
 800b836:	4605      	mov	r5, r0
 800b838:	b928      	cbnz	r0, 800b846 <_dtoa_r+0x9be>
 800b83a:	4b87      	ldr	r3, [pc, #540]	; (800ba58 <_dtoa_r+0xbd0>)
 800b83c:	4602      	mov	r2, r0
 800b83e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b842:	f7ff bb3b 	b.w	800aebc <_dtoa_r+0x34>
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	3202      	adds	r2, #2
 800b84a:	0092      	lsls	r2, r2, #2
 800b84c:	f107 010c 	add.w	r1, r7, #12
 800b850:	300c      	adds	r0, #12
 800b852:	f7fe fc33 	bl	800a0bc <memcpy>
 800b856:	2201      	movs	r2, #1
 800b858:	4629      	mov	r1, r5
 800b85a:	4620      	mov	r0, r4
 800b85c:	f000 fd52 	bl	800c304 <__lshift>
 800b860:	9b01      	ldr	r3, [sp, #4]
 800b862:	f103 0901 	add.w	r9, r3, #1
 800b866:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b86a:	4413      	add	r3, r2
 800b86c:	9305      	str	r3, [sp, #20]
 800b86e:	f00a 0301 	and.w	r3, sl, #1
 800b872:	46b8      	mov	r8, r7
 800b874:	9304      	str	r3, [sp, #16]
 800b876:	4607      	mov	r7, r0
 800b878:	4631      	mov	r1, r6
 800b87a:	ee18 0a10 	vmov	r0, s16
 800b87e:	f7ff fa75 	bl	800ad6c <quorem>
 800b882:	4641      	mov	r1, r8
 800b884:	9002      	str	r0, [sp, #8]
 800b886:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b88a:	ee18 0a10 	vmov	r0, s16
 800b88e:	f000 fda9 	bl	800c3e4 <__mcmp>
 800b892:	463a      	mov	r2, r7
 800b894:	9003      	str	r0, [sp, #12]
 800b896:	4631      	mov	r1, r6
 800b898:	4620      	mov	r0, r4
 800b89a:	f000 fdbf 	bl	800c41c <__mdiff>
 800b89e:	68c2      	ldr	r2, [r0, #12]
 800b8a0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	bb02      	cbnz	r2, 800b8ea <_dtoa_r+0xa62>
 800b8a8:	4601      	mov	r1, r0
 800b8aa:	ee18 0a10 	vmov	r0, s16
 800b8ae:	f000 fd99 	bl	800c3e4 <__mcmp>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	9207      	str	r2, [sp, #28]
 800b8ba:	f000 fb51 	bl	800bf60 <_Bfree>
 800b8be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b8c2:	ea43 0102 	orr.w	r1, r3, r2
 800b8c6:	9b04      	ldr	r3, [sp, #16]
 800b8c8:	430b      	orrs	r3, r1
 800b8ca:	464d      	mov	r5, r9
 800b8cc:	d10f      	bne.n	800b8ee <_dtoa_r+0xa66>
 800b8ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8d2:	d02a      	beq.n	800b92a <_dtoa_r+0xaa2>
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	dd02      	ble.n	800b8e0 <_dtoa_r+0xa58>
 800b8da:	9b02      	ldr	r3, [sp, #8]
 800b8dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b8e0:	f88b a000 	strb.w	sl, [fp]
 800b8e4:	e775      	b.n	800b7d2 <_dtoa_r+0x94a>
 800b8e6:	4638      	mov	r0, r7
 800b8e8:	e7ba      	b.n	800b860 <_dtoa_r+0x9d8>
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	e7e2      	b.n	800b8b4 <_dtoa_r+0xa2c>
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	db04      	blt.n	800b8fe <_dtoa_r+0xa76>
 800b8f4:	9906      	ldr	r1, [sp, #24]
 800b8f6:	430b      	orrs	r3, r1
 800b8f8:	9904      	ldr	r1, [sp, #16]
 800b8fa:	430b      	orrs	r3, r1
 800b8fc:	d122      	bne.n	800b944 <_dtoa_r+0xabc>
 800b8fe:	2a00      	cmp	r2, #0
 800b900:	ddee      	ble.n	800b8e0 <_dtoa_r+0xa58>
 800b902:	ee18 1a10 	vmov	r1, s16
 800b906:	2201      	movs	r2, #1
 800b908:	4620      	mov	r0, r4
 800b90a:	f000 fcfb 	bl	800c304 <__lshift>
 800b90e:	4631      	mov	r1, r6
 800b910:	ee08 0a10 	vmov	s16, r0
 800b914:	f000 fd66 	bl	800c3e4 <__mcmp>
 800b918:	2800      	cmp	r0, #0
 800b91a:	dc03      	bgt.n	800b924 <_dtoa_r+0xa9c>
 800b91c:	d1e0      	bne.n	800b8e0 <_dtoa_r+0xa58>
 800b91e:	f01a 0f01 	tst.w	sl, #1
 800b922:	d0dd      	beq.n	800b8e0 <_dtoa_r+0xa58>
 800b924:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b928:	d1d7      	bne.n	800b8da <_dtoa_r+0xa52>
 800b92a:	2339      	movs	r3, #57	; 0x39
 800b92c:	f88b 3000 	strb.w	r3, [fp]
 800b930:	462b      	mov	r3, r5
 800b932:	461d      	mov	r5, r3
 800b934:	3b01      	subs	r3, #1
 800b936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b93a:	2a39      	cmp	r2, #57	; 0x39
 800b93c:	d071      	beq.n	800ba22 <_dtoa_r+0xb9a>
 800b93e:	3201      	adds	r2, #1
 800b940:	701a      	strb	r2, [r3, #0]
 800b942:	e746      	b.n	800b7d2 <_dtoa_r+0x94a>
 800b944:	2a00      	cmp	r2, #0
 800b946:	dd07      	ble.n	800b958 <_dtoa_r+0xad0>
 800b948:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b94c:	d0ed      	beq.n	800b92a <_dtoa_r+0xaa2>
 800b94e:	f10a 0301 	add.w	r3, sl, #1
 800b952:	f88b 3000 	strb.w	r3, [fp]
 800b956:	e73c      	b.n	800b7d2 <_dtoa_r+0x94a>
 800b958:	9b05      	ldr	r3, [sp, #20]
 800b95a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b95e:	4599      	cmp	r9, r3
 800b960:	d047      	beq.n	800b9f2 <_dtoa_r+0xb6a>
 800b962:	ee18 1a10 	vmov	r1, s16
 800b966:	2300      	movs	r3, #0
 800b968:	220a      	movs	r2, #10
 800b96a:	4620      	mov	r0, r4
 800b96c:	f000 fb1a 	bl	800bfa4 <__multadd>
 800b970:	45b8      	cmp	r8, r7
 800b972:	ee08 0a10 	vmov	s16, r0
 800b976:	f04f 0300 	mov.w	r3, #0
 800b97a:	f04f 020a 	mov.w	r2, #10
 800b97e:	4641      	mov	r1, r8
 800b980:	4620      	mov	r0, r4
 800b982:	d106      	bne.n	800b992 <_dtoa_r+0xb0a>
 800b984:	f000 fb0e 	bl	800bfa4 <__multadd>
 800b988:	4680      	mov	r8, r0
 800b98a:	4607      	mov	r7, r0
 800b98c:	f109 0901 	add.w	r9, r9, #1
 800b990:	e772      	b.n	800b878 <_dtoa_r+0x9f0>
 800b992:	f000 fb07 	bl	800bfa4 <__multadd>
 800b996:	4639      	mov	r1, r7
 800b998:	4680      	mov	r8, r0
 800b99a:	2300      	movs	r3, #0
 800b99c:	220a      	movs	r2, #10
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 fb00 	bl	800bfa4 <__multadd>
 800b9a4:	4607      	mov	r7, r0
 800b9a6:	e7f1      	b.n	800b98c <_dtoa_r+0xb04>
 800b9a8:	9b03      	ldr	r3, [sp, #12]
 800b9aa:	9302      	str	r3, [sp, #8]
 800b9ac:	9d01      	ldr	r5, [sp, #4]
 800b9ae:	ee18 0a10 	vmov	r0, s16
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	f7ff f9da 	bl	800ad6c <quorem>
 800b9b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9bc:	9b01      	ldr	r3, [sp, #4]
 800b9be:	f805 ab01 	strb.w	sl, [r5], #1
 800b9c2:	1aea      	subs	r2, r5, r3
 800b9c4:	9b02      	ldr	r3, [sp, #8]
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	dd09      	ble.n	800b9de <_dtoa_r+0xb56>
 800b9ca:	ee18 1a10 	vmov	r1, s16
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	220a      	movs	r2, #10
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 fae6 	bl	800bfa4 <__multadd>
 800b9d8:	ee08 0a10 	vmov	s16, r0
 800b9dc:	e7e7      	b.n	800b9ae <_dtoa_r+0xb26>
 800b9de:	9b02      	ldr	r3, [sp, #8]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	bfc8      	it	gt
 800b9e4:	461d      	movgt	r5, r3
 800b9e6:	9b01      	ldr	r3, [sp, #4]
 800b9e8:	bfd8      	it	le
 800b9ea:	2501      	movle	r5, #1
 800b9ec:	441d      	add	r5, r3
 800b9ee:	f04f 0800 	mov.w	r8, #0
 800b9f2:	ee18 1a10 	vmov	r1, s16
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f000 fc83 	bl	800c304 <__lshift>
 800b9fe:	4631      	mov	r1, r6
 800ba00:	ee08 0a10 	vmov	s16, r0
 800ba04:	f000 fcee 	bl	800c3e4 <__mcmp>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	dc91      	bgt.n	800b930 <_dtoa_r+0xaa8>
 800ba0c:	d102      	bne.n	800ba14 <_dtoa_r+0xb8c>
 800ba0e:	f01a 0f01 	tst.w	sl, #1
 800ba12:	d18d      	bne.n	800b930 <_dtoa_r+0xaa8>
 800ba14:	462b      	mov	r3, r5
 800ba16:	461d      	mov	r5, r3
 800ba18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba1c:	2a30      	cmp	r2, #48	; 0x30
 800ba1e:	d0fa      	beq.n	800ba16 <_dtoa_r+0xb8e>
 800ba20:	e6d7      	b.n	800b7d2 <_dtoa_r+0x94a>
 800ba22:	9a01      	ldr	r2, [sp, #4]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d184      	bne.n	800b932 <_dtoa_r+0xaaa>
 800ba28:	9b00      	ldr	r3, [sp, #0]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	2331      	movs	r3, #49	; 0x31
 800ba30:	7013      	strb	r3, [r2, #0]
 800ba32:	e6ce      	b.n	800b7d2 <_dtoa_r+0x94a>
 800ba34:	4b09      	ldr	r3, [pc, #36]	; (800ba5c <_dtoa_r+0xbd4>)
 800ba36:	f7ff ba95 	b.w	800af64 <_dtoa_r+0xdc>
 800ba3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f47f aa6e 	bne.w	800af1e <_dtoa_r+0x96>
 800ba42:	4b07      	ldr	r3, [pc, #28]	; (800ba60 <_dtoa_r+0xbd8>)
 800ba44:	f7ff ba8e 	b.w	800af64 <_dtoa_r+0xdc>
 800ba48:	9b02      	ldr	r3, [sp, #8]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	dcae      	bgt.n	800b9ac <_dtoa_r+0xb24>
 800ba4e:	9b06      	ldr	r3, [sp, #24]
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	f73f aea8 	bgt.w	800b7a6 <_dtoa_r+0x91e>
 800ba56:	e7a9      	b.n	800b9ac <_dtoa_r+0xb24>
 800ba58:	0800d572 	.word	0x0800d572
 800ba5c:	0800d438 	.word	0x0800d438
 800ba60:	0800d50a 	.word	0x0800d50a

0800ba64 <__sflush_r>:
 800ba64:	898a      	ldrh	r2, [r1, #12]
 800ba66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	0710      	lsls	r0, r2, #28
 800ba6e:	460c      	mov	r4, r1
 800ba70:	d458      	bmi.n	800bb24 <__sflush_r+0xc0>
 800ba72:	684b      	ldr	r3, [r1, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	dc05      	bgt.n	800ba84 <__sflush_r+0x20>
 800ba78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	dc02      	bgt.n	800ba84 <__sflush_r+0x20>
 800ba7e:	2000      	movs	r0, #0
 800ba80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba86:	2e00      	cmp	r6, #0
 800ba88:	d0f9      	beq.n	800ba7e <__sflush_r+0x1a>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba90:	682f      	ldr	r7, [r5, #0]
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	d032      	beq.n	800bafc <__sflush_r+0x98>
 800ba96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba98:	89a3      	ldrh	r3, [r4, #12]
 800ba9a:	075a      	lsls	r2, r3, #29
 800ba9c:	d505      	bpl.n	800baaa <__sflush_r+0x46>
 800ba9e:	6863      	ldr	r3, [r4, #4]
 800baa0:	1ac0      	subs	r0, r0, r3
 800baa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800baa4:	b10b      	cbz	r3, 800baaa <__sflush_r+0x46>
 800baa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800baa8:	1ac0      	subs	r0, r0, r3
 800baaa:	2300      	movs	r3, #0
 800baac:	4602      	mov	r2, r0
 800baae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bab0:	6a21      	ldr	r1, [r4, #32]
 800bab2:	4628      	mov	r0, r5
 800bab4:	47b0      	blx	r6
 800bab6:	1c43      	adds	r3, r0, #1
 800bab8:	89a3      	ldrh	r3, [r4, #12]
 800baba:	d106      	bne.n	800baca <__sflush_r+0x66>
 800babc:	6829      	ldr	r1, [r5, #0]
 800babe:	291d      	cmp	r1, #29
 800bac0:	d82c      	bhi.n	800bb1c <__sflush_r+0xb8>
 800bac2:	4a2a      	ldr	r2, [pc, #168]	; (800bb6c <__sflush_r+0x108>)
 800bac4:	40ca      	lsrs	r2, r1
 800bac6:	07d6      	lsls	r6, r2, #31
 800bac8:	d528      	bpl.n	800bb1c <__sflush_r+0xb8>
 800baca:	2200      	movs	r2, #0
 800bacc:	6062      	str	r2, [r4, #4]
 800bace:	04d9      	lsls	r1, r3, #19
 800bad0:	6922      	ldr	r2, [r4, #16]
 800bad2:	6022      	str	r2, [r4, #0]
 800bad4:	d504      	bpl.n	800bae0 <__sflush_r+0x7c>
 800bad6:	1c42      	adds	r2, r0, #1
 800bad8:	d101      	bne.n	800bade <__sflush_r+0x7a>
 800bada:	682b      	ldr	r3, [r5, #0]
 800badc:	b903      	cbnz	r3, 800bae0 <__sflush_r+0x7c>
 800bade:	6560      	str	r0, [r4, #84]	; 0x54
 800bae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bae2:	602f      	str	r7, [r5, #0]
 800bae4:	2900      	cmp	r1, #0
 800bae6:	d0ca      	beq.n	800ba7e <__sflush_r+0x1a>
 800bae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800baec:	4299      	cmp	r1, r3
 800baee:	d002      	beq.n	800baf6 <__sflush_r+0x92>
 800baf0:	4628      	mov	r0, r5
 800baf2:	f000 fd8f 	bl	800c614 <_free_r>
 800baf6:	2000      	movs	r0, #0
 800baf8:	6360      	str	r0, [r4, #52]	; 0x34
 800bafa:	e7c1      	b.n	800ba80 <__sflush_r+0x1c>
 800bafc:	6a21      	ldr	r1, [r4, #32]
 800bafe:	2301      	movs	r3, #1
 800bb00:	4628      	mov	r0, r5
 800bb02:	47b0      	blx	r6
 800bb04:	1c41      	adds	r1, r0, #1
 800bb06:	d1c7      	bne.n	800ba98 <__sflush_r+0x34>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d0c4      	beq.n	800ba98 <__sflush_r+0x34>
 800bb0e:	2b1d      	cmp	r3, #29
 800bb10:	d001      	beq.n	800bb16 <__sflush_r+0xb2>
 800bb12:	2b16      	cmp	r3, #22
 800bb14:	d101      	bne.n	800bb1a <__sflush_r+0xb6>
 800bb16:	602f      	str	r7, [r5, #0]
 800bb18:	e7b1      	b.n	800ba7e <__sflush_r+0x1a>
 800bb1a:	89a3      	ldrh	r3, [r4, #12]
 800bb1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	e7ad      	b.n	800ba80 <__sflush_r+0x1c>
 800bb24:	690f      	ldr	r7, [r1, #16]
 800bb26:	2f00      	cmp	r7, #0
 800bb28:	d0a9      	beq.n	800ba7e <__sflush_r+0x1a>
 800bb2a:	0793      	lsls	r3, r2, #30
 800bb2c:	680e      	ldr	r6, [r1, #0]
 800bb2e:	bf08      	it	eq
 800bb30:	694b      	ldreq	r3, [r1, #20]
 800bb32:	600f      	str	r7, [r1, #0]
 800bb34:	bf18      	it	ne
 800bb36:	2300      	movne	r3, #0
 800bb38:	eba6 0807 	sub.w	r8, r6, r7
 800bb3c:	608b      	str	r3, [r1, #8]
 800bb3e:	f1b8 0f00 	cmp.w	r8, #0
 800bb42:	dd9c      	ble.n	800ba7e <__sflush_r+0x1a>
 800bb44:	6a21      	ldr	r1, [r4, #32]
 800bb46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb48:	4643      	mov	r3, r8
 800bb4a:	463a      	mov	r2, r7
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	47b0      	blx	r6
 800bb50:	2800      	cmp	r0, #0
 800bb52:	dc06      	bgt.n	800bb62 <__sflush_r+0xfe>
 800bb54:	89a3      	ldrh	r3, [r4, #12]
 800bb56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb5a:	81a3      	strh	r3, [r4, #12]
 800bb5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb60:	e78e      	b.n	800ba80 <__sflush_r+0x1c>
 800bb62:	4407      	add	r7, r0
 800bb64:	eba8 0800 	sub.w	r8, r8, r0
 800bb68:	e7e9      	b.n	800bb3e <__sflush_r+0xda>
 800bb6a:	bf00      	nop
 800bb6c:	20400001 	.word	0x20400001

0800bb70 <_fflush_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	690b      	ldr	r3, [r1, #16]
 800bb74:	4605      	mov	r5, r0
 800bb76:	460c      	mov	r4, r1
 800bb78:	b913      	cbnz	r3, 800bb80 <_fflush_r+0x10>
 800bb7a:	2500      	movs	r5, #0
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}
 800bb80:	b118      	cbz	r0, 800bb8a <_fflush_r+0x1a>
 800bb82:	6983      	ldr	r3, [r0, #24]
 800bb84:	b90b      	cbnz	r3, 800bb8a <_fflush_r+0x1a>
 800bb86:	f000 f887 	bl	800bc98 <__sinit>
 800bb8a:	4b14      	ldr	r3, [pc, #80]	; (800bbdc <_fflush_r+0x6c>)
 800bb8c:	429c      	cmp	r4, r3
 800bb8e:	d11b      	bne.n	800bbc8 <_fflush_r+0x58>
 800bb90:	686c      	ldr	r4, [r5, #4]
 800bb92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d0ef      	beq.n	800bb7a <_fflush_r+0xa>
 800bb9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb9c:	07d0      	lsls	r0, r2, #31
 800bb9e:	d404      	bmi.n	800bbaa <_fflush_r+0x3a>
 800bba0:	0599      	lsls	r1, r3, #22
 800bba2:	d402      	bmi.n	800bbaa <_fflush_r+0x3a>
 800bba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bba6:	f000 f92c 	bl	800be02 <__retarget_lock_acquire_recursive>
 800bbaa:	4628      	mov	r0, r5
 800bbac:	4621      	mov	r1, r4
 800bbae:	f7ff ff59 	bl	800ba64 <__sflush_r>
 800bbb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbb4:	07da      	lsls	r2, r3, #31
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	d4e0      	bmi.n	800bb7c <_fflush_r+0xc>
 800bbba:	89a3      	ldrh	r3, [r4, #12]
 800bbbc:	059b      	lsls	r3, r3, #22
 800bbbe:	d4dd      	bmi.n	800bb7c <_fflush_r+0xc>
 800bbc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbc2:	f000 f91f 	bl	800be04 <__retarget_lock_release_recursive>
 800bbc6:	e7d9      	b.n	800bb7c <_fflush_r+0xc>
 800bbc8:	4b05      	ldr	r3, [pc, #20]	; (800bbe0 <_fflush_r+0x70>)
 800bbca:	429c      	cmp	r4, r3
 800bbcc:	d101      	bne.n	800bbd2 <_fflush_r+0x62>
 800bbce:	68ac      	ldr	r4, [r5, #8]
 800bbd0:	e7df      	b.n	800bb92 <_fflush_r+0x22>
 800bbd2:	4b04      	ldr	r3, [pc, #16]	; (800bbe4 <_fflush_r+0x74>)
 800bbd4:	429c      	cmp	r4, r3
 800bbd6:	bf08      	it	eq
 800bbd8:	68ec      	ldreq	r4, [r5, #12]
 800bbda:	e7da      	b.n	800bb92 <_fflush_r+0x22>
 800bbdc:	0800d5a4 	.word	0x0800d5a4
 800bbe0:	0800d5c4 	.word	0x0800d5c4
 800bbe4:	0800d584 	.word	0x0800d584

0800bbe8 <std>:
 800bbe8:	2300      	movs	r3, #0
 800bbea:	b510      	push	{r4, lr}
 800bbec:	4604      	mov	r4, r0
 800bbee:	e9c0 3300 	strd	r3, r3, [r0]
 800bbf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbf6:	6083      	str	r3, [r0, #8]
 800bbf8:	8181      	strh	r1, [r0, #12]
 800bbfa:	6643      	str	r3, [r0, #100]	; 0x64
 800bbfc:	81c2      	strh	r2, [r0, #14]
 800bbfe:	6183      	str	r3, [r0, #24]
 800bc00:	4619      	mov	r1, r3
 800bc02:	2208      	movs	r2, #8
 800bc04:	305c      	adds	r0, #92	; 0x5c
 800bc06:	f7fe fa67 	bl	800a0d8 <memset>
 800bc0a:	4b05      	ldr	r3, [pc, #20]	; (800bc20 <std+0x38>)
 800bc0c:	6263      	str	r3, [r4, #36]	; 0x24
 800bc0e:	4b05      	ldr	r3, [pc, #20]	; (800bc24 <std+0x3c>)
 800bc10:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc12:	4b05      	ldr	r3, [pc, #20]	; (800bc28 <std+0x40>)
 800bc14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc16:	4b05      	ldr	r3, [pc, #20]	; (800bc2c <std+0x44>)
 800bc18:	6224      	str	r4, [r4, #32]
 800bc1a:	6323      	str	r3, [r4, #48]	; 0x30
 800bc1c:	bd10      	pop	{r4, pc}
 800bc1e:	bf00      	nop
 800bc20:	0800caa9 	.word	0x0800caa9
 800bc24:	0800cacb 	.word	0x0800cacb
 800bc28:	0800cb03 	.word	0x0800cb03
 800bc2c:	0800cb27 	.word	0x0800cb27

0800bc30 <_cleanup_r>:
 800bc30:	4901      	ldr	r1, [pc, #4]	; (800bc38 <_cleanup_r+0x8>)
 800bc32:	f000 b8c1 	b.w	800bdb8 <_fwalk_reent>
 800bc36:	bf00      	nop
 800bc38:	0800bb71 	.word	0x0800bb71

0800bc3c <__sfmoreglue>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	2268      	movs	r2, #104	; 0x68
 800bc40:	1e4d      	subs	r5, r1, #1
 800bc42:	4355      	muls	r5, r2
 800bc44:	460e      	mov	r6, r1
 800bc46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc4a:	f000 fd4f 	bl	800c6ec <_malloc_r>
 800bc4e:	4604      	mov	r4, r0
 800bc50:	b140      	cbz	r0, 800bc64 <__sfmoreglue+0x28>
 800bc52:	2100      	movs	r1, #0
 800bc54:	e9c0 1600 	strd	r1, r6, [r0]
 800bc58:	300c      	adds	r0, #12
 800bc5a:	60a0      	str	r0, [r4, #8]
 800bc5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc60:	f7fe fa3a 	bl	800a0d8 <memset>
 800bc64:	4620      	mov	r0, r4
 800bc66:	bd70      	pop	{r4, r5, r6, pc}

0800bc68 <__sfp_lock_acquire>:
 800bc68:	4801      	ldr	r0, [pc, #4]	; (800bc70 <__sfp_lock_acquire+0x8>)
 800bc6a:	f000 b8ca 	b.w	800be02 <__retarget_lock_acquire_recursive>
 800bc6e:	bf00      	nop
 800bc70:	20000a7d 	.word	0x20000a7d

0800bc74 <__sfp_lock_release>:
 800bc74:	4801      	ldr	r0, [pc, #4]	; (800bc7c <__sfp_lock_release+0x8>)
 800bc76:	f000 b8c5 	b.w	800be04 <__retarget_lock_release_recursive>
 800bc7a:	bf00      	nop
 800bc7c:	20000a7d 	.word	0x20000a7d

0800bc80 <__sinit_lock_acquire>:
 800bc80:	4801      	ldr	r0, [pc, #4]	; (800bc88 <__sinit_lock_acquire+0x8>)
 800bc82:	f000 b8be 	b.w	800be02 <__retarget_lock_acquire_recursive>
 800bc86:	bf00      	nop
 800bc88:	20000a7e 	.word	0x20000a7e

0800bc8c <__sinit_lock_release>:
 800bc8c:	4801      	ldr	r0, [pc, #4]	; (800bc94 <__sinit_lock_release+0x8>)
 800bc8e:	f000 b8b9 	b.w	800be04 <__retarget_lock_release_recursive>
 800bc92:	bf00      	nop
 800bc94:	20000a7e 	.word	0x20000a7e

0800bc98 <__sinit>:
 800bc98:	b510      	push	{r4, lr}
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	f7ff fff0 	bl	800bc80 <__sinit_lock_acquire>
 800bca0:	69a3      	ldr	r3, [r4, #24]
 800bca2:	b11b      	cbz	r3, 800bcac <__sinit+0x14>
 800bca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bca8:	f7ff bff0 	b.w	800bc8c <__sinit_lock_release>
 800bcac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bcb0:	6523      	str	r3, [r4, #80]	; 0x50
 800bcb2:	4b13      	ldr	r3, [pc, #76]	; (800bd00 <__sinit+0x68>)
 800bcb4:	4a13      	ldr	r2, [pc, #76]	; (800bd04 <__sinit+0x6c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bcba:	42a3      	cmp	r3, r4
 800bcbc:	bf04      	itt	eq
 800bcbe:	2301      	moveq	r3, #1
 800bcc0:	61a3      	streq	r3, [r4, #24]
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f000 f820 	bl	800bd08 <__sfp>
 800bcc8:	6060      	str	r0, [r4, #4]
 800bcca:	4620      	mov	r0, r4
 800bccc:	f000 f81c 	bl	800bd08 <__sfp>
 800bcd0:	60a0      	str	r0, [r4, #8]
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f000 f818 	bl	800bd08 <__sfp>
 800bcd8:	2200      	movs	r2, #0
 800bcda:	60e0      	str	r0, [r4, #12]
 800bcdc:	2104      	movs	r1, #4
 800bcde:	6860      	ldr	r0, [r4, #4]
 800bce0:	f7ff ff82 	bl	800bbe8 <std>
 800bce4:	68a0      	ldr	r0, [r4, #8]
 800bce6:	2201      	movs	r2, #1
 800bce8:	2109      	movs	r1, #9
 800bcea:	f7ff ff7d 	bl	800bbe8 <std>
 800bcee:	68e0      	ldr	r0, [r4, #12]
 800bcf0:	2202      	movs	r2, #2
 800bcf2:	2112      	movs	r1, #18
 800bcf4:	f7ff ff78 	bl	800bbe8 <std>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	61a3      	str	r3, [r4, #24]
 800bcfc:	e7d2      	b.n	800bca4 <__sinit+0xc>
 800bcfe:	bf00      	nop
 800bd00:	0800d424 	.word	0x0800d424
 800bd04:	0800bc31 	.word	0x0800bc31

0800bd08 <__sfp>:
 800bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0a:	4607      	mov	r7, r0
 800bd0c:	f7ff ffac 	bl	800bc68 <__sfp_lock_acquire>
 800bd10:	4b1e      	ldr	r3, [pc, #120]	; (800bd8c <__sfp+0x84>)
 800bd12:	681e      	ldr	r6, [r3, #0]
 800bd14:	69b3      	ldr	r3, [r6, #24]
 800bd16:	b913      	cbnz	r3, 800bd1e <__sfp+0x16>
 800bd18:	4630      	mov	r0, r6
 800bd1a:	f7ff ffbd 	bl	800bc98 <__sinit>
 800bd1e:	3648      	adds	r6, #72	; 0x48
 800bd20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd24:	3b01      	subs	r3, #1
 800bd26:	d503      	bpl.n	800bd30 <__sfp+0x28>
 800bd28:	6833      	ldr	r3, [r6, #0]
 800bd2a:	b30b      	cbz	r3, 800bd70 <__sfp+0x68>
 800bd2c:	6836      	ldr	r6, [r6, #0]
 800bd2e:	e7f7      	b.n	800bd20 <__sfp+0x18>
 800bd30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd34:	b9d5      	cbnz	r5, 800bd6c <__sfp+0x64>
 800bd36:	4b16      	ldr	r3, [pc, #88]	; (800bd90 <__sfp+0x88>)
 800bd38:	60e3      	str	r3, [r4, #12]
 800bd3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd3e:	6665      	str	r5, [r4, #100]	; 0x64
 800bd40:	f000 f85e 	bl	800be00 <__retarget_lock_init_recursive>
 800bd44:	f7ff ff96 	bl	800bc74 <__sfp_lock_release>
 800bd48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd50:	6025      	str	r5, [r4, #0]
 800bd52:	61a5      	str	r5, [r4, #24]
 800bd54:	2208      	movs	r2, #8
 800bd56:	4629      	mov	r1, r5
 800bd58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd5c:	f7fe f9bc 	bl	800a0d8 <memset>
 800bd60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd68:	4620      	mov	r0, r4
 800bd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd6c:	3468      	adds	r4, #104	; 0x68
 800bd6e:	e7d9      	b.n	800bd24 <__sfp+0x1c>
 800bd70:	2104      	movs	r1, #4
 800bd72:	4638      	mov	r0, r7
 800bd74:	f7ff ff62 	bl	800bc3c <__sfmoreglue>
 800bd78:	4604      	mov	r4, r0
 800bd7a:	6030      	str	r0, [r6, #0]
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d1d5      	bne.n	800bd2c <__sfp+0x24>
 800bd80:	f7ff ff78 	bl	800bc74 <__sfp_lock_release>
 800bd84:	230c      	movs	r3, #12
 800bd86:	603b      	str	r3, [r7, #0]
 800bd88:	e7ee      	b.n	800bd68 <__sfp+0x60>
 800bd8a:	bf00      	nop
 800bd8c:	0800d424 	.word	0x0800d424
 800bd90:	ffff0001 	.word	0xffff0001

0800bd94 <fiprintf>:
 800bd94:	b40e      	push	{r1, r2, r3}
 800bd96:	b503      	push	{r0, r1, lr}
 800bd98:	4601      	mov	r1, r0
 800bd9a:	ab03      	add	r3, sp, #12
 800bd9c:	4805      	ldr	r0, [pc, #20]	; (800bdb4 <fiprintf+0x20>)
 800bd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda2:	6800      	ldr	r0, [r0, #0]
 800bda4:	9301      	str	r3, [sp, #4]
 800bda6:	f000 fd3f 	bl	800c828 <_vfiprintf_r>
 800bdaa:	b002      	add	sp, #8
 800bdac:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdb0:	b003      	add	sp, #12
 800bdb2:	4770      	bx	lr
 800bdb4:	20000024 	.word	0x20000024

0800bdb8 <_fwalk_reent>:
 800bdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	4688      	mov	r8, r1
 800bdc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bdc4:	2700      	movs	r7, #0
 800bdc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdca:	f1b9 0901 	subs.w	r9, r9, #1
 800bdce:	d505      	bpl.n	800bddc <_fwalk_reent+0x24>
 800bdd0:	6824      	ldr	r4, [r4, #0]
 800bdd2:	2c00      	cmp	r4, #0
 800bdd4:	d1f7      	bne.n	800bdc6 <_fwalk_reent+0xe>
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bddc:	89ab      	ldrh	r3, [r5, #12]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d907      	bls.n	800bdf2 <_fwalk_reent+0x3a>
 800bde2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bde6:	3301      	adds	r3, #1
 800bde8:	d003      	beq.n	800bdf2 <_fwalk_reent+0x3a>
 800bdea:	4629      	mov	r1, r5
 800bdec:	4630      	mov	r0, r6
 800bdee:	47c0      	blx	r8
 800bdf0:	4307      	orrs	r7, r0
 800bdf2:	3568      	adds	r5, #104	; 0x68
 800bdf4:	e7e9      	b.n	800bdca <_fwalk_reent+0x12>
	...

0800bdf8 <_localeconv_r>:
 800bdf8:	4800      	ldr	r0, [pc, #0]	; (800bdfc <_localeconv_r+0x4>)
 800bdfa:	4770      	bx	lr
 800bdfc:	20000178 	.word	0x20000178

0800be00 <__retarget_lock_init_recursive>:
 800be00:	4770      	bx	lr

0800be02 <__retarget_lock_acquire_recursive>:
 800be02:	4770      	bx	lr

0800be04 <__retarget_lock_release_recursive>:
 800be04:	4770      	bx	lr

0800be06 <__swhatbuf_r>:
 800be06:	b570      	push	{r4, r5, r6, lr}
 800be08:	460e      	mov	r6, r1
 800be0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be0e:	2900      	cmp	r1, #0
 800be10:	b096      	sub	sp, #88	; 0x58
 800be12:	4614      	mov	r4, r2
 800be14:	461d      	mov	r5, r3
 800be16:	da08      	bge.n	800be2a <__swhatbuf_r+0x24>
 800be18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800be1c:	2200      	movs	r2, #0
 800be1e:	602a      	str	r2, [r5, #0]
 800be20:	061a      	lsls	r2, r3, #24
 800be22:	d410      	bmi.n	800be46 <__swhatbuf_r+0x40>
 800be24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be28:	e00e      	b.n	800be48 <__swhatbuf_r+0x42>
 800be2a:	466a      	mov	r2, sp
 800be2c:	f000 feaa 	bl	800cb84 <_fstat_r>
 800be30:	2800      	cmp	r0, #0
 800be32:	dbf1      	blt.n	800be18 <__swhatbuf_r+0x12>
 800be34:	9a01      	ldr	r2, [sp, #4]
 800be36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be3e:	425a      	negs	r2, r3
 800be40:	415a      	adcs	r2, r3
 800be42:	602a      	str	r2, [r5, #0]
 800be44:	e7ee      	b.n	800be24 <__swhatbuf_r+0x1e>
 800be46:	2340      	movs	r3, #64	; 0x40
 800be48:	2000      	movs	r0, #0
 800be4a:	6023      	str	r3, [r4, #0]
 800be4c:	b016      	add	sp, #88	; 0x58
 800be4e:	bd70      	pop	{r4, r5, r6, pc}

0800be50 <__smakebuf_r>:
 800be50:	898b      	ldrh	r3, [r1, #12]
 800be52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be54:	079d      	lsls	r5, r3, #30
 800be56:	4606      	mov	r6, r0
 800be58:	460c      	mov	r4, r1
 800be5a:	d507      	bpl.n	800be6c <__smakebuf_r+0x1c>
 800be5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	6123      	str	r3, [r4, #16]
 800be64:	2301      	movs	r3, #1
 800be66:	6163      	str	r3, [r4, #20]
 800be68:	b002      	add	sp, #8
 800be6a:	bd70      	pop	{r4, r5, r6, pc}
 800be6c:	ab01      	add	r3, sp, #4
 800be6e:	466a      	mov	r2, sp
 800be70:	f7ff ffc9 	bl	800be06 <__swhatbuf_r>
 800be74:	9900      	ldr	r1, [sp, #0]
 800be76:	4605      	mov	r5, r0
 800be78:	4630      	mov	r0, r6
 800be7a:	f000 fc37 	bl	800c6ec <_malloc_r>
 800be7e:	b948      	cbnz	r0, 800be94 <__smakebuf_r+0x44>
 800be80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be84:	059a      	lsls	r2, r3, #22
 800be86:	d4ef      	bmi.n	800be68 <__smakebuf_r+0x18>
 800be88:	f023 0303 	bic.w	r3, r3, #3
 800be8c:	f043 0302 	orr.w	r3, r3, #2
 800be90:	81a3      	strh	r3, [r4, #12]
 800be92:	e7e3      	b.n	800be5c <__smakebuf_r+0xc>
 800be94:	4b0d      	ldr	r3, [pc, #52]	; (800becc <__smakebuf_r+0x7c>)
 800be96:	62b3      	str	r3, [r6, #40]	; 0x28
 800be98:	89a3      	ldrh	r3, [r4, #12]
 800be9a:	6020      	str	r0, [r4, #0]
 800be9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bea0:	81a3      	strh	r3, [r4, #12]
 800bea2:	9b00      	ldr	r3, [sp, #0]
 800bea4:	6163      	str	r3, [r4, #20]
 800bea6:	9b01      	ldr	r3, [sp, #4]
 800bea8:	6120      	str	r0, [r4, #16]
 800beaa:	b15b      	cbz	r3, 800bec4 <__smakebuf_r+0x74>
 800beac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beb0:	4630      	mov	r0, r6
 800beb2:	f000 fe79 	bl	800cba8 <_isatty_r>
 800beb6:	b128      	cbz	r0, 800bec4 <__smakebuf_r+0x74>
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	f023 0303 	bic.w	r3, r3, #3
 800bebe:	f043 0301 	orr.w	r3, r3, #1
 800bec2:	81a3      	strh	r3, [r4, #12]
 800bec4:	89a0      	ldrh	r0, [r4, #12]
 800bec6:	4305      	orrs	r5, r0
 800bec8:	81a5      	strh	r5, [r4, #12]
 800beca:	e7cd      	b.n	800be68 <__smakebuf_r+0x18>
 800becc:	0800bc31 	.word	0x0800bc31

0800bed0 <malloc>:
 800bed0:	4b02      	ldr	r3, [pc, #8]	; (800bedc <malloc+0xc>)
 800bed2:	4601      	mov	r1, r0
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	f000 bc09 	b.w	800c6ec <_malloc_r>
 800beda:	bf00      	nop
 800bedc:	20000024 	.word	0x20000024

0800bee0 <_Balloc>:
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bee4:	4604      	mov	r4, r0
 800bee6:	460d      	mov	r5, r1
 800bee8:	b976      	cbnz	r6, 800bf08 <_Balloc+0x28>
 800beea:	2010      	movs	r0, #16
 800beec:	f7ff fff0 	bl	800bed0 <malloc>
 800bef0:	4602      	mov	r2, r0
 800bef2:	6260      	str	r0, [r4, #36]	; 0x24
 800bef4:	b920      	cbnz	r0, 800bf00 <_Balloc+0x20>
 800bef6:	4b18      	ldr	r3, [pc, #96]	; (800bf58 <_Balloc+0x78>)
 800bef8:	4818      	ldr	r0, [pc, #96]	; (800bf5c <_Balloc+0x7c>)
 800befa:	2166      	movs	r1, #102	; 0x66
 800befc:	f7fe ff18 	bl	800ad30 <__assert_func>
 800bf00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf04:	6006      	str	r6, [r0, #0]
 800bf06:	60c6      	str	r6, [r0, #12]
 800bf08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf0a:	68f3      	ldr	r3, [r6, #12]
 800bf0c:	b183      	cbz	r3, 800bf30 <_Balloc+0x50>
 800bf0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf16:	b9b8      	cbnz	r0, 800bf48 <_Balloc+0x68>
 800bf18:	2101      	movs	r1, #1
 800bf1a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf1e:	1d72      	adds	r2, r6, #5
 800bf20:	0092      	lsls	r2, r2, #2
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 fb60 	bl	800c5e8 <_calloc_r>
 800bf28:	b160      	cbz	r0, 800bf44 <_Balloc+0x64>
 800bf2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf2e:	e00e      	b.n	800bf4e <_Balloc+0x6e>
 800bf30:	2221      	movs	r2, #33	; 0x21
 800bf32:	2104      	movs	r1, #4
 800bf34:	4620      	mov	r0, r4
 800bf36:	f000 fb57 	bl	800c5e8 <_calloc_r>
 800bf3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf3c:	60f0      	str	r0, [r6, #12]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e4      	bne.n	800bf0e <_Balloc+0x2e>
 800bf44:	2000      	movs	r0, #0
 800bf46:	bd70      	pop	{r4, r5, r6, pc}
 800bf48:	6802      	ldr	r2, [r0, #0]
 800bf4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf54:	e7f7      	b.n	800bf46 <_Balloc+0x66>
 800bf56:	bf00      	nop
 800bf58:	0800d45c 	.word	0x0800d45c
 800bf5c:	0800d5e4 	.word	0x0800d5e4

0800bf60 <_Bfree>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf64:	4605      	mov	r5, r0
 800bf66:	460c      	mov	r4, r1
 800bf68:	b976      	cbnz	r6, 800bf88 <_Bfree+0x28>
 800bf6a:	2010      	movs	r0, #16
 800bf6c:	f7ff ffb0 	bl	800bed0 <malloc>
 800bf70:	4602      	mov	r2, r0
 800bf72:	6268      	str	r0, [r5, #36]	; 0x24
 800bf74:	b920      	cbnz	r0, 800bf80 <_Bfree+0x20>
 800bf76:	4b09      	ldr	r3, [pc, #36]	; (800bf9c <_Bfree+0x3c>)
 800bf78:	4809      	ldr	r0, [pc, #36]	; (800bfa0 <_Bfree+0x40>)
 800bf7a:	218a      	movs	r1, #138	; 0x8a
 800bf7c:	f7fe fed8 	bl	800ad30 <__assert_func>
 800bf80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf84:	6006      	str	r6, [r0, #0]
 800bf86:	60c6      	str	r6, [r0, #12]
 800bf88:	b13c      	cbz	r4, 800bf9a <_Bfree+0x3a>
 800bf8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf8c:	6862      	ldr	r2, [r4, #4]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf94:	6021      	str	r1, [r4, #0]
 800bf96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	0800d45c 	.word	0x0800d45c
 800bfa0:	0800d5e4 	.word	0x0800d5e4

0800bfa4 <__multadd>:
 800bfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa8:	690d      	ldr	r5, [r1, #16]
 800bfaa:	4607      	mov	r7, r0
 800bfac:	460c      	mov	r4, r1
 800bfae:	461e      	mov	r6, r3
 800bfb0:	f101 0c14 	add.w	ip, r1, #20
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f8dc 3000 	ldr.w	r3, [ip]
 800bfba:	b299      	uxth	r1, r3
 800bfbc:	fb02 6101 	mla	r1, r2, r1, r6
 800bfc0:	0c1e      	lsrs	r6, r3, #16
 800bfc2:	0c0b      	lsrs	r3, r1, #16
 800bfc4:	fb02 3306 	mla	r3, r2, r6, r3
 800bfc8:	b289      	uxth	r1, r1
 800bfca:	3001      	adds	r0, #1
 800bfcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfd0:	4285      	cmp	r5, r0
 800bfd2:	f84c 1b04 	str.w	r1, [ip], #4
 800bfd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfda:	dcec      	bgt.n	800bfb6 <__multadd+0x12>
 800bfdc:	b30e      	cbz	r6, 800c022 <__multadd+0x7e>
 800bfde:	68a3      	ldr	r3, [r4, #8]
 800bfe0:	42ab      	cmp	r3, r5
 800bfe2:	dc19      	bgt.n	800c018 <__multadd+0x74>
 800bfe4:	6861      	ldr	r1, [r4, #4]
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	3101      	adds	r1, #1
 800bfea:	f7ff ff79 	bl	800bee0 <_Balloc>
 800bfee:	4680      	mov	r8, r0
 800bff0:	b928      	cbnz	r0, 800bffe <__multadd+0x5a>
 800bff2:	4602      	mov	r2, r0
 800bff4:	4b0c      	ldr	r3, [pc, #48]	; (800c028 <__multadd+0x84>)
 800bff6:	480d      	ldr	r0, [pc, #52]	; (800c02c <__multadd+0x88>)
 800bff8:	21b5      	movs	r1, #181	; 0xb5
 800bffa:	f7fe fe99 	bl	800ad30 <__assert_func>
 800bffe:	6922      	ldr	r2, [r4, #16]
 800c000:	3202      	adds	r2, #2
 800c002:	f104 010c 	add.w	r1, r4, #12
 800c006:	0092      	lsls	r2, r2, #2
 800c008:	300c      	adds	r0, #12
 800c00a:	f7fe f857 	bl	800a0bc <memcpy>
 800c00e:	4621      	mov	r1, r4
 800c010:	4638      	mov	r0, r7
 800c012:	f7ff ffa5 	bl	800bf60 <_Bfree>
 800c016:	4644      	mov	r4, r8
 800c018:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c01c:	3501      	adds	r5, #1
 800c01e:	615e      	str	r6, [r3, #20]
 800c020:	6125      	str	r5, [r4, #16]
 800c022:	4620      	mov	r0, r4
 800c024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c028:	0800d572 	.word	0x0800d572
 800c02c:	0800d5e4 	.word	0x0800d5e4

0800c030 <__hi0bits>:
 800c030:	0c03      	lsrs	r3, r0, #16
 800c032:	041b      	lsls	r3, r3, #16
 800c034:	b9d3      	cbnz	r3, 800c06c <__hi0bits+0x3c>
 800c036:	0400      	lsls	r0, r0, #16
 800c038:	2310      	movs	r3, #16
 800c03a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c03e:	bf04      	itt	eq
 800c040:	0200      	lsleq	r0, r0, #8
 800c042:	3308      	addeq	r3, #8
 800c044:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c048:	bf04      	itt	eq
 800c04a:	0100      	lsleq	r0, r0, #4
 800c04c:	3304      	addeq	r3, #4
 800c04e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c052:	bf04      	itt	eq
 800c054:	0080      	lsleq	r0, r0, #2
 800c056:	3302      	addeq	r3, #2
 800c058:	2800      	cmp	r0, #0
 800c05a:	db05      	blt.n	800c068 <__hi0bits+0x38>
 800c05c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c060:	f103 0301 	add.w	r3, r3, #1
 800c064:	bf08      	it	eq
 800c066:	2320      	moveq	r3, #32
 800c068:	4618      	mov	r0, r3
 800c06a:	4770      	bx	lr
 800c06c:	2300      	movs	r3, #0
 800c06e:	e7e4      	b.n	800c03a <__hi0bits+0xa>

0800c070 <__lo0bits>:
 800c070:	6803      	ldr	r3, [r0, #0]
 800c072:	f013 0207 	ands.w	r2, r3, #7
 800c076:	4601      	mov	r1, r0
 800c078:	d00b      	beq.n	800c092 <__lo0bits+0x22>
 800c07a:	07da      	lsls	r2, r3, #31
 800c07c:	d423      	bmi.n	800c0c6 <__lo0bits+0x56>
 800c07e:	0798      	lsls	r0, r3, #30
 800c080:	bf49      	itett	mi
 800c082:	085b      	lsrmi	r3, r3, #1
 800c084:	089b      	lsrpl	r3, r3, #2
 800c086:	2001      	movmi	r0, #1
 800c088:	600b      	strmi	r3, [r1, #0]
 800c08a:	bf5c      	itt	pl
 800c08c:	600b      	strpl	r3, [r1, #0]
 800c08e:	2002      	movpl	r0, #2
 800c090:	4770      	bx	lr
 800c092:	b298      	uxth	r0, r3
 800c094:	b9a8      	cbnz	r0, 800c0c2 <__lo0bits+0x52>
 800c096:	0c1b      	lsrs	r3, r3, #16
 800c098:	2010      	movs	r0, #16
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	b90a      	cbnz	r2, 800c0a2 <__lo0bits+0x32>
 800c09e:	3008      	adds	r0, #8
 800c0a0:	0a1b      	lsrs	r3, r3, #8
 800c0a2:	071a      	lsls	r2, r3, #28
 800c0a4:	bf04      	itt	eq
 800c0a6:	091b      	lsreq	r3, r3, #4
 800c0a8:	3004      	addeq	r0, #4
 800c0aa:	079a      	lsls	r2, r3, #30
 800c0ac:	bf04      	itt	eq
 800c0ae:	089b      	lsreq	r3, r3, #2
 800c0b0:	3002      	addeq	r0, #2
 800c0b2:	07da      	lsls	r2, r3, #31
 800c0b4:	d403      	bmi.n	800c0be <__lo0bits+0x4e>
 800c0b6:	085b      	lsrs	r3, r3, #1
 800c0b8:	f100 0001 	add.w	r0, r0, #1
 800c0bc:	d005      	beq.n	800c0ca <__lo0bits+0x5a>
 800c0be:	600b      	str	r3, [r1, #0]
 800c0c0:	4770      	bx	lr
 800c0c2:	4610      	mov	r0, r2
 800c0c4:	e7e9      	b.n	800c09a <__lo0bits+0x2a>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	4770      	bx	lr
 800c0ca:	2020      	movs	r0, #32
 800c0cc:	4770      	bx	lr
	...

0800c0d0 <__i2b>:
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	2101      	movs	r1, #1
 800c0d6:	f7ff ff03 	bl	800bee0 <_Balloc>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	b928      	cbnz	r0, 800c0ea <__i2b+0x1a>
 800c0de:	4b05      	ldr	r3, [pc, #20]	; (800c0f4 <__i2b+0x24>)
 800c0e0:	4805      	ldr	r0, [pc, #20]	; (800c0f8 <__i2b+0x28>)
 800c0e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c0e6:	f7fe fe23 	bl	800ad30 <__assert_func>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	6144      	str	r4, [r0, #20]
 800c0ee:	6103      	str	r3, [r0, #16]
 800c0f0:	bd10      	pop	{r4, pc}
 800c0f2:	bf00      	nop
 800c0f4:	0800d572 	.word	0x0800d572
 800c0f8:	0800d5e4 	.word	0x0800d5e4

0800c0fc <__multiply>:
 800c0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c100:	4691      	mov	r9, r2
 800c102:	690a      	ldr	r2, [r1, #16]
 800c104:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c108:	429a      	cmp	r2, r3
 800c10a:	bfb8      	it	lt
 800c10c:	460b      	movlt	r3, r1
 800c10e:	460c      	mov	r4, r1
 800c110:	bfbc      	itt	lt
 800c112:	464c      	movlt	r4, r9
 800c114:	4699      	movlt	r9, r3
 800c116:	6927      	ldr	r7, [r4, #16]
 800c118:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c11c:	68a3      	ldr	r3, [r4, #8]
 800c11e:	6861      	ldr	r1, [r4, #4]
 800c120:	eb07 060a 	add.w	r6, r7, sl
 800c124:	42b3      	cmp	r3, r6
 800c126:	b085      	sub	sp, #20
 800c128:	bfb8      	it	lt
 800c12a:	3101      	addlt	r1, #1
 800c12c:	f7ff fed8 	bl	800bee0 <_Balloc>
 800c130:	b930      	cbnz	r0, 800c140 <__multiply+0x44>
 800c132:	4602      	mov	r2, r0
 800c134:	4b44      	ldr	r3, [pc, #272]	; (800c248 <__multiply+0x14c>)
 800c136:	4845      	ldr	r0, [pc, #276]	; (800c24c <__multiply+0x150>)
 800c138:	f240 115d 	movw	r1, #349	; 0x15d
 800c13c:	f7fe fdf8 	bl	800ad30 <__assert_func>
 800c140:	f100 0514 	add.w	r5, r0, #20
 800c144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c148:	462b      	mov	r3, r5
 800c14a:	2200      	movs	r2, #0
 800c14c:	4543      	cmp	r3, r8
 800c14e:	d321      	bcc.n	800c194 <__multiply+0x98>
 800c150:	f104 0314 	add.w	r3, r4, #20
 800c154:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c158:	f109 0314 	add.w	r3, r9, #20
 800c15c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c160:	9202      	str	r2, [sp, #8]
 800c162:	1b3a      	subs	r2, r7, r4
 800c164:	3a15      	subs	r2, #21
 800c166:	f022 0203 	bic.w	r2, r2, #3
 800c16a:	3204      	adds	r2, #4
 800c16c:	f104 0115 	add.w	r1, r4, #21
 800c170:	428f      	cmp	r7, r1
 800c172:	bf38      	it	cc
 800c174:	2204      	movcc	r2, #4
 800c176:	9201      	str	r2, [sp, #4]
 800c178:	9a02      	ldr	r2, [sp, #8]
 800c17a:	9303      	str	r3, [sp, #12]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d80c      	bhi.n	800c19a <__multiply+0x9e>
 800c180:	2e00      	cmp	r6, #0
 800c182:	dd03      	ble.n	800c18c <__multiply+0x90>
 800c184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d05a      	beq.n	800c242 <__multiply+0x146>
 800c18c:	6106      	str	r6, [r0, #16]
 800c18e:	b005      	add	sp, #20
 800c190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c194:	f843 2b04 	str.w	r2, [r3], #4
 800c198:	e7d8      	b.n	800c14c <__multiply+0x50>
 800c19a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c19e:	f1ba 0f00 	cmp.w	sl, #0
 800c1a2:	d024      	beq.n	800c1ee <__multiply+0xf2>
 800c1a4:	f104 0e14 	add.w	lr, r4, #20
 800c1a8:	46a9      	mov	r9, r5
 800c1aa:	f04f 0c00 	mov.w	ip, #0
 800c1ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1b2:	f8d9 1000 	ldr.w	r1, [r9]
 800c1b6:	fa1f fb82 	uxth.w	fp, r2
 800c1ba:	b289      	uxth	r1, r1
 800c1bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c1c4:	f8d9 2000 	ldr.w	r2, [r9]
 800c1c8:	4461      	add	r1, ip
 800c1ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800c1d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1d6:	b289      	uxth	r1, r1
 800c1d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1dc:	4577      	cmp	r7, lr
 800c1de:	f849 1b04 	str.w	r1, [r9], #4
 800c1e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1e6:	d8e2      	bhi.n	800c1ae <__multiply+0xb2>
 800c1e8:	9a01      	ldr	r2, [sp, #4]
 800c1ea:	f845 c002 	str.w	ip, [r5, r2]
 800c1ee:	9a03      	ldr	r2, [sp, #12]
 800c1f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	f1b9 0f00 	cmp.w	r9, #0
 800c1fa:	d020      	beq.n	800c23e <__multiply+0x142>
 800c1fc:	6829      	ldr	r1, [r5, #0]
 800c1fe:	f104 0c14 	add.w	ip, r4, #20
 800c202:	46ae      	mov	lr, r5
 800c204:	f04f 0a00 	mov.w	sl, #0
 800c208:	f8bc b000 	ldrh.w	fp, [ip]
 800c20c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c210:	fb09 220b 	mla	r2, r9, fp, r2
 800c214:	4492      	add	sl, r2
 800c216:	b289      	uxth	r1, r1
 800c218:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c21c:	f84e 1b04 	str.w	r1, [lr], #4
 800c220:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c224:	f8be 1000 	ldrh.w	r1, [lr]
 800c228:	0c12      	lsrs	r2, r2, #16
 800c22a:	fb09 1102 	mla	r1, r9, r2, r1
 800c22e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c232:	4567      	cmp	r7, ip
 800c234:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c238:	d8e6      	bhi.n	800c208 <__multiply+0x10c>
 800c23a:	9a01      	ldr	r2, [sp, #4]
 800c23c:	50a9      	str	r1, [r5, r2]
 800c23e:	3504      	adds	r5, #4
 800c240:	e79a      	b.n	800c178 <__multiply+0x7c>
 800c242:	3e01      	subs	r6, #1
 800c244:	e79c      	b.n	800c180 <__multiply+0x84>
 800c246:	bf00      	nop
 800c248:	0800d572 	.word	0x0800d572
 800c24c:	0800d5e4 	.word	0x0800d5e4

0800c250 <__pow5mult>:
 800c250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c254:	4615      	mov	r5, r2
 800c256:	f012 0203 	ands.w	r2, r2, #3
 800c25a:	4606      	mov	r6, r0
 800c25c:	460f      	mov	r7, r1
 800c25e:	d007      	beq.n	800c270 <__pow5mult+0x20>
 800c260:	4c25      	ldr	r4, [pc, #148]	; (800c2f8 <__pow5mult+0xa8>)
 800c262:	3a01      	subs	r2, #1
 800c264:	2300      	movs	r3, #0
 800c266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c26a:	f7ff fe9b 	bl	800bfa4 <__multadd>
 800c26e:	4607      	mov	r7, r0
 800c270:	10ad      	asrs	r5, r5, #2
 800c272:	d03d      	beq.n	800c2f0 <__pow5mult+0xa0>
 800c274:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c276:	b97c      	cbnz	r4, 800c298 <__pow5mult+0x48>
 800c278:	2010      	movs	r0, #16
 800c27a:	f7ff fe29 	bl	800bed0 <malloc>
 800c27e:	4602      	mov	r2, r0
 800c280:	6270      	str	r0, [r6, #36]	; 0x24
 800c282:	b928      	cbnz	r0, 800c290 <__pow5mult+0x40>
 800c284:	4b1d      	ldr	r3, [pc, #116]	; (800c2fc <__pow5mult+0xac>)
 800c286:	481e      	ldr	r0, [pc, #120]	; (800c300 <__pow5mult+0xb0>)
 800c288:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c28c:	f7fe fd50 	bl	800ad30 <__assert_func>
 800c290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c294:	6004      	str	r4, [r0, #0]
 800c296:	60c4      	str	r4, [r0, #12]
 800c298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c29c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2a0:	b94c      	cbnz	r4, 800c2b6 <__pow5mult+0x66>
 800c2a2:	f240 2171 	movw	r1, #625	; 0x271
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f7ff ff12 	bl	800c0d0 <__i2b>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	6003      	str	r3, [r0, #0]
 800c2b6:	f04f 0900 	mov.w	r9, #0
 800c2ba:	07eb      	lsls	r3, r5, #31
 800c2bc:	d50a      	bpl.n	800c2d4 <__pow5mult+0x84>
 800c2be:	4639      	mov	r1, r7
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	f7ff ff1a 	bl	800c0fc <__multiply>
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	4680      	mov	r8, r0
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f7ff fe47 	bl	800bf60 <_Bfree>
 800c2d2:	4647      	mov	r7, r8
 800c2d4:	106d      	asrs	r5, r5, #1
 800c2d6:	d00b      	beq.n	800c2f0 <__pow5mult+0xa0>
 800c2d8:	6820      	ldr	r0, [r4, #0]
 800c2da:	b938      	cbnz	r0, 800c2ec <__pow5mult+0x9c>
 800c2dc:	4622      	mov	r2, r4
 800c2de:	4621      	mov	r1, r4
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f7ff ff0b 	bl	800c0fc <__multiply>
 800c2e6:	6020      	str	r0, [r4, #0]
 800c2e8:	f8c0 9000 	str.w	r9, [r0]
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	e7e4      	b.n	800c2ba <__pow5mult+0x6a>
 800c2f0:	4638      	mov	r0, r7
 800c2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2f6:	bf00      	nop
 800c2f8:	0800d730 	.word	0x0800d730
 800c2fc:	0800d45c 	.word	0x0800d45c
 800c300:	0800d5e4 	.word	0x0800d5e4

0800c304 <__lshift>:
 800c304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c308:	460c      	mov	r4, r1
 800c30a:	6849      	ldr	r1, [r1, #4]
 800c30c:	6923      	ldr	r3, [r4, #16]
 800c30e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c312:	68a3      	ldr	r3, [r4, #8]
 800c314:	4607      	mov	r7, r0
 800c316:	4691      	mov	r9, r2
 800c318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c31c:	f108 0601 	add.w	r6, r8, #1
 800c320:	42b3      	cmp	r3, r6
 800c322:	db0b      	blt.n	800c33c <__lshift+0x38>
 800c324:	4638      	mov	r0, r7
 800c326:	f7ff fddb 	bl	800bee0 <_Balloc>
 800c32a:	4605      	mov	r5, r0
 800c32c:	b948      	cbnz	r0, 800c342 <__lshift+0x3e>
 800c32e:	4602      	mov	r2, r0
 800c330:	4b2a      	ldr	r3, [pc, #168]	; (800c3dc <__lshift+0xd8>)
 800c332:	482b      	ldr	r0, [pc, #172]	; (800c3e0 <__lshift+0xdc>)
 800c334:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c338:	f7fe fcfa 	bl	800ad30 <__assert_func>
 800c33c:	3101      	adds	r1, #1
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	e7ee      	b.n	800c320 <__lshift+0x1c>
 800c342:	2300      	movs	r3, #0
 800c344:	f100 0114 	add.w	r1, r0, #20
 800c348:	f100 0210 	add.w	r2, r0, #16
 800c34c:	4618      	mov	r0, r3
 800c34e:	4553      	cmp	r3, sl
 800c350:	db37      	blt.n	800c3c2 <__lshift+0xbe>
 800c352:	6920      	ldr	r0, [r4, #16]
 800c354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c358:	f104 0314 	add.w	r3, r4, #20
 800c35c:	f019 091f 	ands.w	r9, r9, #31
 800c360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c364:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c368:	d02f      	beq.n	800c3ca <__lshift+0xc6>
 800c36a:	f1c9 0e20 	rsb	lr, r9, #32
 800c36e:	468a      	mov	sl, r1
 800c370:	f04f 0c00 	mov.w	ip, #0
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	fa02 f209 	lsl.w	r2, r2, r9
 800c37a:	ea42 020c 	orr.w	r2, r2, ip
 800c37e:	f84a 2b04 	str.w	r2, [sl], #4
 800c382:	f853 2b04 	ldr.w	r2, [r3], #4
 800c386:	4298      	cmp	r0, r3
 800c388:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c38c:	d8f2      	bhi.n	800c374 <__lshift+0x70>
 800c38e:	1b03      	subs	r3, r0, r4
 800c390:	3b15      	subs	r3, #21
 800c392:	f023 0303 	bic.w	r3, r3, #3
 800c396:	3304      	adds	r3, #4
 800c398:	f104 0215 	add.w	r2, r4, #21
 800c39c:	4290      	cmp	r0, r2
 800c39e:	bf38      	it	cc
 800c3a0:	2304      	movcc	r3, #4
 800c3a2:	f841 c003 	str.w	ip, [r1, r3]
 800c3a6:	f1bc 0f00 	cmp.w	ip, #0
 800c3aa:	d001      	beq.n	800c3b0 <__lshift+0xac>
 800c3ac:	f108 0602 	add.w	r6, r8, #2
 800c3b0:	3e01      	subs	r6, #1
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	612e      	str	r6, [r5, #16]
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	f7ff fdd2 	bl	800bf60 <_Bfree>
 800c3bc:	4628      	mov	r0, r5
 800c3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	e7c1      	b.n	800c34e <__lshift+0x4a>
 800c3ca:	3904      	subs	r1, #4
 800c3cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3d4:	4298      	cmp	r0, r3
 800c3d6:	d8f9      	bhi.n	800c3cc <__lshift+0xc8>
 800c3d8:	e7ea      	b.n	800c3b0 <__lshift+0xac>
 800c3da:	bf00      	nop
 800c3dc:	0800d572 	.word	0x0800d572
 800c3e0:	0800d5e4 	.word	0x0800d5e4

0800c3e4 <__mcmp>:
 800c3e4:	b530      	push	{r4, r5, lr}
 800c3e6:	6902      	ldr	r2, [r0, #16]
 800c3e8:	690c      	ldr	r4, [r1, #16]
 800c3ea:	1b12      	subs	r2, r2, r4
 800c3ec:	d10e      	bne.n	800c40c <__mcmp+0x28>
 800c3ee:	f100 0314 	add.w	r3, r0, #20
 800c3f2:	3114      	adds	r1, #20
 800c3f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c3f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c3fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c400:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c404:	42a5      	cmp	r5, r4
 800c406:	d003      	beq.n	800c410 <__mcmp+0x2c>
 800c408:	d305      	bcc.n	800c416 <__mcmp+0x32>
 800c40a:	2201      	movs	r2, #1
 800c40c:	4610      	mov	r0, r2
 800c40e:	bd30      	pop	{r4, r5, pc}
 800c410:	4283      	cmp	r3, r0
 800c412:	d3f3      	bcc.n	800c3fc <__mcmp+0x18>
 800c414:	e7fa      	b.n	800c40c <__mcmp+0x28>
 800c416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c41a:	e7f7      	b.n	800c40c <__mcmp+0x28>

0800c41c <__mdiff>:
 800c41c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c420:	460c      	mov	r4, r1
 800c422:	4606      	mov	r6, r0
 800c424:	4611      	mov	r1, r2
 800c426:	4620      	mov	r0, r4
 800c428:	4690      	mov	r8, r2
 800c42a:	f7ff ffdb 	bl	800c3e4 <__mcmp>
 800c42e:	1e05      	subs	r5, r0, #0
 800c430:	d110      	bne.n	800c454 <__mdiff+0x38>
 800c432:	4629      	mov	r1, r5
 800c434:	4630      	mov	r0, r6
 800c436:	f7ff fd53 	bl	800bee0 <_Balloc>
 800c43a:	b930      	cbnz	r0, 800c44a <__mdiff+0x2e>
 800c43c:	4b3a      	ldr	r3, [pc, #232]	; (800c528 <__mdiff+0x10c>)
 800c43e:	4602      	mov	r2, r0
 800c440:	f240 2132 	movw	r1, #562	; 0x232
 800c444:	4839      	ldr	r0, [pc, #228]	; (800c52c <__mdiff+0x110>)
 800c446:	f7fe fc73 	bl	800ad30 <__assert_func>
 800c44a:	2301      	movs	r3, #1
 800c44c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c454:	bfa4      	itt	ge
 800c456:	4643      	movge	r3, r8
 800c458:	46a0      	movge	r8, r4
 800c45a:	4630      	mov	r0, r6
 800c45c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c460:	bfa6      	itte	ge
 800c462:	461c      	movge	r4, r3
 800c464:	2500      	movge	r5, #0
 800c466:	2501      	movlt	r5, #1
 800c468:	f7ff fd3a 	bl	800bee0 <_Balloc>
 800c46c:	b920      	cbnz	r0, 800c478 <__mdiff+0x5c>
 800c46e:	4b2e      	ldr	r3, [pc, #184]	; (800c528 <__mdiff+0x10c>)
 800c470:	4602      	mov	r2, r0
 800c472:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c476:	e7e5      	b.n	800c444 <__mdiff+0x28>
 800c478:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c47c:	6926      	ldr	r6, [r4, #16]
 800c47e:	60c5      	str	r5, [r0, #12]
 800c480:	f104 0914 	add.w	r9, r4, #20
 800c484:	f108 0514 	add.w	r5, r8, #20
 800c488:	f100 0e14 	add.w	lr, r0, #20
 800c48c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c490:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c494:	f108 0210 	add.w	r2, r8, #16
 800c498:	46f2      	mov	sl, lr
 800c49a:	2100      	movs	r1, #0
 800c49c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4a4:	fa1f f883 	uxth.w	r8, r3
 800c4a8:	fa11 f18b 	uxtah	r1, r1, fp
 800c4ac:	0c1b      	lsrs	r3, r3, #16
 800c4ae:	eba1 0808 	sub.w	r8, r1, r8
 800c4b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4ba:	fa1f f888 	uxth.w	r8, r8
 800c4be:	1419      	asrs	r1, r3, #16
 800c4c0:	454e      	cmp	r6, r9
 800c4c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4c6:	f84a 3b04 	str.w	r3, [sl], #4
 800c4ca:	d8e7      	bhi.n	800c49c <__mdiff+0x80>
 800c4cc:	1b33      	subs	r3, r6, r4
 800c4ce:	3b15      	subs	r3, #21
 800c4d0:	f023 0303 	bic.w	r3, r3, #3
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	3415      	adds	r4, #21
 800c4d8:	42a6      	cmp	r6, r4
 800c4da:	bf38      	it	cc
 800c4dc:	2304      	movcc	r3, #4
 800c4de:	441d      	add	r5, r3
 800c4e0:	4473      	add	r3, lr
 800c4e2:	469e      	mov	lr, r3
 800c4e4:	462e      	mov	r6, r5
 800c4e6:	4566      	cmp	r6, ip
 800c4e8:	d30e      	bcc.n	800c508 <__mdiff+0xec>
 800c4ea:	f10c 0203 	add.w	r2, ip, #3
 800c4ee:	1b52      	subs	r2, r2, r5
 800c4f0:	f022 0203 	bic.w	r2, r2, #3
 800c4f4:	3d03      	subs	r5, #3
 800c4f6:	45ac      	cmp	ip, r5
 800c4f8:	bf38      	it	cc
 800c4fa:	2200      	movcc	r2, #0
 800c4fc:	441a      	add	r2, r3
 800c4fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c502:	b17b      	cbz	r3, 800c524 <__mdiff+0x108>
 800c504:	6107      	str	r7, [r0, #16]
 800c506:	e7a3      	b.n	800c450 <__mdiff+0x34>
 800c508:	f856 8b04 	ldr.w	r8, [r6], #4
 800c50c:	fa11 f288 	uxtah	r2, r1, r8
 800c510:	1414      	asrs	r4, r2, #16
 800c512:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c516:	b292      	uxth	r2, r2
 800c518:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c51c:	f84e 2b04 	str.w	r2, [lr], #4
 800c520:	1421      	asrs	r1, r4, #16
 800c522:	e7e0      	b.n	800c4e6 <__mdiff+0xca>
 800c524:	3f01      	subs	r7, #1
 800c526:	e7ea      	b.n	800c4fe <__mdiff+0xe2>
 800c528:	0800d572 	.word	0x0800d572
 800c52c:	0800d5e4 	.word	0x0800d5e4

0800c530 <__d2b>:
 800c530:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c534:	4689      	mov	r9, r1
 800c536:	2101      	movs	r1, #1
 800c538:	ec57 6b10 	vmov	r6, r7, d0
 800c53c:	4690      	mov	r8, r2
 800c53e:	f7ff fccf 	bl	800bee0 <_Balloc>
 800c542:	4604      	mov	r4, r0
 800c544:	b930      	cbnz	r0, 800c554 <__d2b+0x24>
 800c546:	4602      	mov	r2, r0
 800c548:	4b25      	ldr	r3, [pc, #148]	; (800c5e0 <__d2b+0xb0>)
 800c54a:	4826      	ldr	r0, [pc, #152]	; (800c5e4 <__d2b+0xb4>)
 800c54c:	f240 310a 	movw	r1, #778	; 0x30a
 800c550:	f7fe fbee 	bl	800ad30 <__assert_func>
 800c554:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c55c:	bb35      	cbnz	r5, 800c5ac <__d2b+0x7c>
 800c55e:	2e00      	cmp	r6, #0
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	d028      	beq.n	800c5b6 <__d2b+0x86>
 800c564:	4668      	mov	r0, sp
 800c566:	9600      	str	r6, [sp, #0]
 800c568:	f7ff fd82 	bl	800c070 <__lo0bits>
 800c56c:	9900      	ldr	r1, [sp, #0]
 800c56e:	b300      	cbz	r0, 800c5b2 <__d2b+0x82>
 800c570:	9a01      	ldr	r2, [sp, #4]
 800c572:	f1c0 0320 	rsb	r3, r0, #32
 800c576:	fa02 f303 	lsl.w	r3, r2, r3
 800c57a:	430b      	orrs	r3, r1
 800c57c:	40c2      	lsrs	r2, r0
 800c57e:	6163      	str	r3, [r4, #20]
 800c580:	9201      	str	r2, [sp, #4]
 800c582:	9b01      	ldr	r3, [sp, #4]
 800c584:	61a3      	str	r3, [r4, #24]
 800c586:	2b00      	cmp	r3, #0
 800c588:	bf14      	ite	ne
 800c58a:	2202      	movne	r2, #2
 800c58c:	2201      	moveq	r2, #1
 800c58e:	6122      	str	r2, [r4, #16]
 800c590:	b1d5      	cbz	r5, 800c5c8 <__d2b+0x98>
 800c592:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c596:	4405      	add	r5, r0
 800c598:	f8c9 5000 	str.w	r5, [r9]
 800c59c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5a0:	f8c8 0000 	str.w	r0, [r8]
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	b003      	add	sp, #12
 800c5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5b0:	e7d5      	b.n	800c55e <__d2b+0x2e>
 800c5b2:	6161      	str	r1, [r4, #20]
 800c5b4:	e7e5      	b.n	800c582 <__d2b+0x52>
 800c5b6:	a801      	add	r0, sp, #4
 800c5b8:	f7ff fd5a 	bl	800c070 <__lo0bits>
 800c5bc:	9b01      	ldr	r3, [sp, #4]
 800c5be:	6163      	str	r3, [r4, #20]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	6122      	str	r2, [r4, #16]
 800c5c4:	3020      	adds	r0, #32
 800c5c6:	e7e3      	b.n	800c590 <__d2b+0x60>
 800c5c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5d0:	f8c9 0000 	str.w	r0, [r9]
 800c5d4:	6918      	ldr	r0, [r3, #16]
 800c5d6:	f7ff fd2b 	bl	800c030 <__hi0bits>
 800c5da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5de:	e7df      	b.n	800c5a0 <__d2b+0x70>
 800c5e0:	0800d572 	.word	0x0800d572
 800c5e4:	0800d5e4 	.word	0x0800d5e4

0800c5e8 <_calloc_r>:
 800c5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5ea:	fba1 2402 	umull	r2, r4, r1, r2
 800c5ee:	b94c      	cbnz	r4, 800c604 <_calloc_r+0x1c>
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	9201      	str	r2, [sp, #4]
 800c5f4:	f000 f87a 	bl	800c6ec <_malloc_r>
 800c5f8:	9a01      	ldr	r2, [sp, #4]
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	b930      	cbnz	r0, 800c60c <_calloc_r+0x24>
 800c5fe:	4628      	mov	r0, r5
 800c600:	b003      	add	sp, #12
 800c602:	bd30      	pop	{r4, r5, pc}
 800c604:	220c      	movs	r2, #12
 800c606:	6002      	str	r2, [r0, #0]
 800c608:	2500      	movs	r5, #0
 800c60a:	e7f8      	b.n	800c5fe <_calloc_r+0x16>
 800c60c:	4621      	mov	r1, r4
 800c60e:	f7fd fd63 	bl	800a0d8 <memset>
 800c612:	e7f4      	b.n	800c5fe <_calloc_r+0x16>

0800c614 <_free_r>:
 800c614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c616:	2900      	cmp	r1, #0
 800c618:	d044      	beq.n	800c6a4 <_free_r+0x90>
 800c61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c61e:	9001      	str	r0, [sp, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	f1a1 0404 	sub.w	r4, r1, #4
 800c626:	bfb8      	it	lt
 800c628:	18e4      	addlt	r4, r4, r3
 800c62a:	f000 faf1 	bl	800cc10 <__malloc_lock>
 800c62e:	4a1e      	ldr	r2, [pc, #120]	; (800c6a8 <_free_r+0x94>)
 800c630:	9801      	ldr	r0, [sp, #4]
 800c632:	6813      	ldr	r3, [r2, #0]
 800c634:	b933      	cbnz	r3, 800c644 <_free_r+0x30>
 800c636:	6063      	str	r3, [r4, #4]
 800c638:	6014      	str	r4, [r2, #0]
 800c63a:	b003      	add	sp, #12
 800c63c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c640:	f000 baec 	b.w	800cc1c <__malloc_unlock>
 800c644:	42a3      	cmp	r3, r4
 800c646:	d908      	bls.n	800c65a <_free_r+0x46>
 800c648:	6825      	ldr	r5, [r4, #0]
 800c64a:	1961      	adds	r1, r4, r5
 800c64c:	428b      	cmp	r3, r1
 800c64e:	bf01      	itttt	eq
 800c650:	6819      	ldreq	r1, [r3, #0]
 800c652:	685b      	ldreq	r3, [r3, #4]
 800c654:	1949      	addeq	r1, r1, r5
 800c656:	6021      	streq	r1, [r4, #0]
 800c658:	e7ed      	b.n	800c636 <_free_r+0x22>
 800c65a:	461a      	mov	r2, r3
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	b10b      	cbz	r3, 800c664 <_free_r+0x50>
 800c660:	42a3      	cmp	r3, r4
 800c662:	d9fa      	bls.n	800c65a <_free_r+0x46>
 800c664:	6811      	ldr	r1, [r2, #0]
 800c666:	1855      	adds	r5, r2, r1
 800c668:	42a5      	cmp	r5, r4
 800c66a:	d10b      	bne.n	800c684 <_free_r+0x70>
 800c66c:	6824      	ldr	r4, [r4, #0]
 800c66e:	4421      	add	r1, r4
 800c670:	1854      	adds	r4, r2, r1
 800c672:	42a3      	cmp	r3, r4
 800c674:	6011      	str	r1, [r2, #0]
 800c676:	d1e0      	bne.n	800c63a <_free_r+0x26>
 800c678:	681c      	ldr	r4, [r3, #0]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	6053      	str	r3, [r2, #4]
 800c67e:	4421      	add	r1, r4
 800c680:	6011      	str	r1, [r2, #0]
 800c682:	e7da      	b.n	800c63a <_free_r+0x26>
 800c684:	d902      	bls.n	800c68c <_free_r+0x78>
 800c686:	230c      	movs	r3, #12
 800c688:	6003      	str	r3, [r0, #0]
 800c68a:	e7d6      	b.n	800c63a <_free_r+0x26>
 800c68c:	6825      	ldr	r5, [r4, #0]
 800c68e:	1961      	adds	r1, r4, r5
 800c690:	428b      	cmp	r3, r1
 800c692:	bf04      	itt	eq
 800c694:	6819      	ldreq	r1, [r3, #0]
 800c696:	685b      	ldreq	r3, [r3, #4]
 800c698:	6063      	str	r3, [r4, #4]
 800c69a:	bf04      	itt	eq
 800c69c:	1949      	addeq	r1, r1, r5
 800c69e:	6021      	streq	r1, [r4, #0]
 800c6a0:	6054      	str	r4, [r2, #4]
 800c6a2:	e7ca      	b.n	800c63a <_free_r+0x26>
 800c6a4:	b003      	add	sp, #12
 800c6a6:	bd30      	pop	{r4, r5, pc}
 800c6a8:	20000a80 	.word	0x20000a80

0800c6ac <sbrk_aligned>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	4e0e      	ldr	r6, [pc, #56]	; (800c6e8 <sbrk_aligned+0x3c>)
 800c6b0:	460c      	mov	r4, r1
 800c6b2:	6831      	ldr	r1, [r6, #0]
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	b911      	cbnz	r1, 800c6be <sbrk_aligned+0x12>
 800c6b8:	f000 f9e6 	bl	800ca88 <_sbrk_r>
 800c6bc:	6030      	str	r0, [r6, #0]
 800c6be:	4621      	mov	r1, r4
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	f000 f9e1 	bl	800ca88 <_sbrk_r>
 800c6c6:	1c43      	adds	r3, r0, #1
 800c6c8:	d00a      	beq.n	800c6e0 <sbrk_aligned+0x34>
 800c6ca:	1cc4      	adds	r4, r0, #3
 800c6cc:	f024 0403 	bic.w	r4, r4, #3
 800c6d0:	42a0      	cmp	r0, r4
 800c6d2:	d007      	beq.n	800c6e4 <sbrk_aligned+0x38>
 800c6d4:	1a21      	subs	r1, r4, r0
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	f000 f9d6 	bl	800ca88 <_sbrk_r>
 800c6dc:	3001      	adds	r0, #1
 800c6de:	d101      	bne.n	800c6e4 <sbrk_aligned+0x38>
 800c6e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
 800c6e8:	20000a84 	.word	0x20000a84

0800c6ec <_malloc_r>:
 800c6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f0:	1ccd      	adds	r5, r1, #3
 800c6f2:	f025 0503 	bic.w	r5, r5, #3
 800c6f6:	3508      	adds	r5, #8
 800c6f8:	2d0c      	cmp	r5, #12
 800c6fa:	bf38      	it	cc
 800c6fc:	250c      	movcc	r5, #12
 800c6fe:	2d00      	cmp	r5, #0
 800c700:	4607      	mov	r7, r0
 800c702:	db01      	blt.n	800c708 <_malloc_r+0x1c>
 800c704:	42a9      	cmp	r1, r5
 800c706:	d905      	bls.n	800c714 <_malloc_r+0x28>
 800c708:	230c      	movs	r3, #12
 800c70a:	603b      	str	r3, [r7, #0]
 800c70c:	2600      	movs	r6, #0
 800c70e:	4630      	mov	r0, r6
 800c710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c714:	4e2e      	ldr	r6, [pc, #184]	; (800c7d0 <_malloc_r+0xe4>)
 800c716:	f000 fa7b 	bl	800cc10 <__malloc_lock>
 800c71a:	6833      	ldr	r3, [r6, #0]
 800c71c:	461c      	mov	r4, r3
 800c71e:	bb34      	cbnz	r4, 800c76e <_malloc_r+0x82>
 800c720:	4629      	mov	r1, r5
 800c722:	4638      	mov	r0, r7
 800c724:	f7ff ffc2 	bl	800c6ac <sbrk_aligned>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	4604      	mov	r4, r0
 800c72c:	d14d      	bne.n	800c7ca <_malloc_r+0xde>
 800c72e:	6834      	ldr	r4, [r6, #0]
 800c730:	4626      	mov	r6, r4
 800c732:	2e00      	cmp	r6, #0
 800c734:	d140      	bne.n	800c7b8 <_malloc_r+0xcc>
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	4631      	mov	r1, r6
 800c73a:	4638      	mov	r0, r7
 800c73c:	eb04 0803 	add.w	r8, r4, r3
 800c740:	f000 f9a2 	bl	800ca88 <_sbrk_r>
 800c744:	4580      	cmp	r8, r0
 800c746:	d13a      	bne.n	800c7be <_malloc_r+0xd2>
 800c748:	6821      	ldr	r1, [r4, #0]
 800c74a:	3503      	adds	r5, #3
 800c74c:	1a6d      	subs	r5, r5, r1
 800c74e:	f025 0503 	bic.w	r5, r5, #3
 800c752:	3508      	adds	r5, #8
 800c754:	2d0c      	cmp	r5, #12
 800c756:	bf38      	it	cc
 800c758:	250c      	movcc	r5, #12
 800c75a:	4629      	mov	r1, r5
 800c75c:	4638      	mov	r0, r7
 800c75e:	f7ff ffa5 	bl	800c6ac <sbrk_aligned>
 800c762:	3001      	adds	r0, #1
 800c764:	d02b      	beq.n	800c7be <_malloc_r+0xd2>
 800c766:	6823      	ldr	r3, [r4, #0]
 800c768:	442b      	add	r3, r5
 800c76a:	6023      	str	r3, [r4, #0]
 800c76c:	e00e      	b.n	800c78c <_malloc_r+0xa0>
 800c76e:	6822      	ldr	r2, [r4, #0]
 800c770:	1b52      	subs	r2, r2, r5
 800c772:	d41e      	bmi.n	800c7b2 <_malloc_r+0xc6>
 800c774:	2a0b      	cmp	r2, #11
 800c776:	d916      	bls.n	800c7a6 <_malloc_r+0xba>
 800c778:	1961      	adds	r1, r4, r5
 800c77a:	42a3      	cmp	r3, r4
 800c77c:	6025      	str	r5, [r4, #0]
 800c77e:	bf18      	it	ne
 800c780:	6059      	strne	r1, [r3, #4]
 800c782:	6863      	ldr	r3, [r4, #4]
 800c784:	bf08      	it	eq
 800c786:	6031      	streq	r1, [r6, #0]
 800c788:	5162      	str	r2, [r4, r5]
 800c78a:	604b      	str	r3, [r1, #4]
 800c78c:	4638      	mov	r0, r7
 800c78e:	f104 060b 	add.w	r6, r4, #11
 800c792:	f000 fa43 	bl	800cc1c <__malloc_unlock>
 800c796:	f026 0607 	bic.w	r6, r6, #7
 800c79a:	1d23      	adds	r3, r4, #4
 800c79c:	1af2      	subs	r2, r6, r3
 800c79e:	d0b6      	beq.n	800c70e <_malloc_r+0x22>
 800c7a0:	1b9b      	subs	r3, r3, r6
 800c7a2:	50a3      	str	r3, [r4, r2]
 800c7a4:	e7b3      	b.n	800c70e <_malloc_r+0x22>
 800c7a6:	6862      	ldr	r2, [r4, #4]
 800c7a8:	42a3      	cmp	r3, r4
 800c7aa:	bf0c      	ite	eq
 800c7ac:	6032      	streq	r2, [r6, #0]
 800c7ae:	605a      	strne	r2, [r3, #4]
 800c7b0:	e7ec      	b.n	800c78c <_malloc_r+0xa0>
 800c7b2:	4623      	mov	r3, r4
 800c7b4:	6864      	ldr	r4, [r4, #4]
 800c7b6:	e7b2      	b.n	800c71e <_malloc_r+0x32>
 800c7b8:	4634      	mov	r4, r6
 800c7ba:	6876      	ldr	r6, [r6, #4]
 800c7bc:	e7b9      	b.n	800c732 <_malloc_r+0x46>
 800c7be:	230c      	movs	r3, #12
 800c7c0:	603b      	str	r3, [r7, #0]
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	f000 fa2a 	bl	800cc1c <__malloc_unlock>
 800c7c8:	e7a1      	b.n	800c70e <_malloc_r+0x22>
 800c7ca:	6025      	str	r5, [r4, #0]
 800c7cc:	e7de      	b.n	800c78c <_malloc_r+0xa0>
 800c7ce:	bf00      	nop
 800c7d0:	20000a80 	.word	0x20000a80

0800c7d4 <__sfputc_r>:
 800c7d4:	6893      	ldr	r3, [r2, #8]
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	b410      	push	{r4}
 800c7dc:	6093      	str	r3, [r2, #8]
 800c7de:	da08      	bge.n	800c7f2 <__sfputc_r+0x1e>
 800c7e0:	6994      	ldr	r4, [r2, #24]
 800c7e2:	42a3      	cmp	r3, r4
 800c7e4:	db01      	blt.n	800c7ea <__sfputc_r+0x16>
 800c7e6:	290a      	cmp	r1, #10
 800c7e8:	d103      	bne.n	800c7f2 <__sfputc_r+0x1e>
 800c7ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7ee:	f7fe b9df 	b.w	800abb0 <__swbuf_r>
 800c7f2:	6813      	ldr	r3, [r2, #0]
 800c7f4:	1c58      	adds	r0, r3, #1
 800c7f6:	6010      	str	r0, [r2, #0]
 800c7f8:	7019      	strb	r1, [r3, #0]
 800c7fa:	4608      	mov	r0, r1
 800c7fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <__sfputs_r>:
 800c802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c804:	4606      	mov	r6, r0
 800c806:	460f      	mov	r7, r1
 800c808:	4614      	mov	r4, r2
 800c80a:	18d5      	adds	r5, r2, r3
 800c80c:	42ac      	cmp	r4, r5
 800c80e:	d101      	bne.n	800c814 <__sfputs_r+0x12>
 800c810:	2000      	movs	r0, #0
 800c812:	e007      	b.n	800c824 <__sfputs_r+0x22>
 800c814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c818:	463a      	mov	r2, r7
 800c81a:	4630      	mov	r0, r6
 800c81c:	f7ff ffda 	bl	800c7d4 <__sfputc_r>
 800c820:	1c43      	adds	r3, r0, #1
 800c822:	d1f3      	bne.n	800c80c <__sfputs_r+0xa>
 800c824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c828 <_vfiprintf_r>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	460d      	mov	r5, r1
 800c82e:	b09d      	sub	sp, #116	; 0x74
 800c830:	4614      	mov	r4, r2
 800c832:	4698      	mov	r8, r3
 800c834:	4606      	mov	r6, r0
 800c836:	b118      	cbz	r0, 800c840 <_vfiprintf_r+0x18>
 800c838:	6983      	ldr	r3, [r0, #24]
 800c83a:	b90b      	cbnz	r3, 800c840 <_vfiprintf_r+0x18>
 800c83c:	f7ff fa2c 	bl	800bc98 <__sinit>
 800c840:	4b89      	ldr	r3, [pc, #548]	; (800ca68 <_vfiprintf_r+0x240>)
 800c842:	429d      	cmp	r5, r3
 800c844:	d11b      	bne.n	800c87e <_vfiprintf_r+0x56>
 800c846:	6875      	ldr	r5, [r6, #4]
 800c848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c84a:	07d9      	lsls	r1, r3, #31
 800c84c:	d405      	bmi.n	800c85a <_vfiprintf_r+0x32>
 800c84e:	89ab      	ldrh	r3, [r5, #12]
 800c850:	059a      	lsls	r2, r3, #22
 800c852:	d402      	bmi.n	800c85a <_vfiprintf_r+0x32>
 800c854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c856:	f7ff fad4 	bl	800be02 <__retarget_lock_acquire_recursive>
 800c85a:	89ab      	ldrh	r3, [r5, #12]
 800c85c:	071b      	lsls	r3, r3, #28
 800c85e:	d501      	bpl.n	800c864 <_vfiprintf_r+0x3c>
 800c860:	692b      	ldr	r3, [r5, #16]
 800c862:	b9eb      	cbnz	r3, 800c8a0 <_vfiprintf_r+0x78>
 800c864:	4629      	mov	r1, r5
 800c866:	4630      	mov	r0, r6
 800c868:	f7fe f9f4 	bl	800ac54 <__swsetup_r>
 800c86c:	b1c0      	cbz	r0, 800c8a0 <_vfiprintf_r+0x78>
 800c86e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c870:	07dc      	lsls	r4, r3, #31
 800c872:	d50e      	bpl.n	800c892 <_vfiprintf_r+0x6a>
 800c874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c878:	b01d      	add	sp, #116	; 0x74
 800c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87e:	4b7b      	ldr	r3, [pc, #492]	; (800ca6c <_vfiprintf_r+0x244>)
 800c880:	429d      	cmp	r5, r3
 800c882:	d101      	bne.n	800c888 <_vfiprintf_r+0x60>
 800c884:	68b5      	ldr	r5, [r6, #8]
 800c886:	e7df      	b.n	800c848 <_vfiprintf_r+0x20>
 800c888:	4b79      	ldr	r3, [pc, #484]	; (800ca70 <_vfiprintf_r+0x248>)
 800c88a:	429d      	cmp	r5, r3
 800c88c:	bf08      	it	eq
 800c88e:	68f5      	ldreq	r5, [r6, #12]
 800c890:	e7da      	b.n	800c848 <_vfiprintf_r+0x20>
 800c892:	89ab      	ldrh	r3, [r5, #12]
 800c894:	0598      	lsls	r0, r3, #22
 800c896:	d4ed      	bmi.n	800c874 <_vfiprintf_r+0x4c>
 800c898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c89a:	f7ff fab3 	bl	800be04 <__retarget_lock_release_recursive>
 800c89e:	e7e9      	b.n	800c874 <_vfiprintf_r+0x4c>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8a4:	2320      	movs	r3, #32
 800c8a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ae:	2330      	movs	r3, #48	; 0x30
 800c8b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca74 <_vfiprintf_r+0x24c>
 800c8b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8b8:	f04f 0901 	mov.w	r9, #1
 800c8bc:	4623      	mov	r3, r4
 800c8be:	469a      	mov	sl, r3
 800c8c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8c4:	b10a      	cbz	r2, 800c8ca <_vfiprintf_r+0xa2>
 800c8c6:	2a25      	cmp	r2, #37	; 0x25
 800c8c8:	d1f9      	bne.n	800c8be <_vfiprintf_r+0x96>
 800c8ca:	ebba 0b04 	subs.w	fp, sl, r4
 800c8ce:	d00b      	beq.n	800c8e8 <_vfiprintf_r+0xc0>
 800c8d0:	465b      	mov	r3, fp
 800c8d2:	4622      	mov	r2, r4
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f7ff ff93 	bl	800c802 <__sfputs_r>
 800c8dc:	3001      	adds	r0, #1
 800c8de:	f000 80aa 	beq.w	800ca36 <_vfiprintf_r+0x20e>
 800c8e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8e4:	445a      	add	r2, fp
 800c8e6:	9209      	str	r2, [sp, #36]	; 0x24
 800c8e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f000 80a2 	beq.w	800ca36 <_vfiprintf_r+0x20e>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8fc:	f10a 0a01 	add.w	sl, sl, #1
 800c900:	9304      	str	r3, [sp, #16]
 800c902:	9307      	str	r3, [sp, #28]
 800c904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c908:	931a      	str	r3, [sp, #104]	; 0x68
 800c90a:	4654      	mov	r4, sl
 800c90c:	2205      	movs	r2, #5
 800c90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c912:	4858      	ldr	r0, [pc, #352]	; (800ca74 <_vfiprintf_r+0x24c>)
 800c914:	f7f3 fc64 	bl	80001e0 <memchr>
 800c918:	9a04      	ldr	r2, [sp, #16]
 800c91a:	b9d8      	cbnz	r0, 800c954 <_vfiprintf_r+0x12c>
 800c91c:	06d1      	lsls	r1, r2, #27
 800c91e:	bf44      	itt	mi
 800c920:	2320      	movmi	r3, #32
 800c922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c926:	0713      	lsls	r3, r2, #28
 800c928:	bf44      	itt	mi
 800c92a:	232b      	movmi	r3, #43	; 0x2b
 800c92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c930:	f89a 3000 	ldrb.w	r3, [sl]
 800c934:	2b2a      	cmp	r3, #42	; 0x2a
 800c936:	d015      	beq.n	800c964 <_vfiprintf_r+0x13c>
 800c938:	9a07      	ldr	r2, [sp, #28]
 800c93a:	4654      	mov	r4, sl
 800c93c:	2000      	movs	r0, #0
 800c93e:	f04f 0c0a 	mov.w	ip, #10
 800c942:	4621      	mov	r1, r4
 800c944:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c948:	3b30      	subs	r3, #48	; 0x30
 800c94a:	2b09      	cmp	r3, #9
 800c94c:	d94e      	bls.n	800c9ec <_vfiprintf_r+0x1c4>
 800c94e:	b1b0      	cbz	r0, 800c97e <_vfiprintf_r+0x156>
 800c950:	9207      	str	r2, [sp, #28]
 800c952:	e014      	b.n	800c97e <_vfiprintf_r+0x156>
 800c954:	eba0 0308 	sub.w	r3, r0, r8
 800c958:	fa09 f303 	lsl.w	r3, r9, r3
 800c95c:	4313      	orrs	r3, r2
 800c95e:	9304      	str	r3, [sp, #16]
 800c960:	46a2      	mov	sl, r4
 800c962:	e7d2      	b.n	800c90a <_vfiprintf_r+0xe2>
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	1d19      	adds	r1, r3, #4
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	9103      	str	r1, [sp, #12]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	bfbb      	ittet	lt
 800c970:	425b      	neglt	r3, r3
 800c972:	f042 0202 	orrlt.w	r2, r2, #2
 800c976:	9307      	strge	r3, [sp, #28]
 800c978:	9307      	strlt	r3, [sp, #28]
 800c97a:	bfb8      	it	lt
 800c97c:	9204      	strlt	r2, [sp, #16]
 800c97e:	7823      	ldrb	r3, [r4, #0]
 800c980:	2b2e      	cmp	r3, #46	; 0x2e
 800c982:	d10c      	bne.n	800c99e <_vfiprintf_r+0x176>
 800c984:	7863      	ldrb	r3, [r4, #1]
 800c986:	2b2a      	cmp	r3, #42	; 0x2a
 800c988:	d135      	bne.n	800c9f6 <_vfiprintf_r+0x1ce>
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	1d1a      	adds	r2, r3, #4
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	9203      	str	r2, [sp, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	bfb8      	it	lt
 800c996:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c99a:	3402      	adds	r4, #2
 800c99c:	9305      	str	r3, [sp, #20]
 800c99e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca84 <_vfiprintf_r+0x25c>
 800c9a2:	7821      	ldrb	r1, [r4, #0]
 800c9a4:	2203      	movs	r2, #3
 800c9a6:	4650      	mov	r0, sl
 800c9a8:	f7f3 fc1a 	bl	80001e0 <memchr>
 800c9ac:	b140      	cbz	r0, 800c9c0 <_vfiprintf_r+0x198>
 800c9ae:	2340      	movs	r3, #64	; 0x40
 800c9b0:	eba0 000a 	sub.w	r0, r0, sl
 800c9b4:	fa03 f000 	lsl.w	r0, r3, r0
 800c9b8:	9b04      	ldr	r3, [sp, #16]
 800c9ba:	4303      	orrs	r3, r0
 800c9bc:	3401      	adds	r4, #1
 800c9be:	9304      	str	r3, [sp, #16]
 800c9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9c4:	482c      	ldr	r0, [pc, #176]	; (800ca78 <_vfiprintf_r+0x250>)
 800c9c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9ca:	2206      	movs	r2, #6
 800c9cc:	f7f3 fc08 	bl	80001e0 <memchr>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d03f      	beq.n	800ca54 <_vfiprintf_r+0x22c>
 800c9d4:	4b29      	ldr	r3, [pc, #164]	; (800ca7c <_vfiprintf_r+0x254>)
 800c9d6:	bb1b      	cbnz	r3, 800ca20 <_vfiprintf_r+0x1f8>
 800c9d8:	9b03      	ldr	r3, [sp, #12]
 800c9da:	3307      	adds	r3, #7
 800c9dc:	f023 0307 	bic.w	r3, r3, #7
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	9303      	str	r3, [sp, #12]
 800c9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9e6:	443b      	add	r3, r7
 800c9e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ea:	e767      	b.n	800c8bc <_vfiprintf_r+0x94>
 800c9ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9f0:	460c      	mov	r4, r1
 800c9f2:	2001      	movs	r0, #1
 800c9f4:	e7a5      	b.n	800c942 <_vfiprintf_r+0x11a>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	3401      	adds	r4, #1
 800c9fa:	9305      	str	r3, [sp, #20]
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	f04f 0c0a 	mov.w	ip, #10
 800ca02:	4620      	mov	r0, r4
 800ca04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca08:	3a30      	subs	r2, #48	; 0x30
 800ca0a:	2a09      	cmp	r2, #9
 800ca0c:	d903      	bls.n	800ca16 <_vfiprintf_r+0x1ee>
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d0c5      	beq.n	800c99e <_vfiprintf_r+0x176>
 800ca12:	9105      	str	r1, [sp, #20]
 800ca14:	e7c3      	b.n	800c99e <_vfiprintf_r+0x176>
 800ca16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e7f0      	b.n	800ca02 <_vfiprintf_r+0x1da>
 800ca20:	ab03      	add	r3, sp, #12
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	462a      	mov	r2, r5
 800ca26:	4b16      	ldr	r3, [pc, #88]	; (800ca80 <_vfiprintf_r+0x258>)
 800ca28:	a904      	add	r1, sp, #16
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f7fd fbfc 	bl	800a228 <_printf_float>
 800ca30:	4607      	mov	r7, r0
 800ca32:	1c78      	adds	r0, r7, #1
 800ca34:	d1d6      	bne.n	800c9e4 <_vfiprintf_r+0x1bc>
 800ca36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca38:	07d9      	lsls	r1, r3, #31
 800ca3a:	d405      	bmi.n	800ca48 <_vfiprintf_r+0x220>
 800ca3c:	89ab      	ldrh	r3, [r5, #12]
 800ca3e:	059a      	lsls	r2, r3, #22
 800ca40:	d402      	bmi.n	800ca48 <_vfiprintf_r+0x220>
 800ca42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca44:	f7ff f9de 	bl	800be04 <__retarget_lock_release_recursive>
 800ca48:	89ab      	ldrh	r3, [r5, #12]
 800ca4a:	065b      	lsls	r3, r3, #25
 800ca4c:	f53f af12 	bmi.w	800c874 <_vfiprintf_r+0x4c>
 800ca50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca52:	e711      	b.n	800c878 <_vfiprintf_r+0x50>
 800ca54:	ab03      	add	r3, sp, #12
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	462a      	mov	r2, r5
 800ca5a:	4b09      	ldr	r3, [pc, #36]	; (800ca80 <_vfiprintf_r+0x258>)
 800ca5c:	a904      	add	r1, sp, #16
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f7fd fe86 	bl	800a770 <_printf_i>
 800ca64:	e7e4      	b.n	800ca30 <_vfiprintf_r+0x208>
 800ca66:	bf00      	nop
 800ca68:	0800d5a4 	.word	0x0800d5a4
 800ca6c:	0800d5c4 	.word	0x0800d5c4
 800ca70:	0800d584 	.word	0x0800d584
 800ca74:	0800d73c 	.word	0x0800d73c
 800ca78:	0800d746 	.word	0x0800d746
 800ca7c:	0800a229 	.word	0x0800a229
 800ca80:	0800c803 	.word	0x0800c803
 800ca84:	0800d742 	.word	0x0800d742

0800ca88 <_sbrk_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	4d06      	ldr	r5, [pc, #24]	; (800caa4 <_sbrk_r+0x1c>)
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	4604      	mov	r4, r0
 800ca90:	4608      	mov	r0, r1
 800ca92:	602b      	str	r3, [r5, #0]
 800ca94:	f7f6 ff32 	bl	80038fc <_sbrk>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d102      	bne.n	800caa2 <_sbrk_r+0x1a>
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	b103      	cbz	r3, 800caa2 <_sbrk_r+0x1a>
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	20000a88 	.word	0x20000a88

0800caa8 <__sread>:
 800caa8:	b510      	push	{r4, lr}
 800caaa:	460c      	mov	r4, r1
 800caac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cab0:	f000 f8ba 	bl	800cc28 <_read_r>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	bfab      	itete	ge
 800cab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800caba:	89a3      	ldrhlt	r3, [r4, #12]
 800cabc:	181b      	addge	r3, r3, r0
 800cabe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cac2:	bfac      	ite	ge
 800cac4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cac6:	81a3      	strhlt	r3, [r4, #12]
 800cac8:	bd10      	pop	{r4, pc}

0800caca <__swrite>:
 800caca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cace:	461f      	mov	r7, r3
 800cad0:	898b      	ldrh	r3, [r1, #12]
 800cad2:	05db      	lsls	r3, r3, #23
 800cad4:	4605      	mov	r5, r0
 800cad6:	460c      	mov	r4, r1
 800cad8:	4616      	mov	r6, r2
 800cada:	d505      	bpl.n	800cae8 <__swrite+0x1e>
 800cadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cae0:	2302      	movs	r3, #2
 800cae2:	2200      	movs	r2, #0
 800cae4:	f000 f870 	bl	800cbc8 <_lseek_r>
 800cae8:	89a3      	ldrh	r3, [r4, #12]
 800caea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800caf2:	81a3      	strh	r3, [r4, #12]
 800caf4:	4632      	mov	r2, r6
 800caf6:	463b      	mov	r3, r7
 800caf8:	4628      	mov	r0, r5
 800cafa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cafe:	f000 b817 	b.w	800cb30 <_write_r>

0800cb02 <__sseek>:
 800cb02:	b510      	push	{r4, lr}
 800cb04:	460c      	mov	r4, r1
 800cb06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb0a:	f000 f85d 	bl	800cbc8 <_lseek_r>
 800cb0e:	1c43      	adds	r3, r0, #1
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	bf15      	itete	ne
 800cb14:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb1e:	81a3      	strheq	r3, [r4, #12]
 800cb20:	bf18      	it	ne
 800cb22:	81a3      	strhne	r3, [r4, #12]
 800cb24:	bd10      	pop	{r4, pc}

0800cb26 <__sclose>:
 800cb26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb2a:	f000 b81b 	b.w	800cb64 <_close_r>
	...

0800cb30 <_write_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4d07      	ldr	r5, [pc, #28]	; (800cb50 <_write_r+0x20>)
 800cb34:	4604      	mov	r4, r0
 800cb36:	4608      	mov	r0, r1
 800cb38:	4611      	mov	r1, r2
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	602a      	str	r2, [r5, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	f7f6 fe8b 	bl	800385a <_write>
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	d102      	bne.n	800cb4e <_write_r+0x1e>
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	b103      	cbz	r3, 800cb4e <_write_r+0x1e>
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	20000a88 	.word	0x20000a88

0800cb54 <abort>:
 800cb54:	b508      	push	{r3, lr}
 800cb56:	2006      	movs	r0, #6
 800cb58:	f000 f8a0 	bl	800cc9c <raise>
 800cb5c:	2001      	movs	r0, #1
 800cb5e:	f7f6 fe55 	bl	800380c <_exit>
	...

0800cb64 <_close_r>:
 800cb64:	b538      	push	{r3, r4, r5, lr}
 800cb66:	4d06      	ldr	r5, [pc, #24]	; (800cb80 <_close_r+0x1c>)
 800cb68:	2300      	movs	r3, #0
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	4608      	mov	r0, r1
 800cb6e:	602b      	str	r3, [r5, #0]
 800cb70:	f7f6 fe8f 	bl	8003892 <_close>
 800cb74:	1c43      	adds	r3, r0, #1
 800cb76:	d102      	bne.n	800cb7e <_close_r+0x1a>
 800cb78:	682b      	ldr	r3, [r5, #0]
 800cb7a:	b103      	cbz	r3, 800cb7e <_close_r+0x1a>
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	bd38      	pop	{r3, r4, r5, pc}
 800cb80:	20000a88 	.word	0x20000a88

0800cb84 <_fstat_r>:
 800cb84:	b538      	push	{r3, r4, r5, lr}
 800cb86:	4d07      	ldr	r5, [pc, #28]	; (800cba4 <_fstat_r+0x20>)
 800cb88:	2300      	movs	r3, #0
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	4608      	mov	r0, r1
 800cb8e:	4611      	mov	r1, r2
 800cb90:	602b      	str	r3, [r5, #0]
 800cb92:	f7f6 fe8a 	bl	80038aa <_fstat>
 800cb96:	1c43      	adds	r3, r0, #1
 800cb98:	d102      	bne.n	800cba0 <_fstat_r+0x1c>
 800cb9a:	682b      	ldr	r3, [r5, #0]
 800cb9c:	b103      	cbz	r3, 800cba0 <_fstat_r+0x1c>
 800cb9e:	6023      	str	r3, [r4, #0]
 800cba0:	bd38      	pop	{r3, r4, r5, pc}
 800cba2:	bf00      	nop
 800cba4:	20000a88 	.word	0x20000a88

0800cba8 <_isatty_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d06      	ldr	r5, [pc, #24]	; (800cbc4 <_isatty_r+0x1c>)
 800cbac:	2300      	movs	r3, #0
 800cbae:	4604      	mov	r4, r0
 800cbb0:	4608      	mov	r0, r1
 800cbb2:	602b      	str	r3, [r5, #0]
 800cbb4:	f7f6 fe89 	bl	80038ca <_isatty>
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	d102      	bne.n	800cbc2 <_isatty_r+0x1a>
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	b103      	cbz	r3, 800cbc2 <_isatty_r+0x1a>
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	bd38      	pop	{r3, r4, r5, pc}
 800cbc4:	20000a88 	.word	0x20000a88

0800cbc8 <_lseek_r>:
 800cbc8:	b538      	push	{r3, r4, r5, lr}
 800cbca:	4d07      	ldr	r5, [pc, #28]	; (800cbe8 <_lseek_r+0x20>)
 800cbcc:	4604      	mov	r4, r0
 800cbce:	4608      	mov	r0, r1
 800cbd0:	4611      	mov	r1, r2
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	602a      	str	r2, [r5, #0]
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	f7f6 fe82 	bl	80038e0 <_lseek>
 800cbdc:	1c43      	adds	r3, r0, #1
 800cbde:	d102      	bne.n	800cbe6 <_lseek_r+0x1e>
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	b103      	cbz	r3, 800cbe6 <_lseek_r+0x1e>
 800cbe4:	6023      	str	r3, [r4, #0]
 800cbe6:	bd38      	pop	{r3, r4, r5, pc}
 800cbe8:	20000a88 	.word	0x20000a88

0800cbec <__ascii_mbtowc>:
 800cbec:	b082      	sub	sp, #8
 800cbee:	b901      	cbnz	r1, 800cbf2 <__ascii_mbtowc+0x6>
 800cbf0:	a901      	add	r1, sp, #4
 800cbf2:	b142      	cbz	r2, 800cc06 <__ascii_mbtowc+0x1a>
 800cbf4:	b14b      	cbz	r3, 800cc0a <__ascii_mbtowc+0x1e>
 800cbf6:	7813      	ldrb	r3, [r2, #0]
 800cbf8:	600b      	str	r3, [r1, #0]
 800cbfa:	7812      	ldrb	r2, [r2, #0]
 800cbfc:	1e10      	subs	r0, r2, #0
 800cbfe:	bf18      	it	ne
 800cc00:	2001      	movne	r0, #1
 800cc02:	b002      	add	sp, #8
 800cc04:	4770      	bx	lr
 800cc06:	4610      	mov	r0, r2
 800cc08:	e7fb      	b.n	800cc02 <__ascii_mbtowc+0x16>
 800cc0a:	f06f 0001 	mvn.w	r0, #1
 800cc0e:	e7f8      	b.n	800cc02 <__ascii_mbtowc+0x16>

0800cc10 <__malloc_lock>:
 800cc10:	4801      	ldr	r0, [pc, #4]	; (800cc18 <__malloc_lock+0x8>)
 800cc12:	f7ff b8f6 	b.w	800be02 <__retarget_lock_acquire_recursive>
 800cc16:	bf00      	nop
 800cc18:	20000a7c 	.word	0x20000a7c

0800cc1c <__malloc_unlock>:
 800cc1c:	4801      	ldr	r0, [pc, #4]	; (800cc24 <__malloc_unlock+0x8>)
 800cc1e:	f7ff b8f1 	b.w	800be04 <__retarget_lock_release_recursive>
 800cc22:	bf00      	nop
 800cc24:	20000a7c 	.word	0x20000a7c

0800cc28 <_read_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4d07      	ldr	r5, [pc, #28]	; (800cc48 <_read_r+0x20>)
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	4608      	mov	r0, r1
 800cc30:	4611      	mov	r1, r2
 800cc32:	2200      	movs	r2, #0
 800cc34:	602a      	str	r2, [r5, #0]
 800cc36:	461a      	mov	r2, r3
 800cc38:	f7f6 fdf2 	bl	8003820 <_read>
 800cc3c:	1c43      	adds	r3, r0, #1
 800cc3e:	d102      	bne.n	800cc46 <_read_r+0x1e>
 800cc40:	682b      	ldr	r3, [r5, #0]
 800cc42:	b103      	cbz	r3, 800cc46 <_read_r+0x1e>
 800cc44:	6023      	str	r3, [r4, #0]
 800cc46:	bd38      	pop	{r3, r4, r5, pc}
 800cc48:	20000a88 	.word	0x20000a88

0800cc4c <_raise_r>:
 800cc4c:	291f      	cmp	r1, #31
 800cc4e:	b538      	push	{r3, r4, r5, lr}
 800cc50:	4604      	mov	r4, r0
 800cc52:	460d      	mov	r5, r1
 800cc54:	d904      	bls.n	800cc60 <_raise_r+0x14>
 800cc56:	2316      	movs	r3, #22
 800cc58:	6003      	str	r3, [r0, #0]
 800cc5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc62:	b112      	cbz	r2, 800cc6a <_raise_r+0x1e>
 800cc64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc68:	b94b      	cbnz	r3, 800cc7e <_raise_r+0x32>
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f000 f830 	bl	800ccd0 <_getpid_r>
 800cc70:	462a      	mov	r2, r5
 800cc72:	4601      	mov	r1, r0
 800cc74:	4620      	mov	r0, r4
 800cc76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc7a:	f000 b817 	b.w	800ccac <_kill_r>
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d00a      	beq.n	800cc98 <_raise_r+0x4c>
 800cc82:	1c59      	adds	r1, r3, #1
 800cc84:	d103      	bne.n	800cc8e <_raise_r+0x42>
 800cc86:	2316      	movs	r3, #22
 800cc88:	6003      	str	r3, [r0, #0]
 800cc8a:	2001      	movs	r0, #1
 800cc8c:	e7e7      	b.n	800cc5e <_raise_r+0x12>
 800cc8e:	2400      	movs	r4, #0
 800cc90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc94:	4628      	mov	r0, r5
 800cc96:	4798      	blx	r3
 800cc98:	2000      	movs	r0, #0
 800cc9a:	e7e0      	b.n	800cc5e <_raise_r+0x12>

0800cc9c <raise>:
 800cc9c:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <raise+0xc>)
 800cc9e:	4601      	mov	r1, r0
 800cca0:	6818      	ldr	r0, [r3, #0]
 800cca2:	f7ff bfd3 	b.w	800cc4c <_raise_r>
 800cca6:	bf00      	nop
 800cca8:	20000024 	.word	0x20000024

0800ccac <_kill_r>:
 800ccac:	b538      	push	{r3, r4, r5, lr}
 800ccae:	4d07      	ldr	r5, [pc, #28]	; (800cccc <_kill_r+0x20>)
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	4608      	mov	r0, r1
 800ccb6:	4611      	mov	r1, r2
 800ccb8:	602b      	str	r3, [r5, #0]
 800ccba:	f7f6 fd97 	bl	80037ec <_kill>
 800ccbe:	1c43      	adds	r3, r0, #1
 800ccc0:	d102      	bne.n	800ccc8 <_kill_r+0x1c>
 800ccc2:	682b      	ldr	r3, [r5, #0]
 800ccc4:	b103      	cbz	r3, 800ccc8 <_kill_r+0x1c>
 800ccc6:	6023      	str	r3, [r4, #0]
 800ccc8:	bd38      	pop	{r3, r4, r5, pc}
 800ccca:	bf00      	nop
 800cccc:	20000a88 	.word	0x20000a88

0800ccd0 <_getpid_r>:
 800ccd0:	f7f6 bd84 	b.w	80037dc <_getpid>

0800ccd4 <__ascii_wctomb>:
 800ccd4:	b149      	cbz	r1, 800ccea <__ascii_wctomb+0x16>
 800ccd6:	2aff      	cmp	r2, #255	; 0xff
 800ccd8:	bf85      	ittet	hi
 800ccda:	238a      	movhi	r3, #138	; 0x8a
 800ccdc:	6003      	strhi	r3, [r0, #0]
 800ccde:	700a      	strbls	r2, [r1, #0]
 800cce0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cce4:	bf98      	it	ls
 800cce6:	2001      	movls	r0, #1
 800cce8:	4770      	bx	lr
 800ccea:	4608      	mov	r0, r1
 800ccec:	4770      	bx	lr
	...

0800ccf0 <_init>:
 800ccf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf2:	bf00      	nop
 800ccf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf6:	bc08      	pop	{r3}
 800ccf8:	469e      	mov	lr, r3
 800ccfa:	4770      	bx	lr

0800ccfc <_fini>:
 800ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfe:	bf00      	nop
 800cd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd02:	bc08      	pop	{r3}
 800cd04:	469e      	mov	lr, r3
 800cd06:	4770      	bx	lr
